<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云少资源库</title>
  
  <subtitle>这里有你想要的一切</subtitle>
  <link href="https://tryrun.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://tryrun.gitee.io/"/>
  <updated>2022-06-08T10:49:34.000Z</updated>
  <id>https://tryrun.gitee.io/</id>
  
  <author>
    <name>云少</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二十、Java 8 函数接口 （ Functional interface ）</title>
    <link href="https://tryrun.gitee.io/posts/783096c.html"/>
    <id>https://tryrun.gitee.io/posts/783096c.html</id>
    <published>2022-06-08T11:13:55.000Z</published>
    <updated>2022-06-08T10:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二十、Java-8-函数接口-（-Functional-interface-）"><a href="#二十、Java-8-函数接口-（-Functional-interface-）" class="headerlink" title="二十、Java 8 函数接口 （ Functional interface ）"></a>二十、Java 8 函数接口 （ Functional interface ）</h1><p>Java 8 引入了 「 函数接口 」 ( funtional interface ) 的概念，「 函数接口 」就是那些有且只有显式定义一个方法的接口。</p><p>例如，具有单个方法 <code>compareTo()</code> 的接口 <code>Comparable</code> 接口，它只有一个功能，就是用于比较。</p><p>这种函数接口一般用于 Java 8 中的 Lambda 表达式 。 而且 Java 8 为了支持 Lambda 表达式，更是定义了许多函数接口。这些接口基本都在 <code>java.util.function</code> 包中。</p><h2 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h2><p>函数接口为 Java 8 Lambda 表达式和方法引用提供目标类型。每个函数接口都有一个 虚 ( abstract ) 方法，成为该函数接口的函数方法。用于适配该类型的 Lambda 表达式的参数类型和返回值类型。</p><p>函数接口可以在多个上下文中提供目标类型，例如赋值上下文，方法调用或强制转换上下文。</p><p>我们写一小段代码演示下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assignment context</span></span><br><span class="line">Predicate&lt;String&gt; p = String::isEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Method invocation context</span></span><br><span class="line">stream.filter(e -&gt; e.getSize() &gt; <span class="number">10</span>)...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cast context</span></span><br><span class="line">stream.map((ToIntFunction) e -&gt; e.getSize())..</span><br></pre></td></tr></table></figure><h2 id="函数接口的规则"><a href="#函数接口的规则" class="headerlink" title="函数接口的规则"></a>函数接口的规则</h2><p>那么，什么样的接口才能称之为函数接口呢 ？</p><p>如果一个接口的实现类只需要实现一个方法，那么该接口就是函数接口。</p><p>具体来说，有以下两种情况</p><p>1、 那些只有一个方法的接口，例如 <code>Comparable</code> 接口，它只有一个方法 <code>compareTo()</code>。<br>2、 那些具有多个默认方法，但有且只有一个虚方法的接口。也就是说，函数接口也可以有多个方法，但除了一个可用 Lambda 表达式来实现的方法，其它方法都必须有 <code>default</code> 关键字。</p><h2 id="java-util-function-包中定义的函数接口"><a href="#java-util-function-包中定义的函数接口" class="headerlink" title="java.util.function 包中定义的函数接口"></a>java.util.function 包中定义的函数接口</h2><p><code>java.util.function</code> 包中定义了大量的函数接口，下表列出了这些接口，并对其做一些简单的介绍。</p><table><thead><tr><th align="center">接口</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">BiConsumer&lt;T,U&gt;</td><td align="center">表示接受两个不同类型的参数，但不返回任何结果的操作</td></tr><tr><td align="center">BiFunction&lt;T,U,R&gt;</td><td align="center">表示接受两个不同类型的参数，并返回一个其它类型的结果的操作</td></tr><tr><td align="center">BinaryOperator<T></td><td align="center">表示接受两个相同类型的参数，并返回一个同一类型的结果的操作</td></tr><tr><td align="center">BiPredicate&lt;T,U&gt;</td><td align="center">表示接受两个不同诶行的参数，且返回布尔类型的结果的操作</td></tr><tr><td align="center">BooleanSupplier</td><td align="center">不接受任何参数，且返回一个布尔类型的结果的操作</td></tr><tr><td align="center">Consumer<T></td><td align="center">表示接受一个参数，但不返回任何结果的操作</td></tr><tr><td align="center">DoubleBinaryOperator</td><td align="center">表示接受两个 double 类型的参数，并返回 double 类型结果的操作</td></tr><tr><td align="center">DoubleConsumer</td><td align="center">表示接受一个 double 类型的参数，但不返回任何结果的操作</td></tr><tr><td align="center">DoubleFunction<R></td><td align="center">表示接受一个 double 类型的参数，且返回一个 R 类型的结果的操作</td></tr><tr><td align="center">DoublePredicate</td><td align="center">表示一个接受两个 double 类型的参数， 且返回一个布尔类型的结果的操作</td></tr><tr><td align="center">DoubleSupplier</td><td align="center">表示一个不接受任何参数，但返回布尔类型的结果的操作</td></tr><tr><td align="center">DoubleToIntFunction</td><td align="center">表示接受两个 double 类型的参数，但返回一个 int 类型的结果的操作</td></tr><tr><td align="center">DoubleToLongFunction</td><td align="center">表示接受两个 double 类型的参数，但返回一个 long 类型的结果的操作</td></tr><tr><td align="center">DoubleUnaryOperator</td><td align="center">表示接受一个 double 类型的参数，且返回一个 double 类型的结果的操作</td></tr><tr><td align="center">Function&lt;T,R&gt;</td><td align="center">表示一个接受 T 类型的参数，且返回一个 R 类型结果的函数</td></tr><tr><td align="center">IntBinaryOperator</td><td align="center">表示一个接受两个 int 类型的参数，且返回一个 int 类型的结果的操作</td></tr><tr><td align="center">IntConsumer</td><td align="center">表示接受一个 int 类型的参数，但不返回任何结果的操作</td></tr><tr><td align="center">IntFunction<R></td><td align="center">表示接受一个 int 类型的参数，但返回一个 R 类型的结果的操作</td></tr><tr><td align="center">IntPredicate</td><td align="center">表示接受一个 int 类型的参数，但返回布尔类型的结果的操作</td></tr><tr><td align="center">IntSupplier</td><td align="center">表示不接受任何参数，但返回一个 int 类型的结果的操作</td></tr><tr><td align="center">IntToDoubleFunction</td><td align="center">表示接受一个 int 类型的参数，但返回一个 double 类型的结果的操作</td></tr><tr><td align="center">IntToLongFunction</td><td align="center">表示接受一个 int 类型的参数，但返回一个 long 类型的结果的操作</td></tr><tr><td align="center">IntUnaryOperator</td><td align="center">表示接受一个 int 类型的参数，且返回一个 int 类型的结果的操作</td></tr><tr><td align="center">LongBinaryOperator</td><td align="center">表示接受两个 long 类型的参数，且返回一个 long 类型的结果的操作</td></tr><tr><td align="center">LongConsumer</td><td align="center">表示不接受任何参数，但返回一个 long 类型的结果的操作</td></tr><tr><td align="center">LongFunction<R></td><td align="center">表示接受一个 loing 类型的参数，但返回一个 R 类型的结果的操作</td></tr><tr><td align="center">LongPredicate</td><td align="center">表示接受一个 long 类型的参数，但返回布尔类型的结果的操作</td></tr><tr><td align="center">LongSupplier</td><td align="center">表示不接受任何参数，但返回一个 long 类型的结果的操作</td></tr><tr><td align="center">LongToDoubleFunction</td><td align="center">表示接受一个 long 类型的参数，但返回一个 double 类型的结果的函数</td></tr><tr><td align="center">LongToIntFunction</td><td align="center">表示接受一个 long 类型的参数，但返回 int 类型的结果的函数</td></tr><tr><td align="center">LongUnaryOperator</td><td align="center">表示接受一个 long 类型的参数，并返回一个 long 类型的结果的操作</td></tr><tr><td align="center">ObjDoubleConsumer<T></td><td align="center">表示接受两个参数，一个为 T 类型的对象，另一个 double 类型，但不返回任何结果的操作</td></tr><tr><td align="center">ObjIntConsumer<T></td><td align="center">表示接受两个参数，一个为 T 类型的对象，另一个 int 类型，但不返回任何结果的操作</td></tr><tr><td align="center">ObjLongConsumer<T></td><td align="center">表示接受两个参数，一个为 T 类型的对象，另一个 double 类型，但不返回任何结果的操作</td></tr><tr><td align="center">Predicate<T></td><td align="center">表示接受一个指定类型 T 的参数，但返回布尔类型的结果的操作</td></tr><tr><td align="center">Supplier<T></td><td align="center">表示不接受任何参数，但返回一个 T 类型的结果的操作</td></tr><tr><td align="center">ToDoubleBiFunction&lt;T,U&gt;</td><td align="center">表示接受两个不同类型的参数，但返回一个 double 类型的结果的操作</td></tr><tr><td align="center">ToDoubleFunction<T></td><td align="center">表示一个接受指定类型 T 的参数，并返回一个 double 类型的结果的操作</td></tr><tr><td align="center">ToIntBiFunction&lt;T,U&gt;</td><td align="center">表示接受两个不同类型的参数，但返回一个 int 类型的结果的操作</td></tr><tr><td align="center">ToIntFunction<T></td><td align="center">表示一个接受指定类型 T 的参数，并返回一个 int 类型的结果的操作</td></tr><tr><td align="center">ToLongBiFunction&lt;T,U&gt;</td><td align="center">表示接受两个不同类型的参数，但返回一个 long 类型的结果的操作</td></tr><tr><td align="center">ToLongFunction<T></td><td align="center">表示一个接受指定类型的参数，并返回一个 long 类型的结果的操作</td></tr><tr><td align="center">UnaryOperator<T></td><td align="center">表示接受一个参数，并返回一个与参数类型相同的结果的操作</td></tr></tbody></table><p>看起来很多接口功能都是重复的。但实际上并非如此，因为各个接口表面上看起来一样，但实际上它们有着不同的默认方法</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>我们写一个范例来演示下 <code>Predicate&lt;T&gt;</code> 函数接口的使用。</p><p><code>Predicate&lt;T&gt;</code> 只有一个虚方法 <code>test(Object)</code>，该方法接受一个 T 类型的对象，然后返回布尔类型的结果。因此，我们的 Lambda 表达是的参数也是 T 类型，返回值则是布尔类型</p><h4 id="Java8Tester-java"><a href="#Java8Tester-java" class="headerlink" title="Java8Tester.java"></a>Java8Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will always return true no matter what value n has.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print all numbers:&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//pass n as parameter</span></span><br><span class="line">      eval(list, n-&gt;<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will return true if n%2 comes to be zero</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print even numbers:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n%<span class="number">2</span> == <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class="line">      <span class="comment">// n is passed as parameter to test method of Predicate interface</span></span><br><span class="line">      <span class="comment">// test method will return true if n is greater than 3.</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Print numbers greater than 3:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n &gt; <span class="number">3</span> );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(Integer n: list) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(predicate.test(n)) &#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Print all numbers:</span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9 </span><br><span class="line">Print even numbers:</span><br><span class="line">2 </span><br><span class="line">4 </span><br><span class="line">6 </span><br><span class="line">8 </span><br><span class="line">Print numbers greater than 3:</span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二十、Java-8-函数接口-（-Functional-interface-）&quot;&gt;&lt;a href=&quot;#二十、Java-8-函数接口-（-Functional-interface-）&quot; class=&quot;headerlink&quot; title=&quot;二十、Java 8 函数接口</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>专栏汇总：Java8 新特性</title>
    <link href="https://tryrun.gitee.io/posts/b4cd1e40.html"/>
    <id>https://tryrun.gitee.io/posts/b4cd1e40.html</id>
    <published>2022-06-08T09:51:16.000Z</published>
    <updated>2022-06-08T09:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专栏汇总：Java8-新特性"><a href="#专栏汇总：Java8-新特性" class="headerlink" title="专栏汇总：Java8 新特性"></a><a href="/b4cd1e40.html">专栏汇总：Java8 新特性</a></h1><p>Java 更新的很快，但我的知识储备还停留在 Java 7 的年代…是我们落伍了，还是这个社会不需要我们这么超前。但如果有一天，你自己能做主了，你会上 最新版本 吗？ 不管如何，先把 Java8 学习了</p><ul><li><a href="/posts/783096c.html">二十、Java 8 函数接口 （ Functional interface ）</a>  </li><li><a href="/posts/f4456923.html">十九、Java 8 流 Stream ( 下 )</a>  </li><li><a href="/posts/62e87c35.html">十八、Java 8 流 Stream ( 上 )</a>  </li><li><a href="/posts/1054668a.html">十七、Java 8 新日期时间 API ( 下 ) – 格式化</a>  </li><li><a href="/posts/65f9a50c.html">十六、Java 8 新日期时间 API ( 中 ) – 时区日期时间</a>  </li><li><a href="/posts/a5516f38.html">十五、Java 8 新日期时间 API ( 上 ) – 本地日期时间</a>  </li><li><a href="/posts/9a637408.html">十四、Java 8 Nashorn JavaScript</a>  </li><li><a href="/posts/3b70afd5.html">十三、Java 8 可选值 java.util.Optional 类</a>  </li><li><a href="/posts/8d0e4be4.html">十二、Java 8 集合遍历 forEach() 方法</a>  </li><li><a href="/posts/e3c8b1a4.html">十一、Java 8 接口静态方法</a>  </li><li><a href="/posts/efaf0a50.html">十、Java 8 接口 ( interface ) 默认方法</a>  </li><li><a href="/posts/6fd40a1c.html">八、Java 8 Lambda 表达式 （ 下 ）范例</a>  </li><li><a href="/posts/4d9ed831.html">九、Java 8 方法引用</a>  </li><li><a href="/posts/5fb1bf39.html">七、Java 8 Lambda 表达式 （ 中 ）- 外部参数</a>  </li><li><a href="/posts/2bc5fe4b.html">六、Java 8 Lambda 表达式 （ 上 ）- 简介</a>  </li><li><a href="/posts/d747711e.html">五、Java 8 java.util.Base64 编码解码</a>  </li><li><a href="/posts/2063f33b.html">四、Java8 Runnable Lambda 表达式</a>  </li><li><a href="/posts/76994fd6.html">三、Java8 Collectors.joining() 详解</a>  </li><li><a href="/posts/edc65d6d.html">二、Java8 IntStream,LongStream,DoubleStream</a>  </li><li><a href="/posts/c2245ef4.html">一、Java8 收集器 – java.util.stream.Collectors</a>  </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专栏汇总：Java8-新特性&quot;&gt;&lt;a href=&quot;#专栏汇总：Java8-新特性&quot; class=&quot;headerlink&quot; title=&quot;专栏汇总：Java8 新特性&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/b4cd1e40.html&quot;&gt;专栏汇总：Java8 新特性&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="专栏" scheme="https://tryrun.gitee.io/tags/%E4%B8%93%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>十九、Java 8 流 Stream ( 下 )</title>
    <link href="https://tryrun.gitee.io/posts/f4456923.html"/>
    <id>https://tryrun.gitee.io/posts/f4456923.html</id>
    <published>2022-06-07T11:12:18.000Z</published>
    <updated>2022-06-07T10:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十九、Java-8-流-Stream-下"><a href="#十九、Java-8-流-Stream-下" class="headerlink" title="十九、Java 8 流 Stream ( 下 )"></a>十九、Java 8 流 Stream ( 下 )</h1><p>上一章节 Java 8 流 Stream ( 上 ) 因为时间关系，我们介绍到一半半就停止了。本章节我们继续。</p><h3 id="limit-方法"><a href="#limit-方法" class="headerlink" title="limit() 方法"></a>limit() 方法</h3><p><code>limit()</code> 方法用于减少( 限制 ) 流中的元素数量。</p><p>例如下面的代码段演示了如何使用 <code>limit()</code> 方法只输出 10 个随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="sorted-方法"><a href="#sorted-方法" class="headerlink" title="sorted() 方法"></a>sorted() 方法</h3><p><code>sorted()</code> 方法用于给流中的元素进行排序。</p><p>下面的范例演示了如何按照排序顺序打印 10 个随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h2><p><code>parallelStream()</code> 是需要并发处理的流的替代方案。<code>stream()</code> 方法产生的流只能是串行处理，可以理解为只在一个线程中，按照流中元素的顺序一个接一个的处理。</p><p>而并发处理，就是传说中的 <code>map-reduce</code> 方法，可以充分利用多核优势。</p><p>需要注意的是，<code>parallelStream()</code> 会打乱流的顺序，也就是返回的序列顺序不一定是输入的序列顺序。</p><p>例如下面的代码用于打印序列中的空字符串的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//get count of empty string</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><p>因为 <code>stream()</code> 返回是串行流，而 <code>parallelStream()</code> 返回的是并行流。因此在串行和并行之间切换是非常简单的。</p><h2 id="收集器-（-Collectors-）"><a href="#收集器-（-Collectors-）" class="headerlink" title="收集器 （ Collectors ）"></a>收集器 （ Collectors ）</h2><p>收集器 （ Collectors ）用于将已经处理的流中的元素组合到一起。</p><p><code>Collectors</code> 类提供了大量方法用于指示如何收集元素。</p><p>比如 <code>Collectors.toList()</code> 方法可以将流中的元素收集起来，并转换为列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Filtered List: &quot;</span> + filtered);</span><br></pre></td></tr></table></figure><p>比如 <code>Collectors.joining()</code> 方法可以将流中的元素收集起来，并使用指定的字符串拼接符拼接成一个字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Merged String: &quot;</span> + mergedString);</span><br></pre></td></tr></table></figure><h2 id="统计-Statistics"><a href="#统计-Statistics" class="headerlink" title="统计 ( Statistics )"></a>统计 ( Statistics )</h2><p>Java 8 同时新增了大量的统计收集器来来获取流中的元素的一些统计信息。</p><p>前提是我们先要在流上调用 <code>summaryStatistics()</code> 方法返回统计信息概要，然后在调用相应的方法来获取具体的统计信息。</p><p>例如下面的代码，先调用 <code>summaryStatistics()</code> 方法返回统计概要，然后调用 <code>getMax()</code> 方法获取最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">numbers</span> <span class="operator">=</span> Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Highest number in List : &quot;</span> + stats.getMax());</span><br></pre></td></tr></table></figure><p>例如下面的代码，先调用 <code>summaryStatistics()</code> 方法返回统计概要，然后调用 <code>getMin()</code> 和 <code>getSum()</code> 方法获取最小值和所有数字之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">numbers</span> <span class="operator">=</span> Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Lowest number in List : &quot;</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">&quot;Sum of all numbers : &quot;</span> + stats.getSum());</span><br></pre></td></tr></table></figure><p>例如下面的代码，先调用 <code>summaryStatistics()</code> 方法返回统计概要，然后调用 <code>getAverage()</code> 方法获取平均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">numbers</span> <span class="operator">=</span> Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Average of all numbers : &quot;</span> + stats.getAverage());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十九、Java-8-流-Stream-下&quot;&gt;&lt;a href=&quot;#十九、Java-8-流-Stream-下&quot; class=&quot;headerlink&quot; title=&quot;十九、Java 8 流 Stream ( 下 )&quot;&gt;&lt;/a&gt;十九、Java 8 流 Stream ( 下</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Stream" scheme="https://tryrun.gitee.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>十八、Java 8 流 Stream ( 上 )</title>
    <link href="https://tryrun.gitee.io/posts/62e87c35.html"/>
    <id>https://tryrun.gitee.io/posts/62e87c35.html</id>
    <published>2022-06-06T11:10:52.000Z</published>
    <updated>2022-06-06T10:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十八、Java-8-流-Stream-上"><a href="#十八、Java-8-流-Stream-上" class="headerlink" title="十八、Java 8 流 Stream ( 上 )"></a>十八、Java 8 流 Stream ( 上 )</h1><p>流 ( Stream ) 是 Java 8 新增加的一个重磅级的功能。流是一个抽象层。有了流，我们就可以使用类似于 SQL 语句的声明方式来处理数据。</p><p>比如，下面的 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(grade), student_id, student_name <span class="keyword">FROM</span> Students;</span><br></pre></td></tr></table></figure><p>上面这条 SQL 会自动返回最高学习绩点的学生的信息，而全程，开发人员却不用直接面对任何计算和比较。</p><p>在流 （ Stream ) 出现之前，对于Java 中的集合框架的使用。开发人员不得不一次次的写一个循环，一次次的重复检查。当然了，这也什么，毕竟大家都是这样过来的。</p><p>更大的问题在于开发效率。面对当前的多核 CPU 计算机，面对并发编程。我们开发者常常会写出非常容易出错的并发执行的代码。</p><p>为了解决这些问题，Java 8 引入了流 ( Stream ) 这个概念，允许开发人员以声明的方式处理数据的同时，还能利用多核构架，而无需编写任何特殊的代码。</p><h2 id="流是什么"><a href="#流是什么" class="headerlink" title="流是什么 ?"></a>流是什么 ?</h2><p>Java 中的 <strong>流</strong> ( Stream ) 表示来自 <strong>源</strong> ( source ) 的一系列对象，它支持统计、求和、求平均值等聚合操作。</p><p>流具有以下特征：</p><ul><li><strong>元素序列</strong> : 流以顺序方式提供特定类型的一组元素。流只会按需获取/计算元素。但它从不存储元素。</li><li>**源 ( Source )**：流可以将集合，数组或 I/O 资源作为输入源。</li><li><strong>聚合操作</strong>： 流支持聚合操作，如 <code>filter</code>、<code>map</code>、<code>limit</code>、<code>reduce</code>、<code>find</code>、<code>match</code> 等</li><li>**管道 ( pipelining )**：大多数流操作都返回流本身，以便可以对其结果进行流水线操作。这些操作称为 <strong>中间</strong> 操作，它们的功能是获取输入，处理它们并将输出返回到目标。<code>collect()</code> 方法是一个终端操作，通常在流水线操作结束时出现，以标记流的结尾。</li><li><strong>原子性迭代 ( Automatic iterations )</strong> ： 与需要显式迭代的集合相比，流操作在内部对所提供的源元素进行迭代。</li></ul><h2 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h2><p>Java 8 在推出流的同时，对集合框架也进行了一些比较大变更。主要是在 <code>Collection</code> 接口上提供了两种生成 Stream 的方法:</p><ul><li><code>stream()</code> 方法，该方法以集合作为源，返回集合中的所有元素以在集合中出现的顺序组成的流。</li><li><code>parallelStream()</code> 方法，该方法以集合作为源，返回一个支持并发操作的流。</li></ul><h2 id="流支持的聚合操作"><a href="#流支持的聚合操作" class="headerlink" title="流支持的聚合操作"></a>流支持的聚合操作</h2><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach() 方法"></a>forEach() 方法</h3><p>Java 8 为 Stream 提供了一种新方法 <code>forEach()</code>，用于迭代流的每个元素。</p><p>下面的代码片段演示了如何使用 <code>forEach</code> 打印 <code>10</code> 个随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>上面这个代码片段中，<code>Random</code> 对象的 <code>ints()</code> 方法会返回一个整数流。而 <code>limit()</code> 方法则限制了流中的元素个数。从某些方面说，可以理解为当源产生了 10 个随机数之后就关闭源。</p><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map() 方法"></a>map() 方法</h3><p><code>map()</code> 方法会迭代流中的元素，并为每个元素应用一个方法，然后返回应用后的流。</p><p>例如下面的代码，使用 <code>map()</code> 方法把求出每个元素的平方，然后过滤掉重复的元素，最后在转换为列表集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取每个元素的平方</span></span><br><span class="line">List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><code>map( i -&gt; i*i)</code> 操作求取流中每个元素的平方，并返回一个新的流。<code>distinct()</code> 方法则用于过滤流中的重复元素。</p><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter() 方法"></a>filter() 方法</h3><p><code>filter()</code> 方法根据一个谓词来过滤元素。这个谓词是一个方法，以流中的每一个元素作为参数，如果返回 <code>true</code> 则会被过滤掉。</p><p>例如下面的代码，使用 <code>filter()</code> 方法过滤那些空字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十八、Java-8-流-Stream-上&quot;&gt;&lt;a href=&quot;#十八、Java-8-流-Stream-上&quot; class=&quot;headerlink&quot; title=&quot;十八、Java 8 流 Stream ( 上 )&quot;&gt;&lt;/a&gt;十八、Java 8 流 Stream ( 上</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Stream" scheme="https://tryrun.gitee.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>十七、Java 8 新日期时间 API ( 下 ) – 格式化</title>
    <link href="https://tryrun.gitee.io/posts/1054668a.html"/>
    <id>https://tryrun.gitee.io/posts/1054668a.html</id>
    <published>2022-06-05T11:09:32.000Z</published>
    <updated>2022-06-05T10:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十七、Java-8-新日期时间-API-下-–-格式化"><a href="#十七、Java-8-新日期时间-API-下-–-格式化" class="headerlink" title="十七、Java 8 新日期时间 API ( 下 ) – 格式化"></a>十七、Java 8 新日期时间 API ( 下 ) – 格式化</h1><p>Java 8 似乎也对 <code>java.text.SimpleDateFormat</code> 也不太满意，竟然重新创建了一个 <code>java.time.format</code> 包，该包下包含了几个类和枚举用于格式化日期时间。</p><h2 id="java-time-format-包"><a href="#java-time-format-包" class="headerlink" title="java.time.format 包"></a>java.time.format 包</h2><p><code>java.time.format</code> 包提供了以下几个类用于格式化日期时间</p><table><thead><tr><th align="center">类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DateTimeFormatter</td><td align="center">用于打印和解析日期时间对象的格式化程序</td></tr><tr><td align="center">DateTimeFormatterBuilder</td><td align="center">创建日期时间格式化样式的构建器</td></tr><tr><td align="center">DecimalStyle</td><td align="center">日期和时间格式中使用的本地化十进制样式</td></tr></tbody></table><p><code>java.time.format</code> 包还提供了以下几个枚举，包含了常见的几种日期时间格式。</p><table><thead><tr><th align="center">枚举</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">FormatStyle</td><td align="center">包含了本地化日期，时间或日期时间格式器的样式的枚举</td></tr><tr><td align="center">ResolverStyle</td><td align="center">包含了解决日期和时间的不同方法的枚举</td></tr><tr><td align="center">SignStyle</td><td align="center">包含了如何处理正/负号的方法的枚举</td></tr><tr><td align="center">TextStyle</td><td align="center">包含了文本格式和解析的样式的枚举</td></tr></tbody></table><h2 id="DateTimeFormatter-类"><a href="#DateTimeFormatter-类" class="headerlink" title="DateTimeFormatter 类"></a>DateTimeFormatter 类</h2><p><code>DateTimeFormatter</code> 类格式化日期时间的最重要的类，该类是一个最终类，只能实例化，不能被扩展和继承。</p><p><code>DateTimeFormatter</code> 类的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DateTimeFormatter</span> <span class="keyword">extends</span> <span class="title class_">Object</span></span><br></pre></td></tr></table></figure><p><code>DateTimeFormatter</code> 类用于打印和解析日期时间对象的格式化器。此类提供打印和解析的主要应用程序入口点，并提供 DateTimeFormatter 的常见模式</p><ul><li>使用预定义的常量，比如 <code>ISO_LOCAL_DATE</code></li><li>使用模式字母，例如 <code>uuuu-MMM-dd</code></li><li>使用本地化样式，例如 <code>long</code> 或 <code>medium</code></li></ul><p>所有的日期时间类，包括本地日期时间和包含时区的日期时间类，都提供了两个重要的方法</p><p>1、 一个用于格式化，<code>format(DateTimeFormatter formatter)</code><br>2、 另一个用于解析，<code>parse(CharSequence text, DateTimeFormatter formatter)</code></p><p>下面，我们写几个示例来演示下这两个方法，并演示下如和使用 <code>DateTimeFormatter</code> 类</p><h4 id="Java8Tester"><a href="#Java8Tester" class="headerlink" title="Java8Tester"></a>Java8Tester</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间是: &quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;另一种表示形式:&quot;</span> + now.format(DateTimeFormatter.RFC_1123_DATE_TIME));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前时间是: 2022-05-05T11:47:57.680725Z[Etc/UTC]</span><br><span class="line">另一种表示形式:Thu, 5 May 2022 11:47:57 GMT</span><br></pre></td></tr></table></figure><p>我们还可以调用 <code>DateTimeFormatter.ofPattern()</code> 方法创建自己的日期时间格式，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间是: &quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd H:m:s&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;另一种表示形式:&quot;</span> + now.format(formatter));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前时间是: 2022-05-05T11:48:37.111221Z[Etc/UTC]</span><br><span class="line">另一种表示形式:2022/05/05 11:48:37</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然了，我们可以调用 <code>LocalDateTime</code> 类的静态方法 <code>parse()</code> 将我们刚刚自定义的日期时间格式给解析回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间是: &quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd H:m:s&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> now.format(formatter);</span><br><span class="line">      System.out.println(<span class="string">&quot;另一种表示形式:&quot;</span> + text );</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">parsed</span> <span class="operator">=</span> LocalDateTime.parse(text, formatter);</span><br><span class="line">      System.out.println(<span class="string">&quot;解析后:&quot;</span> + parsed );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前时间是: 2022-05-05T11:49:07.577534Z[Etc/UTC]</span><br><span class="line">另一种表示形式:2022/05/05 11:49:7</span><br><span class="line">解析后:2022-05-05T11:49:07</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十七、Java-8-新日期时间-API-下-–-格式化&quot;&gt;&lt;a href=&quot;#十七、Java-8-新日期时间-API-下-–-格式化&quot; class=&quot;headerlink&quot; title=&quot;十七、Java 8 新日期时间 API ( 下 ) – 格式化&quot;&gt;&lt;/a&gt;十</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Date" scheme="https://tryrun.gitee.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>十六、Java 8 新日期时间 API ( 中 ) – 时区日期时间</title>
    <link href="https://tryrun.gitee.io/posts/65f9a50c.html"/>
    <id>https://tryrun.gitee.io/posts/65f9a50c.html</id>
    <published>2022-06-04T11:08:20.000Z</published>
    <updated>2022-06-04T10:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十六、Java-8-新日期时间-API-中-–-时区日期时间"><a href="#十六、Java-8-新日期时间-API-中-–-时区日期时间" class="headerlink" title="十六、Java 8 新日期时间 API ( 中 ) – 时区日期时间"></a>十六、Java 8 新日期时间 API ( 中 ) – 时区日期时间</h1><p>上一章节 Java 8 新日期时间 API ( 上 ) – 本地日期时间 我们对 Java 8 重新设计的日期时间 API 做了一些基础的介绍，同时详细介绍了和本地时间有关的几个类 <code>LocalDateTime</code> 、<code>LocalDate</code> 和 <code>LocalTime</code> 。</p><p>我同时也发现，这三个类没有任何时区相关的信息，但也不能说它们没处理时区，而只能说它们有选择的隐藏了时区的处理。它们内部会使用操作系统当前的时区。</p><p>以此同时，Java 在 <code>java.time</code> 包中也提供了几个类用于处理需要关注时区的日期时间 API。它们是 <code>java.time.ZonedDateTime</code> 和 <code>java.time.ZoneId</code>。前者用于处理需要时区的日期时间，后者用于处理时区。</p><p><code>ZonedDateTime</code> 和 <code>LocalDateTime</code> 类似，几乎有着相同的 API。从某些方面说，<code>ZonedLocalTime</code> 如果不传递时区信息，那么它会默认使用操作系统的时区，这样，结果其实和 <code>LocalDateTime</code> 是类似的。</p><p>比如，我们可以使用 <code>ZonedDateTime</code> 的 <code>now()</code> 方法返回当前时区 ( 操作系统时区 ) 的日期时间，调用 <code>parse()</code> 方法可以将一个包含了时区信息的字符串格式的日期时间转化为一个 ZonedDateTime 实例。</p><h4 id="Java8Tester-java"><a href="#Java8Tester-java" class="headerlink" title="Java8Tester.java"></a>Java8Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间是:&quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">datetime</span> <span class="operator">=</span> ZonedDateTime.parse(<span class="string">&quot;2022-12-12T21:58:20+02:00&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;日期时间是:&quot;</span> + datetime);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间是:2022-05-05T11:45:25.602159Z[Etc/UTC]</span><br><span class="line">日期时间是:2022-12-12T21:58:20+02:00</span><br></pre></td></tr></table></figure><p>我们还可以调用 <code>ZonedDateTime</code> 对象的 <code>toLocalDate()</code> 和 <code>toLocalTime()</code> 方法将获取该实例的转换为本地的日期和时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间是:&quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> now.toLocalDate();</span><br><span class="line">      System.out.println(<span class="string">&quot;本地日期是:&quot;</span> + now);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> now.toLocalTime();</span><br><span class="line">      System.out.println(<span class="string">&quot;本地时间是:&quot;</span> + time);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间是:2022-05-05T11:46:41.247743Z[Etc/UTC]</span><br><span class="line">本地日期是:2022-05-05T11:46:41.247743Z[Etc/UTC]</span><br><span class="line">本地时间是:11:46:41.247743</span><br></pre></td></tr></table></figure><blockquote><p>P.S 这个返回值好诡异，为啥 <code>toLocalDate()</code> 还返回了时间？</p></blockquote><h2 id="处理时区"><a href="#处理时区" class="headerlink" title="处理时区"></a>处理时区</h2><p>时区相关的信息，我们可以使用 <code>ZoneId</code> 类来处理。</p><p>比如可以调用 <code>ZoneId</code> 类的静态方法 <code>systemDefault()</code> 返回当前的时区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZoneId</span> <span class="variable">currentZone</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时区是: &quot;</span> + currentZone);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时区是: Asia/Shanghai</span><br></pre></td></tr></table></figure><p>我们还可以调用 <code>ZonedDateTime</code> 实例的 <code>getZone()</code> 方法获取实例所在的时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.ZonedDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时区是: &quot;</span> + now.getZone());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时区是: Asia/Shanghai</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十六、Java-8-新日期时间-API-中-–-时区日期时间&quot;&gt;&lt;a href=&quot;#十六、Java-8-新日期时间-API-中-–-时区日期时间&quot; class=&quot;headerlink&quot; title=&quot;十六、Java 8 新日期时间 API ( 中 ) – 时区日期</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Date" scheme="https://tryrun.gitee.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>十五、Java 8 新日期时间 API ( 上 ) – 本地日期时间</title>
    <link href="https://tryrun.gitee.io/posts/a5516f38.html"/>
    <id>https://tryrun.gitee.io/posts/a5516f38.html</id>
    <published>2022-06-03T11:07:12.000Z</published>
    <updated>2022-06-03T10:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十五、Java-8-新日期时间-API-上-–-本地日期时间"><a href="#十五、Java-8-新日期时间-API-上-–-本地日期时间" class="headerlink" title="十五、Java 8 新日期时间 API ( 上 ) – 本地日期时间"></a>十五、Java 8 新日期时间 API ( 上 ) – 本地日期时间</h1><p>作为开发者，经常需要处理日期时间。如果你跟随者 Java 5 一路走来，那么一定会对 <code>java.util.Date</code> 、<code>java.util.Calendar</code> 、<code>java.util.GregoiranCalendar</code> 和 <code>java.text.SimpleDateFormat</code> 四大类非常熟悉，它们分别用于处理日期、日历、日历表示、日期时间格式化。</p><p>这四个类，对于编程老人来讲，应该是习惯了，但对于编程新人来讲，就有好多疑问，有好多陷阱和坑等着它们跳，比如</p><p>1、 <strong>非线程安全</strong>：<code>java.util.Date</code> 并不是线程安全的。开发者在使用这个类时必须自己处理多线程并发问题。<br>2、 <strong>设计不佳</strong> ：一方面日期和日期格式化分布在多个包中。另一方面，<code>java.util.Date</code> 的默认日期，年竟然是从 <code>1900</code> 开始，月从 <code>1</code> 开始，日从 <code>0</code> 开始，没有统一性。而且 <code>Date</code> 类也缺少直接操作日期的相关方法。<br>3、 <strong>时区处理困难</strong>：因为设计不佳，开发人员不得不编写大量代码来处理时区问题。<br>4、 还有其它一些问题</p><p>面对种种问题，Java 8 终于重新设计了所有日期时间、日历及时区相关的 API。并把它们都统一放置在 <code>java.time</code> 包和子包下。并作出了以下改进</p><p>1、 新的日期时间 API 是线程安全的。不仅没有 <code>setter</code> 方法，而且任何对实例的变更都会返回一个新的实例而保证原来的实例不变。<br>2、 新的日期时间 API 提供了大量的方法，用于修改日期时间的各个部分，并返回一个新的实例。<br>3、 在时区方面，新的日期时间 API 引入了 <strong>域</strong> ( domain ) 这个概念。</p><p>同时 Java 8 还针对原来复杂的 API 进行重新组合和拆分，分成了好多个类。本章接下来的章节，我们就来详细介绍其中几个最重要的。</p><h2 id="本地日期时间-API"><a href="#本地日期时间-API" class="headerlink" title="本地日期时间 API"></a>本地日期时间 API</h2><p>Java 8 为处理本地的日期时间提供了三个类 <code>LocalDate</code> 、<code>LocalTime</code> 和 <code>LocalDateTime</code>。分别用于处理 <strong>本地日期</strong>、<strong>本地时间</strong> 和 <strong>本地日期时间</strong>。</p><p>当使用这三个类时，开发者并不需要关心时区是什么。因为它默认使用的是操作系统的时区。</p><p>比如，可以使用 <code>LocalDateTime.now()</code> 方法返回当前的日期时间。</p><h4 id="Java8Tester-java"><a href="#Java8Tester-java" class="headerlink" title="Java8Tester.java"></a>Java8Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentTime);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间: 2022-05-05T11:40:19.601459</span><br></pre></td></tr></table></figure><p>比如，我们可以调用 <code>LocalDateTime</code> 对象的 <code>toLocalDate()</code> 方法和 <code>toLocalTime()</code> 分别返回当前的日期和当前的时间，也就是 <code>LocalDate</code> 和 <code>LocalTime</code> 两个类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentTime);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date1</span> <span class="operator">=</span> currentTime.toLocalDate();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期: &quot;</span> + date1);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">time1</span> <span class="operator">=</span> currentTime.toLocalTime();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间: &quot;</span> + time1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间: 2022-05-05T11:40:58.340724</span><br><span class="line">当前日期: 2022-05-05</span><br><span class="line">当前时间: 11:40:58.340724</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如我们可以调用 <code>LocalDateTime</code> 对象的 <code>getMonth()</code> 方法返回当前的月份，调用 <code>getDayOfMonth()</code> 返回当前的日期，调用 <code>getSecond()</code> 返回当前时间的秒数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentTime);</span><br><span class="line"></span><br><span class="line">      <span class="type">Month</span> <span class="variable">month</span> <span class="operator">=</span> currentTime.getMonth();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前月份: &quot;</span> + month);</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> currentTime.getDayOfMonth();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前月中的第几天: &quot;</span> + day);</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> currentTime.getSecond();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前秒数: &quot;</span> + seconds);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间: 2022-05-05T11:41:34.887247</span><br><span class="line">当前月份: MAY</span><br><span class="line">当前月中的第几天: 5</span><br><span class="line">当前秒数: 34</span><br></pre></td></tr></table></figure><p>比如我们可以调用 <code>LocalDateTime</code> 对象的 <code>withDayOfMonth()</code> 修改日并返回一个新的实例，调用 <code>withYear()</code> 修改年，调用其它 <code>with*</code> 方法修改其它属性。</p><p>这些 <code>with</code> 方法都是返回新的实例，而原来的实例并不会改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + currentTime);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">date2</span> <span class="operator">=</span> currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2012</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;新的日期时间: &quot;</span> + date2);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;原来的日期时间: &quot;</span> + currentTime);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前日期时间: 2022-05-05T11:42:06.589161</span><br><span class="line">新的日期时间: 2012-05-10T11:42:06.589161</span><br><span class="line">原来的日期时间: 2022-05-05T11:42:06.589161</span><br></pre></td></tr></table></figure><p>可以发现原先的实例并没有被修改。</p><p>同时，新的日期时间 API 还大量引入了 <code>of()</code> 方法，比如我们可以调用 <code>LocalDate.of()</code> 方法创建一个日期实例，调用 <code>LocalTime.of()</code> 方法创建一个时间实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, Month.OCTOBER, <span class="number">01</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;日期是: &quot;</span> + date);</span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;时间是: &quot;</span> + time);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">日期是: 2023-10-01</span><br><span class="line">时间是: 22:15</span><br></pre></td></tr></table></figure><p>我们还可以调用 <code>LocalDateTime.parse()</code> 、<code>LocalDate.parse()</code> 和 <code>LocalTime.parse()</code> 方法解析字符串格式的日期时间、日期和时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      tester.run();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">datetime</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2022-12-12T21:58:00&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;日期时间是:&quot;</span> + datetime);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2022-12-12&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;日期是: &quot;</span> + date);</span><br><span class="line"></span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalTime.parse(<span class="string">&quot;21:58:01&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;时间是: &quot;</span> + time);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">日期时间是:2022-12-12T21:58</span><br><span class="line">日期是: 2022-12-12</span><br><span class="line">时间是: 21:58:01</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十五、Java-8-新日期时间-API-上-–-本地日期时间&quot;&gt;&lt;a href=&quot;#十五、Java-8-新日期时间-API-上-–-本地日期时间&quot; class=&quot;headerlink&quot; title=&quot;十五、Java 8 新日期时间 API ( 上 ) – 本地日期</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Date" scheme="https://tryrun.gitee.io/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>十四、Java 8 Nashorn JavaScript</title>
    <link href="https://tryrun.gitee.io/posts/9a637408.html"/>
    <id>https://tryrun.gitee.io/posts/9a637408.html</id>
    <published>2022-06-02T11:05:22.000Z</published>
    <updated>2022-06-02T10:48:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十四、Java-8-Nashorn-JavaScript"><a href="#十四、Java-8-Nashorn-JavaScript" class="headerlink" title="十四、Java 8 Nashorn JavaScript"></a>十四、Java 8 Nashorn JavaScript</h1><p>对于 Java 中的 JavaScript 引擎， Java 8 引入了 <code>Nashorn</code> 来代替原先的 <code>Rhino</code>。</p><p><code>Nashorn</code> 使用 Java 7 中引入的调用动态特性，且直接编译内存中的代码并将字节码传递给 JVM。这两项改进，直接给 <code>Nashorn</code> 带了至少 2 到 10 倍的性能提升。</p><h2 id="jjs"><a href="#jjs" class="headerlink" title="jjs"></a>jjs</h2><p>在 <code>Nashorn</code> JavaScript 引擎中。JAVA 8 引入了一个新的命令行工具 <code>jjs</code>，用于在控制台执行 javascript 代码。</p><p>例如我们可以在当前目录下 ( 任意位置 ) 创建一个 JavaScript 文件 <code>hello.js</code> ，然后输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;你好，A，B ！&#x27;);</span><br></pre></td></tr></table></figure><p>保存文件后，使用下面的 jjs 命令运行它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jjs hello.js</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jjs hello.js</span><br><span class="line">你好，A，B ！</span><br></pre></td></tr></table></figure><h2 id="jjs-交互式解释器"><a href="#jjs-交互式解释器" class="headerlink" title="jjs 交互式解释器"></a>jjs 交互式解释器</h2><p>我们也可以直接在命令行中输出 <code>jjs</code> 进入 Java 8 提供的 <code>jjs</code> 交互式解释器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jjs</span><br><span class="line">jjs&gt; </span><br></pre></td></tr></table></figure><p>然后输入一些 JavaScript 语句，就会立即显示结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jjs&gt; print(&#x27;你好，A，B ！&#x27;);</span><br><span class="line">你好，A，B ！</span><br><span class="line">jjs&gt; 5 + 8</span><br><span class="line">13</span><br><span class="line">jjs&gt; 8 / 5</span><br><span class="line">1.6</span><br><span class="line">jjs&gt; </span><br></pre></td></tr></table></figure><h2 id="给-jjs-交互式解释器传递参数"><a href="#给-jjs-交互式解释器传递参数" class="headerlink" title="给 jjs 交互式解释器传递参数"></a>给 jjs 交互式解释器传递参数</h2><p>在启动 jjs 交互式解释器时，我们还可以使用两个中划线 ( <code>--</code> ) 来传递一些参数。</p><p>参数之间使用空格分隔 ( 注意，多个空额会视为单个空格 )。</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jjs -- 你好 A B </span><br><span class="line">jjs&gt; print(&#x27;你输入的是: &#x27; +arguments.join(&quot;, &quot;))</span><br><span class="line">你输入的是: 你好, A, B</span><br><span class="line">jjs&gt; </span><br></pre></td></tr></table></figure><h2 id="在-Java-中调用-JavaScript"><a href="#在-Java-中调用-JavaScript" class="headerlink" title="在 Java 中调用 JavaScript"></a>在 Java 中调用 JavaScript</h2><p>通过 <code>ScriptEngineManager</code> 类，Java 可以解析和调用 JavaScript 代码。</p><p><code>ScriptEngineManager</code> 类在 <code>javax.script</code> 包中。</p><p>Java 中调用 javascript 代码的步骤一般如下</p><p>1、 创建 JavaScript 引擎的管理器，也就是创建一个 <code>ScriptEngineManager</code> 类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScriptEngineManager</span> <span class="variable">scriptEngineManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>();</span><br></pre></td></tr></table></figure><p>2、 通过 JavaScript 引擎的管理器获取一个 JavaScript 引擎，比如 Java 8 中引入的 <code>Nashorn</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScriptEngine</span> <span class="variable">nashorn</span> <span class="operator">=</span> scriptEngineManager.getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br></pre></td></tr></table></figure><p>3、 调用获取到的引擎的 <code>eval()</code> 方法执行一些代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    result = (Integer) nashorn.eval(&quot;10 + 2&quot;);</span><br><span class="line">需要注意的是，执行 JavaScript 代码可能会抛出 ScriptException 异常。因此要放在一个 `try catch` 语句中。</span><br></pre></td></tr></table></figure><p>上面这三个流程，会涉及到三个类 <code>ScriptEngineManager</code>、<code>ScriptEngine</code> 和 <code>ScriptException</code>。它们都在 <code>javax.script</code> 包中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br></pre></td></tr></table></figure><p>我们写一个范例演示下这个流程</p><h4 id="Java8Tester-java"><a href="#Java8Tester-java" class="headerlink" title="Java8Tester.java"></a>Java8Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">ScriptEngineManager</span> <span class="variable">scriptEngineManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>();</span><br><span class="line">      <span class="type">ScriptEngine</span> <span class="variable">nashorn</span> <span class="operator">=</span> scriptEngineManager.getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         nashorn.eval(<span class="string">&quot;print(&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line">         result = (Integer) nashorn.eval(<span class="string">&quot;8 + 5 * 3&quot;</span>);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(ScriptException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;脚本执行失败: &quot;</span>+ e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(result.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h2 id="在-JavaScript-中调用-Java-代码"><a href="#在-JavaScript-中调用-Java-代码" class="headerlink" title="在 JavaScript 中调用 Java 代码"></a>在 JavaScript 中调用 Java 代码</h2><p>如果在 JavaScript 中调用 Java 代码，我们就不做过多介绍了，因为介绍起来是一个庞大的工程，简直就是另外一门语言的赶脚。</p><p>直接看一个示例。</p><p>把创建一个 hello.js 文件，然后输入以下内容</p><h4 id="hello-js"><a href="#hello-js" class="headerlink" title="hello.js"></a>hello.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">BigDecimal</span> = <span class="title class_">Java</span>.<span class="title function_">type</span>(<span class="string">&#x27;java.math.BigDecimal&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params">amount, percentage</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount).<span class="title function_">multiply</span>(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(percentage)).<span class="title function_">divide</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>), <span class="number">2</span>, <span class="title class_">BigDecimal</span>.<span class="property">ROUND_HALF_EVEN</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result.<span class="title function_">toPlainString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">calculate</span>(<span class="number">568000000000000000023</span>,<span class="number">13.9</span>);</span><br><span class="line"><span class="title function_">print</span>(result);</span><br></pre></td></tr></table></figure><p>然后我们使用 <code>jjs</code> 命令来运行它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jjs hello.js </span><br><span class="line">78952000000000002017.94</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十四、Java-8-Nashorn-JavaScript&quot;&gt;&lt;a href=&quot;#十四、Java-8-Nashorn-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;十四、Java 8 Nashorn JavaScript&quot;&gt;&lt;/a&gt;十四</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>十三、Java 8 可选值 java.util.Optional 类</title>
    <link href="https://tryrun.gitee.io/posts/3b70afd5.html"/>
    <id>https://tryrun.gitee.io/posts/3b70afd5.html</id>
    <published>2022-06-01T11:03:48.000Z</published>
    <updated>2022-06-01T10:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十三、Java-8-可选值-java-util-Optional-类"><a href="#十三、Java-8-可选值-java-util-Optional-类" class="headerlink" title="十三、Java 8 可选值 java.util.Optional 类"></a>十三、Java 8 可选值 java.util.Optional 类</h1><p>在不考虑竖起来的情况下，抛一个硬币，落地时，显示正面的情况只有两种：是正面和不是正面。很多时候，这是一个 「 谓词 」，也就是返回布尔类型 ( bool )。但有时候，我们需要返回另一种类型：存在 和 空。</p><ul><li><strong>存在</strong> 就是硬币落地时显示为正面</li><li><strong>空</strong> 就是硬币落地式显示的不是正面。</li></ul><p>从另一方面说，结果就是 <strong>有值</strong> 和 <strong>空</strong> 。</p><p>一个类，如果可以同时表示 <strong>有值</strong> 和 <strong>空</strong> ，我们称这种类为 <strong>可选类</strong> ( Optional )</p><p>从某些方面说，<code>Optional</code> 类型就是 「那里有一个值，它等于 x，或者那里没有那个值」</p><h2 id="JAVA-8-java-util-Optional-类"><a href="#JAVA-8-java-util-Optional-类" class="headerlink" title="JAVA 8 java.util.Optional 类"></a>JAVA 8 java.util.Optional 类</h2><p>Java 8 在 <code>java.util</code> 包中添加了一个新的类 <code>Optional</code> 。</p><p><code>Optional</code> 类是一个容器，用于表示可能包含也可能不包含非 null 值。如果存在值，<code>isPresent()</code> 方法将返回 <code>true</code>，<code>get()</code> 将返回该值。</p><p><code>Optional</code> 类提供了许多方法用于处理 「 可用 」 或 「 不可用 」 ，而不是简单的检查空值情况。</p><p><code>java.util.Optional</code> 类的声明如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final class Optional&lt;T&gt; extends Object</span><br></pre></td></tr></table></figure><blockquote><p>注意：该类是一个最终类，不能被继承和扩展。</p></blockquote><h2 id="Optional-类提供了以下静态方法来创建-Optional-类的实例"><a href="#Optional-类提供了以下静态方法来创建-Optional-类的实例" class="headerlink" title="Optional 类提供了以下静态方法来创建 Optional 类的实例"></a><code>Optional</code> 类提供了以下静态方法来创建 Optional 类的实例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional` 类提供了三个静态方法用于创建 `Optional` 类的实例，这三个方法的返回值都是 `Optional&lt;T&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">empty()</td><td align="center">创建一个空 ( empty ) 的 Optional 类的实例</td></tr><tr><td align="center">of(T value)</td><td align="center">创建一个包含了指定 <code>T</code> 类型的 <code>value</code> 值的 Optional 实例</td></tr><tr><td align="center">ofNullable(T value)</td><td align="center">如果 <code>value</code> 非 <code>null</code> ，则创建一个包含了指定 <code>T</code> 类型的 <code>value</code> 值的 Optional 实例，否则创建一个空的 Optional 实例</td></tr></tbody></table><h2 id="Optional-类提供的方法"><a href="#Optional-类提供的方法" class="headerlink" title="Optional 类提供的方法"></a><code>Optional</code> 类提供的方法</h2><table><thead><tr><th align="center">方法/说明</th></tr></thead><tbody><tr><td align="center"><strong>boolean equals(Object obj)</strong> 判断某个其它的对象是否 「 等于 」 此 Optional</td></tr><tr><td align="center"><strong>Optional<T>s; filter(Predicate&lt;? super T&gt; predicate)</strong> 如果存在值，并且值与给定谓词匹配，则返回描述值的 Optional，否则返回空 Optional</td></tr><tr><td align="center"><strong><U> Optional&lt;U&gst; flatMap(Function&lt;? super T,Optional<U>&gt; mapper)</strong> 如果值存在，则将 <code>map</code> 应用到该值上并返回应用后的结果，如果值不存在，则返回一个空的 Optional</td></tr><tr><td align="center"><strong>T get()</strong> 如果此 Optional 中存在值，则返回该值，否则抛出<code>NoSuchElementException</code> 异常</td></tr><tr><td align="center"><strong>int hashCode()</strong> 如果值存在，则返回当前值的哈希值，如果不存在值，则返回 <code>0</code></td></tr><tr><td align="center"><strong>void ifPresent(Consumer&lt;? super T&gt; consumer)</strong> 如果值存在，则使用该值作为参数调用方法 <code>consumer</code> 。如果值不存在，则什么事情都不做</td></tr><tr><td align="center"><strong>boolean isPresent()</strong> 如果值存在则返回 <code>true</code> ，否则返回 <code>false</code></td></tr><tr><td align="center"><strong><U> Optional<U> map(Function&lt;? super T,? extends U&gt; mapper)</strong> 如果存在值，则将传递的 <code>map</code> 函数应用于该值，如果结果为非 null，则返回描述结果的 Optionals</td></tr><tr><td align="center"><strong>T orElse(T other)</strong> 如果值存在则返回值，否则返回 <code>other</code></td></tr><tr><td align="center"><strong>T orElseGet(Supplier&lt;? extends T&gt; other)</strong> 如果值存在则返回值，否则调用 <code>other</code> 并返回该调用的结果</td></tr><tr><td align="center"><strong><X extends Throwable> T orElseThrow(Supplier&lt;? extends X&gt;&gt;exceptionSupplier)</strong> 如果值存在，则返回包含的值，否则抛出由开发者提供的异常</td></tr><tr><td align="center"><strong>String toString()</strong> 返回此 Optional 的非空字符串表示形式，一般用于调试</td></tr></tbody></table><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>我们写一个范例演示下 Optional 类的使用</p><h4 id="OptionalTester-java"><a href="#OptionalTester-java" class="headerlink" title="OptionalTester.java"></a>OptionalTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">OptionalTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionalTester</span>();</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Optional.ofNullable - allows passed parameter to be null.</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Optional.of - throws NullPointerException if passed parameter is null</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(tester.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">//Optional.isPresent - checks the value is present or not</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;First parameter is present: &quot;</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">&quot;Second parameter is present: &quot;</span> + b.isPresent());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Optional.orElse - returns the value if present otherwise returns</span></span><br><span class="line">      <span class="comment">//the default value passed.</span></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> a.orElse(Integer.valueOf(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Optional.get - gets the value, value should be present</span></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value2</span> <span class="operator">=</span> b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上范例，输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">First parameter is present: false</span><br><span class="line">Second parameter is present: true</span><br><span class="line">10</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十三、Java-8-可选值-java-util-Optional-类&quot;&gt;&lt;a href=&quot;#十三、Java-8-可选值-java-util-Optional-类&quot; class=&quot;headerlink&quot; title=&quot;十三、Java 8 可选值 java.util.</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>十二、Java 8 集合遍历 forEach() 方法</title>
    <link href="https://tryrun.gitee.io/posts/8d0e4be4.html"/>
    <id>https://tryrun.gitee.io/posts/8d0e4be4.html</id>
    <published>2022-05-31T11:02:46.000Z</published>
    <updated>2022-05-31T10:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十二、Java-8-集合遍历-forEach-方法"><a href="#十二、Java-8-集合遍历-forEach-方法" class="headerlink" title="十二、Java 8 集合遍历 forEach() 方法"></a>十二、Java 8 集合遍历 forEach() 方法</h1><p>Java 8 为所有的集合添加了一个新的方法 <code>forEach()</code> ，该方法以只读形式遍历集合所有的元素并为每一个元素执行一个动作。</p><p>我们先来看一个范例</p><h4 id="ForEachTester-java"><a href="#ForEachTester-java" class="headerlink" title="ForEachTester.java"></a>ForEachTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Arrays.asList(<span class="string">&quot;你好&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B &quot;</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中，我们使用了 <code>forEach</code> 方法遍历列表的每一个元素，并把元素传递给 <code>System.out.println()</code> 方法打印输出到屏幕上。</p><p>对于这个功能，如果我们使用 <code>for ( : )</code> 语法，则会又有些小复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;你好&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>( String it : list)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach() 方法"></a>forEach() 方法</h2><p><code>forEach()</code> 方法是 Java 8 为所有集合新增的方法。该方法定义在 <code>java.lang.Iterable</code> 接口中。</p><p><code>java.lang.Iterable</code> 接口是 Java 5 引入的，目的在于为实现该语句的对象提供 「 for-each 循环 」 语句。换句话说，所有实现了该接口的对象都可以使用 <code>for</code> 语句进行迭代。</p><p>当然了，我们今天的重点是 <code>forEach()</code> 这个方法。该方法的原型如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span></span><br></pre></td></tr></table></figure><p>从函数原型中可以看出，该方法是 <code>java.lang.Iterable</code> 接口的默认方法，所有子类可以不用实现，也没必要实现。</p><p>该方法对 <code>Iterable</code> 中的的每个元素执行给定的操作 ( <code>action</code> )，直到处理完所有元素或操作抛出异常为止。</p><p>除非实现类另有指定，否则操作会按迭代顺序执行（ 如果指定了迭代顺序 ）。且操作抛出的异常将转发给调用者。</p><p>该方法的的实现类似于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (T t : <span class="built_in">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">   action.accept(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范例一：forEach-方法迭代列表"><a href="#范例一：forEach-方法迭代列表" class="headerlink" title="范例一：forEach() 方法迭代列表"></a>范例一：forEach() 方法迭代列表</h2><p>我们写一个范例使用 <code>forEach()</code> 方法和方法引用来实现一个列表的迭代</p><h4 id="ForEachTester-java-1"><a href="#ForEachTester-java-1" class="headerlink" title="ForEachTester.java"></a>ForEachTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;你好&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>( String it : list)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你好</span><br><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure><h2 id="范例二：-forEach-方法迭代一个哈希表"><a href="#范例二：-forEach-方法迭代一个哈希表" class="headerlink" title="范例二： forEach() 方法迭代一个哈希表"></a>范例二： forEach() 方法迭代一个哈希表</h2><p>我们写一个范例使用 <code>forEach()</code> 方法和 Java 8 提供的 lambda 表达式来迭代一个哈希表</p><h4 id="ForEachTester-java-2"><a href="#ForEachTester-java-2" class="headerlink" title="ForEachTester.java"></a>ForEachTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; items = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        items.put(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        items.put(<span class="string">&quot;B&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        items.put(<span class="string">&quot;C&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        items.put(<span class="string">&quot;D&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        items.put(<span class="string">&quot;E&quot;</span>, <span class="number">50</span>);</span><br><span class="line">        items.put(<span class="string">&quot;F&quot;</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        items.forEach((k,v)-&gt;System.out.println(<span class="string">&quot;Item : &quot;</span> + k + <span class="string">&quot; Count : &quot;</span> + v));</span><br><span class="line"></span><br><span class="line">        items.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Item : &quot;</span> + k + <span class="string">&quot; Count : &quot;</span> + v);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;E&quot;</span>.equals(k))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello E&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Item : A Count : 10</span><br><span class="line">Item : B Count : 20</span><br><span class="line">Item : C Count : 30</span><br><span class="line">Item : D Count : 40</span><br><span class="line">Item : E Count : 50</span><br><span class="line">Item : F Count : 60</span><br><span class="line">Item : A Count : 10</span><br><span class="line">Item : B Count : 20</span><br><span class="line">Item : C Count : 30</span><br><span class="line">Item : D Count : 40</span><br><span class="line">Item : E Count : 50</span><br><span class="line">Hello E</span><br><span class="line">Item : F Count : 60</span><br></pre></td></tr></table></figure><h2 id="范例三：forEach-方法迭代一个流"><a href="#范例三：forEach-方法迭代一个流" class="headerlink" title="范例三：forEach() 方法迭代一个流"></a>范例三：forEach() 方法迭代一个流</h2><p>我们写一个范例使用 <code>forEach()</code> 方法迭代一个流，输出流中的所有元素</p><h4 id="ForEachTester-java-3"><a href="#ForEachTester-java-3" class="headerlink" title="ForEachTester.java"></a>ForEachTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Arrays.asList(<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B &quot;</span>)</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(s-&gt;s.contains(<span class="string">&quot;C&quot;</span>))</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十二、Java-8-集合遍历-forEach-方法&quot;&gt;&lt;a href=&quot;#十二、Java-8-集合遍历-forEach-方法&quot; class=&quot;headerlink&quot; title=&quot;十二、Java 8 集合遍历 forEach() 方法&quot;&gt;&lt;/a&gt;十二、Java 8</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>十一、Java 8 接口静态方法</title>
    <link href="https://tryrun.gitee.io/posts/e3c8b1a4.html"/>
    <id>https://tryrun.gitee.io/posts/e3c8b1a4.html</id>
    <published>2022-05-30T11:01:13.000Z</published>
    <updated>2022-05-30T10:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十一、Java-8-接口静态方法"><a href="#十一、Java-8-接口静态方法" class="headerlink" title="十一、Java 8 接口静态方法"></a>十一、Java 8 接口静态方法</h1><p>Java 8 除了给接口带来了 默认方法之外，还给接口带来了 <strong>静态方法</strong>。而且，Java 8 中的静态方法还可以有具体的实现。</p><p>我们都知道，在 Java 7 及之前的版本中，接口 <code>interface</code> 是不允许有静态方法声明的，例如下面的代码</p><h4 id="InterfaceStaticMethodTester-java"><a href="#InterfaceStaticMethodTester-java" class="headerlink" title="InterfaceStaticMethodTester.java"></a>InterfaceStaticMethodTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceStaticMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 7 版本下，编译会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceDefaultMethodTester.java:8: 错误: 此处不允许使用修饰符static</span><br><span class="line">        public static void greeter(String name);</span><br><span class="line">                           ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><p>但是，Java 8 为接口引入了 <strong>静态方法</strong> 功能。在 Java 8 中，接口不仅可以有静态方法声明，还可以有静态方法实现，例如</p><h4 id="InterfaceStaticMethodTester-java-1"><a href="#InterfaceStaticMethodTester-java-1" class="headerlink" title="InterfaceStaticMethodTester.java"></a>InterfaceStaticMethodTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceStaticMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Greeter.greeter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br></pre></td></tr></table></figure><p>但是，Java 8 的接口中的静态方法必须有自己的实现，而不能仅仅是一个接口声明，不然编译是会报错的。</p><p>例如下面的代码</p><h4 id="InterfaceStaticMethodTester-java-2"><a href="#InterfaceStaticMethodTester-java-2" class="headerlink" title="InterfaceStaticMethodTester.java"></a>InterfaceStaticMethodTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceStaticMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceStaticMethodTester.java:9: 错误: 缺少方法主体, 或声明抽象</span><br><span class="line">        public static void greeter(String name);</span><br><span class="line">                           ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><p>如果添加了 <code>abstract</code> 关键字，其实，<code>abstract</code> 关键和 <code>static</code> 关键字是不兼容的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceStaticMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceStaticMethodTester.java:9: 错误: 非法的修饰符组合: abstract和static</span><br><span class="line">        public abstract static void greeter(String name);</span><br><span class="line">                                    ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><p>所以，Java 8 支持接口中的静态方法，但静态方法必须有实现，不支持静态方法声明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十一、Java-8-接口静态方法&quot;&gt;&lt;a href=&quot;#十一、Java-8-接口静态方法&quot; class=&quot;headerlink&quot; title=&quot;十一、Java 8 接口静态方法&quot;&gt;&lt;/a&gt;十一、Java 8 接口静态方法&lt;/h1&gt;&lt;p&gt;Java 8 除了给接口带来</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>十、Java 8 接口 ( interface ) 默认方法</title>
    <link href="https://tryrun.gitee.io/posts/efaf0a50.html"/>
    <id>https://tryrun.gitee.io/posts/efaf0a50.html</id>
    <published>2022-05-29T11:00:04.000Z</published>
    <updated>2022-05-29T10:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十、Java-8-接口-interface-默认方法"><a href="#十、Java-8-接口-interface-默认方法" class="headerlink" title="十、Java 8 接口 ( interface ) 默认方法"></a>十、Java 8 接口 ( interface ) 默认方法</h1><p>总所周知，在 Java 7 和之前的版本中，接口 <code>interface</code> 是不能包含具体的方法实现的。</p><p>比如，下面的代码，是会报错的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Syste.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceDefaultMethodTester.java:10: 错误: 接口抽象方法不能带有主体</span><br><span class="line">        &#123;</span><br><span class="line">        ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><p>如果一个接口有多个实现，那么每个实现都要重复的一遍一遍的实现接口中的所有方法，岂不是很痛苦。</p><p>在 Java 7 及以前的版本，对于一个接口有多个实现的时候，我们通常的做法就是让所有的实现继承另一个基础类，然后在这个基础类中实现这个方法。</p><p>这就是，为什么 Java 中的 I/O 那么多类的原因，一个庞大的家族体系，每次看到我都头疼。</p><p>但是 Java 8 中，我想应该是 Java 8 核心开发者们也厌倦了这种不断的重复实现接口方法和庞大的类家族体系。竟然在 Java 8 中为接口提供了一个新的功能，允许某个接口方法有个默认实现。</p><h2 id="Java-8-接口的默认方法"><a href="#Java-8-接口的默认方法" class="headerlink" title="Java 8 接口的默认方法"></a>Java 8 接口的默认方法</h2><p>Java 8 为 <strong>接口</strong> ( interface ) 中引入了 「 默认方法 」( default method ) 实现这个新的概念。</p><p>但是，引入的初衷竟然是不是为了解救一个接口多个实现的痛苦，而是为了向后兼容，以便旧接口也可以使用 Java 8 的 lambda 表达式功能。</p><blockquote><p>泪崩～～～～</p></blockquote><p>例如，Java 8 新引入的 <code>forEach</code> 这个功能，其实，<code>List</code> 或 <code>Collection</code> 接口没有声明和实现 <code>forEach</code> 方法。因为，添加此类方法将简单地破坏集合框架实现。</p><blockquote><p>P.S 另一个重要原因，我想，是因为 Java 集合太过庞大，每个都改过去你们应该会手软才对。</p></blockquote><p>既然不能每个类都改过去，那怎么办呢？</p><p>当然是从它们都实现了的共同的祖先处想办法啦。</p><p>跳来跳去，最后选中了接口 <code>interface</code> 。</p><blockquote><p>P.S Java 是基于接口的编程，这个，大家应该没意见吧。除了主入口类，如果一个类没有实现个把接口，都会被认定为格格不入的。</p></blockquote><p>那我们知道，Java 中的接口是不能有具体实现的。哦，不是，是在现行体系下，Java 中没有哪个语法允许接口的方法有具体的实现。</p><p>但是，Java 8 又非常需要这个功能， 那要怎么办呢？</p><p>好吧，拍一下脑袋，灵光一闪，我们可以新增加一个关键字，比如 <code>default</code> ，用于标识这个方法是可以有具体的实现。</p><p>有了 <code>default</code> 关键字，我们就可以在所有集合都实现的接口 <code>Collection&lt;E&gt;</code> 中添加一个 <code>forEach</code> 方法啦。</p><p><strong>这是一个非常重要的新功能，它的出现，Java 8 及以后的版本，添加新功能的速度明显加快了很多</strong></p><h2 id="Java-8-接口默认方法语法"><a href="#Java-8-接口默认方法语法" class="headerlink" title="Java 8 接口默认方法语法"></a>Java 8 接口默认方法语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;你好，S!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从语法中可以看到，一个接口默认方法和普通的接口方法声明有两个不同点：</p><p>1、 接口默认方法可以有具体实现<br>2、 接口默认方法需要使用 <code>default</code> 关键字修饰。</p><h2 id="Java-8-接口默认方法特征"><a href="#Java-8-接口默认方法特征" class="headerlink" title="Java 8 接口默认方法特征"></a>Java 8 接口默认方法特征</h2><p>1、 一个接口可以有任意数量的默认方法，也可以没有默认方法<br>2、 如果一个类实现的两个接口都有一个同名的默认方法，那么该类必须自己实现同样的方法，然后在实现内部可以调用相应接口的方法</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>我们写一些范例来演示下 Java 8 中的接口默认方法的特征</p><h3 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h3><p>我们写一个范例简单演示下接口默认方法的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeter</span>()&#123;&#125;;</span><br><span class="line">        gt.greeter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br></pre></td></tr></table></figure><h3 id="一个接口可以有多个默认方法"><a href="#一个接口可以有多个默认方法" class="headerlink" title="一个接口可以有多个默认方法"></a>一个接口可以有多个默认方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeter</span>()&#123;&#125;;</span><br><span class="line">        gt.greeter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        gt.greeterEn(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeterEn</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br><span class="line">Hello，A</span><br></pre></td></tr></table></figure><h2 id="一个类实现了多个具有同名的默认方法接口"><a href="#一个类实现了多个具有同名的默认方法接口" class="headerlink" title="一个类实现了多个具有同名的默认方法接口"></a>一个类实现了多个具有同名的默认方法接口</h2><p>如果一个类实现了两个或两个以上的接口，而这些接口有两个或两个以上实现了相同的方法名的默认方法，结果会怎么样呢？ 比如下面这个范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">InterfaceDefaultMethodTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceDefaultMethodTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        gt.greeter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">Greeter</span>,GreeterEn &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">GreeterEn</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InterfaceDefaultMethodTester.java:16: 错误: 类 InterfaceDefaultMethodTester.Hello从类型 Greeter 和 GreeterEn 中继承了greeter(String) 的不相关默认值</span><br><span class="line">    class Hello implements Greeter,GreeterEn &#123;&#125;</span><br><span class="line">    ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><p>修复这个错误，最简单的方法就是类自己实现一个相同的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">InterfaceDefaultMethodTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceDefaultMethodTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        gt.greeter(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">Greeter</span>,GreeterEn &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">GreeterEn</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，C</span><br></pre></td></tr></table></figure><p>当然了，还可以调用相关接口的默认方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceDefaultMethodTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">InterfaceDefaultMethodTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceDefaultMethodTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Greeter</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        gt.greeter(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">implements</span> <span class="title class_">Greeter</span>,GreeterEn &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Greeter.<span class="built_in">super</span>.greeter(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">GreeterEn</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greeter</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello，&quot;</span> + name );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，D</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;十、Java-8-接口-interface-默认方法&quot;&gt;&lt;a href=&quot;#十、Java-8-接口-interface-默认方法&quot; class=&quot;headerlink&quot; title=&quot;十、Java 8 接口 ( interface ) 默认方法&quot;&gt;&lt;/a&gt;十、Ja</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>八、Java 8 Lambda 表达式 （ 下 ）范例</title>
    <link href="https://tryrun.gitee.io/posts/6fd40a1c.html"/>
    <id>https://tryrun.gitee.io/posts/6fd40a1c.html</id>
    <published>2022-05-27T10:56:13.000Z</published>
    <updated>2022-05-27T10:48:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八、Java-8-Lambda-表达式-（-下-）范例"><a href="#八、Java-8-Lambda-表达式-（-下-）范例" class="headerlink" title="八、Java 8 Lambda 表达式 （ 下 ）范例"></a>八、Java 8 Lambda 表达式 （ 下 ）范例</h1><p>经过 Java 8 Lambda 表达式 （ 上 ）- 简介 和 Java 8 Lambda 表达式 （ 中 ）- 外部参数 两个章节的学习，想必你已经对 Java 8 中的 Lambda 表达式已经非常熟悉了。</p><p>本章节我们就来回顾下上面两章节的所学知识，然后写一些范例巩固下。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ul><li>lambda 表达式是 java 8 引入的最重要的功能之一。</li><li>lambda 表达式为那些只包含一个方法的接口提供了简洁代码，例如函数接口 ( <code>function interface</code> )。</li><li>lambda 表达式还为集合的迭代提供了一种更为简单的方式。</li><li>对于那些使用匿名类或内部类实现的单个方法接口，在 Java 8 中，可以使用 lambda 表达式来实现。不仅功能相同，而且代码更简洁。</li></ul><p>lambda 表达式真正的原理，是 「 为那些函数接口定义了它们包含的唯一方法，而且返回函数接口的实例 」</p><h3 id="lambda-表达式语法"><a href="#lambda-表达式语法" class="headerlink" title="lambda 表达式语法"></a>lambda 表达式语法</h3><p>lambda 表达式语法非常易于阅读和理解</p><p>lambda 表达式语法看起来像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Argument  part)  -&gt; Body part </span><br></pre></td></tr></table></figure><p>例如</p><p>1、 如果某个方法没有参数，并打印信息，则可能像下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(&quot;Your message&quot;);</span><br></pre></td></tr></table></figure><p>2、 如果某个方法接受两个参数，执行一些业务逻辑并返回值，则看起来可能像下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    (int a, int b) -&gt;  a+b;</span><br><span class="line">表达式会返回 `a+b` 的计算结果</span><br></pre></td></tr></table></figure><p>3、 如果某个方法接受一个参数，并执行一些计算，则可能像下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String s) -&gt;  s + &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure><h2 id="Java-8-lambda-表达式的一些使用范例"><a href="#Java-8-lambda-表达式的一些使用范例" class="headerlink" title="Java 8 lambda 表达式的一些使用范例"></a>Java 8 lambda 表达式的一些使用范例</h2><h3 id="在-Runnable-中使用-lambda-表达式"><a href="#在-Runnable-中使用-lambda-表达式" class="headerlink" title="在 Runnable 中使用 lambda 表达式"></a>在 <code>Runnable</code> 中使用 lambda 表达式</h3><p>下面这个范例中，我们将运行一个 Runnable 线程。</p><p>在 Java 8 之前，在 lambda 表达式出现前，要实现 Runnable 线程，我们需要定义一个实现 Runnable 接口的类来获取 Runnable 对象。</p><h4 id="LambdaTester-java"><a href="#LambdaTester-java" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你好，A&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">      thread.run();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br></pre></td></tr></table></figure><p>现在，我们来看看如何使用 lambda 表达式实现相同的对象。</p><h4 id="LambdaTester-java-1"><a href="#LambdaTester-java-1" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;你好，B&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">      thread.run();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，B</span><br></pre></td></tr></table></figure><p>没有对比，就没有伤害，使用 lambda 表达式真的是简单明了，代码又少。</p><h3 id="在用户自定义的函数接口中使用-lambda-表达式"><a href="#在用户自定义的函数接口中使用-lambda-表达式" class="headerlink" title="在用户自定义的函数接口中使用 lambda 表达式"></a>在用户自定义的函数接口中使用 lambda 表达式</h3><p>在下面这个范例中，我们将创建自己的函数接口，我们先用普通的方式来实现一下</p><h4 id="LambdaTester-java-2"><a href="#LambdaTester-java-2" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Calculator</span> <span class="variable">cal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2 )</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n1 + n2;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      System.out.println(cal.add(<span class="number">5</span>,<span class="number">8</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span>;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p>匿名内部类实现已经很简洁了。但，如果你看了 lambda 的实现，就会发现，匿名内部类还是有点复杂的</p><h4 id="LambdaTester-java-3"><a href="#LambdaTester-java-3" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Calculator</span> <span class="variable">cal</span> <span class="operator">=</span> (n1,n2) -&gt; n1 + n2;</span><br><span class="line">      System.out.println(cal.add(<span class="number">5</span>,<span class="number">8</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span>;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure><p>代码少的有点不像话了…..</p><h3 id="在-Comparator-中使用-lambda-表达式"><a href="#在-Comparator-中使用-lambda-表达式" class="headerlink" title="在 Comparator 中使用 lambda 表达式"></a>在 <code>Comparator</code> 中使用 lambda 表达式</h3><p>现在，我们来看看 <code>Comparator</code> 接口，了解下如何使用 lambda 表达式对包含字符串的集合进行排序。</p><h4 id="LambdaTester-java-4"><a href="#LambdaTester-java-4" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;...排序之前...&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个 comparator</span></span><br><span class="line">        Comparator&lt;String&gt; comp= (String s1, String s2) -&gt; s1.compareTo(s2);</span><br><span class="line">        Collections.sort(list, comp);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;...排序之后...&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...排序之前...</span><br><span class="line">Ram</span><br><span class="line">Shyam</span><br><span class="line">Kabir</span><br><span class="line">...排序之后...</span><br><span class="line">Kabir</span><br><span class="line">Ram</span><br><span class="line">Shyam</span><br></pre></td></tr></table></figure><h3 id="使用-Lambda-表达式实现函数接口来迭代集合"><a href="#使用-Lambda-表达式实现函数接口来迭代集合" class="headerlink" title="使用 Lambda 表达式实现函数接口来迭代集合"></a>使用 Lambda 表达式实现函数接口来迭代集合</h3><p>Java 8 中引入了 <code>java.util.function</code> 包。这个包提供了 <code>java.util.function.Function</code> 接口，我们可以在这个接口的帮助下，使用 Lambda 表达式来迭代集合。</p><p><code>java.util.function.Function</code> 只有一个方法 <code>apply()</code> ，这个方法可以在用户定义的函数中调用。我们可以使用 <code>Function</code> 接口实现一个自定义的打印方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">customShow</span><span class="params">( Function&lt;String,String&gt; fun)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fun.apply(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们就可以使用 Lambda 来实现这个接口了</p><h4 id="LambdaTester-java-5"><a href="#LambdaTester-java-5" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;LambdaTester.Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LambdaTester.Students&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">LambdaTester</span>.Student(<span class="string">&quot;Ram&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">LambdaTester</span>.Student(<span class="string">&quot;Shyam&quot;</span>,<span class="number">22</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">LambdaTester</span>.Student(<span class="string">&quot;Kabir&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="keyword">for</span>(Student st: list)&#123;</span><br><span class="line">            System.out.println(st.customShow(s-&gt;s.getName()+<span class="string">&quot;: &quot;</span>+s.getAge()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span>  String <span class="title function_">customShow</span><span class="params">(Function&lt;Student,String&gt; fun)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fun.apply(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ram: 20</span><br><span class="line">Shyam: 22</span><br><span class="line">Kabir: 18</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八、Java-8-Lambda-表达式-（-下-）范例&quot;&gt;&lt;a href=&quot;#八、Java-8-Lambda-表达式-（-下-）范例&quot; class=&quot;headerlink&quot; title=&quot;八、Java 8 Lambda 表达式 （ 下 ）范例&quot;&gt;&lt;/a&gt;八、Jav</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="简介" scheme="https://tryrun.gitee.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
    <category term="Lambda" scheme="https://tryrun.gitee.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>九、Java 8 方法引用</title>
    <link href="https://tryrun.gitee.io/posts/4d9ed831.html"/>
    <id>https://tryrun.gitee.io/posts/4d9ed831.html</id>
    <published>2022-05-26T10:58:11.000Z</published>
    <updated>2022-05-26T10:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九、Java-8-方法引用"><a href="#九、Java-8-方法引用" class="headerlink" title="九、Java 8 方法引用"></a>九、Java 8 方法引用</h1><p>Java 8 中新增加了 <strong>方法引用</strong> 这个概念。 但，什么是方法引用呢 ？</p><p>我们先来看一个例子，下面这个范例演示了如何遍历字符串列表并进行一些操作</p><h4 id="LambdaTester-java"><a href="#LambdaTester-java" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="keyword">for</span>(String st: list)&#123;</span><br><span class="line">            System.out.println(st);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        <span class="keyword">for</span>(String st: list)&#123;</span><br><span class="line">            upperAndPrint(st);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upperAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ram</span><br><span class="line">Shyam</span><br><span class="line">Kabir</span><br><span class="line">RAM</span><br><span class="line">SHYAM</span><br><span class="line">KABIR</span><br></pre></td></tr></table></figure><p>有简洁代码倾向的我们，看到那重复的 <code>for(String st: list)</code> 就会想如何能够直接把代码改的更简洁一些。</p><p>第一个想到的，肯定是使用 Java 8 新增的 lambda 表达式和 <code>forEach</code> 改造下</p><h4 id="LambdaTester-java-1"><a href="#LambdaTester-java-1" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        list.forEach(item -&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        list.forEach(item -&gt; upperAndPrint(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upperAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇，使用 Lambda 表达式真的是简洁了不少，但是，还能更简单一点吗？</p><p>比如 <code>item -&gt; System.out.println(item)</code> 这个表达式，其实就是调用 <code>System.out.println()</code> 方法，并把 <code>forEach</code> 迭代列表生成的唯一参数 <code>item</code> 传给它而已</p><p>比如 <code>item -&gt; upperAndPrint(item)</code> 这个表达式，也是一样啊，就是把 <code>forEach</code> 生成的唯一参数 <code>item</code> 传给给 <code>upperAndPrint()</code> 方法而已。</p><p>既然这样，我们为什么不能直接传递方法名给 <code>forEach</code> 呢？</p><p>对吧，所以我们改改，改成如下这种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        list.forEach(System.out.println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        list.forEach(upperAndPrint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upperAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LambdaTester.java:18: 错误: 找不到符号</span><br><span class="line">        list.forEach(System.out.println);</span><br><span class="line">                               ^</span><br><span class="line">  符号:   变量 println</span><br><span class="line">  位置: 类型为PrintStream的变量 out</span><br><span class="line">LambdaTester.java:21: 错误: 找不到符号</span><br><span class="line">        list.forEach(upperAndPrint);</span><br><span class="line">                     ^</span><br><span class="line">  符号:   变量 upperAndPrint</span><br><span class="line">  位置: 类 LambdaTester</span><br><span class="line">2 个错误</span><br></pre></td></tr></table></figure><p>这在所有的 Java 版本中都会报错，但是自 Java 8 开始，还真是可以直接传递方法名的，只是我们使用的方式不对而已。</p><p>加入我们改成下面这样，就会正确了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        list.forEach(LambdaTester::upperAndPrint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upperAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ram</span><br><span class="line">Shyam</span><br><span class="line">Kabir</span><br><span class="line">RAM</span><br><span class="line">SHYAM</span><br><span class="line">KABIR</span><br></pre></td></tr></table></figure><p>哈哈哈，正确了。</p><p>在这个正确的方法中，有两个重点：</p><p>1、 方法名和类名之间不是使用点号 ( <code>.</code> ) 而是使用两个冒号 <code>::</code> 。<br>2、 提供的方法名必须包含类名，如果没有引入该类名，则需要使用全限定类名，也就是需要添加包名作为前缀。</p><p>这种使用方法名做参数的做法，在 Java 8 中称之为 「 方法引用 」</p><h2 id="Java-8-方法引用"><a href="#Java-8-方法引用" class="headerlink" title="Java 8 方法引用"></a>Java 8 方法引用</h2><p><strong>方法引用</strong> 是 Java 8 新增加的功能。方法引用有点类似于 C / C++ 中的 <strong>函数指针</strong> ，通过方法名称指向方法。</p><p>Java 8 中的方法引用通过 <code>::</code> 符号引用方法，而且支持一下类型的方法引用</p><p>1、 静态方法<br>2、 实例方法<br>3、 使用 <code>new</code> 运算符的构造函数。例如 <code>TreeSet::new</code></p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>我们重写一下上面的范例，演示下如何引用静态方法和实例方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line">        tester.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Kabir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        list.forEach(LambdaTester::upperAndPrint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为小写并输出</span></span><br><span class="line">        list.forEach(<span class="built_in">this</span>::lowerAndPrint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lowerAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">upperAndPrint</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ram</span><br><span class="line">Shyam</span><br><span class="line">Kabir</span><br><span class="line">RAM</span><br><span class="line">SHYAM</span><br><span class="line">KABIR</span><br><span class="line">ram</span><br><span class="line">shyam</span><br><span class="line">kabir</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;九、Java-8-方法引用&quot;&gt;&lt;a href=&quot;#九、Java-8-方法引用&quot; class=&quot;headerlink&quot; title=&quot;九、Java 8 方法引用&quot;&gt;&lt;/a&gt;九、Java 8 方法引用&lt;/h1&gt;&lt;p&gt;Java 8 中新增加了 &lt;strong&gt;方法引用&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>七、Java 8 Lambda 表达式 （ 中 ）- 外部参数</title>
    <link href="https://tryrun.gitee.io/posts/5fb1bf39.html"/>
    <id>https://tryrun.gitee.io/posts/5fb1bf39.html</id>
    <published>2022-05-26T10:54:08.000Z</published>
    <updated>2022-05-26T10:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、Java-8-Lambda-表达式-（-中-）-外部参数"><a href="#七、Java-8-Lambda-表达式-（-中-）-外部参数" class="headerlink" title="七、Java 8 Lambda 表达式 （ 中 ）- 外部参数"></a>七、Java 8 Lambda 表达式 （ 中 ）- 外部参数</h1><p>在 Java 8 Lambda 表达式 （ 上 ）- 简介 章节中我们讲解了 Java 8 Lambda 表达式的一些基础知识。我们也了解 Java 8 Lambda 表达式的一些使用场景：</p><ul><li>Java Lambda 表达式主要用于定义函数接口的内联实现。而函数接口，就是只包含了一个方法的接口。在前一章节中，我们使用了各种类型的 lambda 表达式来定义 <code>MathOperation</code> 接口的 <code>operation</code> 方法。</li><li>Java Lambda 表达式消除了对 <strong>匿名类</strong> 的需求，并为 Java 提供了非常简单但功能强大的函数编程功能。</li></ul><h2 id="Java-8-Lambda-表达式作用域-scope"><a href="#Java-8-Lambda-表达式作用域-scope" class="headerlink" title="Java 8 Lambda 表达式作用域 ( scope )"></a>Java 8 Lambda 表达式作用域 ( scope )</h2><p>因为 Java 8 的 lambda 表达式其实是函数接口的内联实现，也就是匿名内部类，因此，可以引用任何外部的变量或者常量。</p><p>但是，lambda 对这些外部的变量是有要求的： 它们必须使用 <code>final</code> 修饰符修饰。</p><p>如果一个变量允许被第二次赋值，则 Lambda 表达式会抛出编译错误。</p><blockquote><p>注意： 其实这条规则并不是非常严格执行的，普通变量也是可以的，只要，只要不进行第二次赋值就可以。</p><p>注意： 刚刚测试了下，其实只要不是当前作用域声明的变量，可以随意第二次赋值，也不会报错</p></blockquote><h2 id="范例一"><a href="#范例一" class="headerlink" title="范例一"></a>范例一</h2><p>Java 8 lambda 表达式使用外部 <code>final</code> 变量</p><h4 id="LambdaTester-java"><a href="#LambdaTester-java" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">salutation</span> <span class="operator">=</span> <span class="string">&quot;你好，&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt; </span><br><span class="line">      System.out.println(salutation + message);</span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br></pre></td></tr></table></figure><h3 id="范例二"><a href="#范例二" class="headerlink" title="范例二"></a>范例二</h3><p>lambda 引用的普通的变量也是可以的，只要这个变量没有第二次被赋值，不管是任何地方。</p><h4 id="LambdaTester-java-1"><a href="#LambdaTester-java-1" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="type">String</span> <span class="variable">salutation</span> <span class="operator">=</span> <span class="string">&quot;你好，&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt; </span><br><span class="line">      System.out.println(salutation + message);</span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，B</span><br></pre></td></tr></table></figure><h2 id="范例三"><a href="#范例三" class="headerlink" title="范例三"></a>范例三</h2><p>如果 lambda 表达式引用的是当前作用域下的普通的变量，而该变量又在某个地方第二次被赋值，则会抛出一个编译错误</p><h4 id="LambdaTester-java-2"><a href="#LambdaTester-java-2" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">salutation</span> <span class="operator">=</span> <span class="string">&quot;你好，&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt; </span><br><span class="line">      System.out.println(salutation + message);</span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">      salutation = <span class="string">&quot;Hello，&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaTester.java:8: 错误: 从lambda 表达式引用的本地变量必须是最终变量或实际上的最终变量</span><br><span class="line">      System.out.println(salutation + message);</span><br><span class="line">                         ^</span><br><span class="line">1 个错误</span><br></pre></td></tr></table></figure><h2 id="范例四"><a href="#范例四" class="headerlink" title="范例四"></a>范例四</h2><p>如果 lambda 表达式引用的变量并不是当前作用域下声明的，也可以随意赋值，并不会报错</p><h4 id="LambdaTester-java-3"><a href="#LambdaTester-java-3" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="type">String</span> <span class="variable">salutation</span> <span class="operator">=</span> <span class="string">&quot;你好，&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      salutation = <span class="string">&quot;Hello，&quot;</span>;</span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt; </span><br><span class="line">      System.out.println(salutation + message);</span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">      salutation = <span class="string">&quot;你好，&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello，D</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java lambda 表达式可以随意引用外部变量，但如果外部变量是在当前作用域声明的，则一定不可以进行第二次赋值，哪怕是在 lambda 语句之后。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;七、Java-8-Lambda-表达式-（-中-）-外部参数&quot;&gt;&lt;a href=&quot;#七、Java-8-Lambda-表达式-（-中-）-外部参数&quot; class=&quot;headerlink&quot; title=&quot;七、Java 8 Lambda 表达式 （ 中 ）- 外部参数&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="简介" scheme="https://tryrun.gitee.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
    <category term="Lambda" scheme="https://tryrun.gitee.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>六、Java 8 Lambda 表达式 （ 上 ）- 简介</title>
    <link href="https://tryrun.gitee.io/posts/2bc5fe4b.html"/>
    <id>https://tryrun.gitee.io/posts/2bc5fe4b.html</id>
    <published>2022-05-25T10:52:42.000Z</published>
    <updated>2022-05-25T10:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、Java-8-Lambda-表达式-（-上-）-简介"><a href="#六、Java-8-Lambda-表达式-（-上-）-简介" class="headerlink" title="六、Java 8 Lambda 表达式 （ 上 ）- 简介"></a>六、Java 8 Lambda 表达式 （ 上 ）- 简介</h1><p>Lambda 表达式在 Java 8 中引入，并且被吹捧为 Java 8 最大的特性。</p><p>Lambda 表达式是函数式编程的的一个重要特性，标志者 Java 向函数式编程迈出了重要的第一步。</p><h2 id="Java-Lambda-表达式语法"><a href="#Java-Lambda-表达式语法" class="headerlink" title="Java Lambda 表达式语法"></a>Java Lambda 表达式语法</h2><p>Java Lambda 表达式的语法结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameter -&gt; expression body</span><br></pre></td></tr></table></figure><p>实际代码可能如下</p><h4 id="有参数且只有一条语句时"><a href="#有参数且只有一条语句时" class="headerlink" title="有参数且只有一条语句时"></a>有参数且只有一条语句时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a,b) -&gt; a + b</span><br></pre></td></tr></table></figure><h4 id="只有一个参数时"><a href="#只有一个参数时" class="headerlink" title="只有一个参数时"></a>只有一个参数时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a  -&gt; a</span><br></pre></td></tr></table></figure><h4 id="没有参数时"><a href="#没有参数时" class="headerlink" title="没有参数时"></a>没有参数时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()  -&gt; System.out.println(&quot;搜云库技术团队&quot;)</span><br></pre></td></tr></table></figure><h4 id="有多条语句时"><a href="#有多条语句时" class="headerlink" title="有多条语句时"></a>有多条语句时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a,b) -&gt; &#123;</span><br><span class="line">    int c = a + b;</span><br><span class="line">    System.out.println(&quot;搜云库技术团队&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对这个 Java Lambda 表达式语法，有几个重要的特征需要说明</p><ul><li><strong>可选的参数类型声明</strong> ： 无需声明参数的类型。编译器可以从参数的值推断出相同的值。</li><li><strong>可选的参数周围的小括号 <code>()</code></strong> ： 如果只有一个参数，可以忽略参数周围的小括号。但如果有多个参数，则必须添加小括号。</li><li><strong>可选的大括号 <code>&#123;&#125;</code></strong> : 如果 Lambda 表达式只包含一条语句，那么可以省略大括号。但如果有多条语句，则必须添加大括号。</li><li><strong>可选的 <code>return</code> 关键字</strong> ： 如果 Lambda 表达式只有一条语句，那么编译器会自动 <code>return</code> 该语句最后的结果。但如果显式使用了 <code>return</code> 语句，则必须添加大括号 <code>&#123;&#125;</code> ，哪怕只有一条语句。</li></ul><h2 id="Java-Lambda-表达式的原理"><a href="#Java-Lambda-表达式的原理" class="headerlink" title="Java Lambda 表达式的原理"></a>Java Lambda 表达式的原理</h2><p>后面我们会讲到，Java 8 中的 Lambda 表达式其实是一个特殊的只有一个方法的类的实例。</p><p>这些类是 Java 8 内部已经定义好的，而且实现了 <code>java.lang.FunctionalInterface</code> 这个接口。</p><p>这个 <code>java.lang.FunctionalInterface</code> 接口是一种信息性注解类型，用于标识一个接口类型声明为函数接口（ functional interface ）。</p><p>从某些方面说，Java 8 的 Lambda 表达式是使用匿名内部类的语法创建了 <code>java.util.function</code> 包下相应签名的接口的或者其它自定义的只有一个方法的接口实例。</p><p>但是，实际上，Java 8 中的 Lambda 不仅仅是使用匿名内部类，还使用了 Java 8 接口的默认方法和一些其它的功能。这方面，有空我会写一篇文章。</p><h2 id="范例一：-Java-Lambda-表达式"><a href="#范例一：-Java-Lambda-表达式" class="headerlink" title="范例一： Java Lambda 表达式"></a>范例一： Java Lambda 表达式</h2><p>Lambda 比较常见的使用场景就是 <code>new Runnable</code> 匿名内部类的使用</p><h4 id="LambdaTester-java"><a href="#LambdaTester-java" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        th.start(); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好 </span><br></pre></td></tr></table></figure><h2 id="范例二"><a href="#范例二" class="headerlink" title="范例二"></a>范例二</h2><h4 id="LambdaTester-java-1"><a href="#LambdaTester-java-1" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 有声明参数类型</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">addition</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 没有声明参数类型</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">subtraction</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用 return 语句显式返回值需要添加大括号</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">multiplication</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果只有一条语句，那么可以省略大括号，Java 会返回表达式的值</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">division</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a / b;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 / 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">operate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, MathOperation mathOperation)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 + 5 = 15</span><br><span class="line">10 - 5 = 5</span><br><span class="line">10 x 5 = 50</span><br><span class="line">10 / 5 = 2</span><br></pre></td></tr></table></figure><h2 id="Java-Lambda-表达式的缺点"><a href="#Java-Lambda-表达式的缺点" class="headerlink" title="Java Lambda 表达式的缺点"></a>Java Lambda 表达式的缺点</h2><p>不知道大家有没有从上面的表达式中看到一些端倪，好像，好像 Java 8 中的 Lambda 不能凭空出现。</p><p>Java Lambda 表达式最大的缺点，就是不能像其它语言的 Lambda 表达式一样凭空出现。</p><p>Java 中的 Lambda 表达式需要有一个函数接口声明作为模板。这个模板定义了 Lambda 表达式的参数类型和返回值类型。</p><p>例如下面的代码，我们先要声明一个函数接口类型，然后才能定义一个参数和返回值都一样的表达式</p><h4 id="LambdaTester-java-2"><a href="#LambdaTester-java-2" class="headerlink" title="LambdaTester.java"></a>LambdaTester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 先声明一个函数接口</span></span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">LambdaTester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaTester</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 有小括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;你好，&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略小括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService2</span> <span class="operator">=</span> (message) -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;你好，&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">      greetService2.sayMessage(<span class="string">&quot;B &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你好，A</span><br><span class="line">你好，B</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、Java-8-Lambda-表达式-（-上-）-简介&quot;&gt;&lt;a href=&quot;#六、Java-8-Lambda-表达式-（-上-）-简介&quot; class=&quot;headerlink&quot; title=&quot;六、Java 8 Lambda 表达式 （ 上 ）- 简介&quot;&gt;&lt;/a&gt;六</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="简介" scheme="https://tryrun.gitee.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
    <category term="Lambda" scheme="https://tryrun.gitee.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>五、Java 8 java.util.Base64 编码解码</title>
    <link href="https://tryrun.gitee.io/posts/d747711e.html"/>
    <id>https://tryrun.gitee.io/posts/d747711e.html</id>
    <published>2022-05-24T10:51:12.000Z</published>
    <updated>2022-05-24T10:47:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、Java-8-java-util-Base64-编码解码"><a href="#五、Java-8-java-util-Base64-编码解码" class="headerlink" title="五、Java 8 java.util.Base64 编码解码"></a>五、Java 8 java.util.Base64 编码解码</h1><p>Base64 是一种常见的字符编码解码方式，一般用于将二进制数据编码为更具可读性的 Base64 进制格式。</p><p>在 Java 6 （ JDK 1.6 ) 之前， JDK 一直没有包含 Base64 的实现类。因此大部分人都使用 Sum/Orale JDK 里面的 <code>sun.misc.BASE64Encode</code> 和<code>sun.misc.BASE64Decode</code>。然后这也成为很多 Java 开发者的习惯。一直沿用到今天的 Java8 中还有人在用。</p><p>JDK 1.6 虽然添加了 Base64 的实现。但是，非常隐秘，竟然是在 <code>javax.xml.bind</code> 包下的 <code>DatastypeConvert</code> 类中的两个静态方法 <code>parseBase64Binary</code> 和 <code>printBase64Binary</code>.</p><p>Java 8 终于把 Base64 扶正了，在 <code>java.util</code> 包下提供了 <code>Base64</code> 类用于编码和解码 Base64 数据。</p><h2 id="Java-8-java-util-Base64"><a href="#Java-8-java-util-Base64" class="headerlink" title="Java 8 java.util.Base64"></a>Java 8 java.util.Base64</h2><p>Java 8 中的 <code>java.util.Base64</code> 类提供了三种类型的 Base64 编码解码格式：</p><p>1、 <strong>简单类型( simple )</strong> : 编码字符只包含 <code>A-Za-z0-9+/</code> 等 64 个字符。且编码的时候不会包含任何换行符 ( <code>\r</code> 、 <code>\n</code> 、<code>\r\n</code> ）。解码的时候也只会解码 <code>A-Za-z0-9+/</code> 内的字符，超出的则会被拒绝。<br>2、 <strong>URL</strong> : 编码字符只包含 <code>A-Za-z0-9+_</code> 等 64 个字符。和 <strong>简单</strong> 相比，就是把 <code>/</code> 换成了 <code>_</code> 。因为没有 <code>/</code> 字符，因此这种编码方式非常适合 URL 和文件名等。<br>3、 <strong>MIME</strong> : 编码会被映射为 MIME 友好格式：每一行输出不超过 76 个字符，而且每行以 <code>\r\n</code> 符结束。但末尾行并不会包含 <code>\r\n</code>。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p><code>java.util.Base64</code> 还包含了两个内部静态类，分别实现了 RFC 4648 和 RFC 2045 中规范的 Base64 编码和解码方式。</p><table><thead><tr><th align="center">内部类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">static class Base64.Decoder</td><td align="center">该类实现使用 RFC 4648 和 RFC 2045 中规定的 Base64 解码方案解码数据</td></tr><tr><td align="center">static class Base64.Encoder</td><td align="center">该类实现使用 RFC 4648 和 RFC 2045 中规定的 Base64 编码方案编码数据</td></tr></tbody></table><p>每个内部类的方法详情，请直接点击相关 URL 查看。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><code>java.util.Base64</code> 类提供的都是静态方法。下表列出了这些静态方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Base64.Decoder getDecoder()</td><td align="center">返回一个 <code>Base64.Decoder</code> 类型的 <strong>简单</strong> 解码器</td></tr><tr><td align="center">Base64.Encoder getEncoder()</td><td align="center">返回一个 <code>Base64.Encoder</code> 类型的 <strong>简单</strong> 编码器</td></tr><tr><td align="center">Base64.Decoder getMimeDecoder()</td><td align="center">返回一个 <code>Base64.Decoder</code> 类型的 <strong>MIME</strong> 解码器</td></tr><tr><td align="center">Base64.Encoder getMimeEncoder()</td><td align="center">返回一个 <code>Base64.Encoder</code> 类型的 <strong>MINE</strong> 编码器</td></tr><tr><td align="center">Base64.Encoder getMimeEncoder( int lineLength, byte[] lineSeparator)</td><td align="center">返回一个 <code>Base64.Encoder</code> 类型的使用特定长度和行分隔符的 <strong>MINE</strong> 编码器</td></tr><tr><td align="center">Base64.Decoder getUrlDecoder()</td><td align="center">返回一个 <code>Base64.Decoder</code> 类型的 URL 和文件名安全的解码器</td></tr><tr><td align="center">Base64.Encoder getUrlEncoder()</td><td align="center">返回一个 <code>Base64.Encoder</code> 类型的 URL 和文件名安全的编码器</td></tr></tbody></table><h2 id="范例一：-基本的编码解码器"><a href="#范例一：-基本的编码解码器" class="headerlink" title="范例一： 基本的编码解码器"></a>范例一： 基本的编码解码器</h2><p>我们写一个范例演示下 <code>getDecoder()</code> 和 <code>getEncoder()</code> 两个方法</p><h4 id="Base64Tester-java"><a href="#Base64Tester-java" class="headerlink" title="Base64Tester.java"></a>Base64Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">base64encodedString</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(</span><br><span class="line">            <span class="string">&quot;Java 8 Base64 &quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">         System.out.println(base64encodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(base64encodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(base64decodedBytes, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(UnsupportedEncodingException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;异常：&quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上范例，输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SmF2YSA4IEJhc2U2NCDnvJbnoIHop6PnoIEgLSBKYXZhOOaWsOeJueaApyAtIOeugOWNleaVmeeoiyA=</span><br><span class="line"></span><br><span class="line">Java 8 Base64</span><br></pre></td></tr></table></figure><h2 id="范例二：-URL-和文件名安全的编码解码器"><a href="#范例二：-URL-和文件名安全的编码解码器" class="headerlink" title="范例二： URL 和文件名安全的编码解码器"></a>范例二： URL 和文件名安全的编码解码器</h2><p>我们写一个范例演示下 <code>getUrlEncoder()</code> 和 <code>getUrlDecoder()</code> 两个方法</p><h4 id="Base64Tester-java-1"><a href="#Base64Tester-java-1" class="headerlink" title="Base64Tester.java"></a>Base64Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">base64encodedString</span> <span class="operator">=</span> Base64.getUrlEncoder().encodeToString(</span><br><span class="line">            <span class="string">&quot;Java 8 Base64 编码解码&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">         System.out.println(base64encodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] base64decodedBytes = Base64.getUrlDecoder().decode(base64encodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(base64decodedBytes, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(UnsupportedEncodingException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;异常：&quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上范例，输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SmF2YSA4IEJhc2U2NCDnvJbnoIHop6PnoIEgLSBKYXZhOOaWsOeJueaApyAtIOeugOWNleaVmeeoiyA=</span><br><span class="line"></span><br><span class="line">Java 8 Base64</span><br></pre></td></tr></table></figure><h2 id="范例三：MIME-Base64-编码解码器"><a href="#范例三：MIME-Base64-编码解码器" class="headerlink" title="范例三：MIME Base64 编码解码器"></a>范例三：<strong>MIME</strong> Base64 编码解码器</h2><p>我们写一个范例演示下 <code>getMimeEncoder()</code> 和 <code>getMimeDecoder()</code> 两个方法</p><h4 id="Base64Tester-java-2"><a href="#Base64Tester-java-2" class="headerlink" title="Base64Tester.java"></a>Base64Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            stringBuilder.append(UUID.randomUUID().toString());</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] mimeBytes = stringBuilder.toString().getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">mimeEncodedString</span> <span class="operator">=</span> Base64.getMimeEncoder().encodeToString(mimeBytes);</span><br><span class="line">         System.out.println(mimeEncodedString);</span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] base64decodedBytes = Base64.getMimeDecoder().decode(mimeEncodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(base64decodedBytes, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(UnsupportedEncodingException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;异常：&quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上范例，输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">YTU3MTc4MTgtZDFhMS00MjJmLWEyYjgtNTczNzdjMjQ4N2VlZWE4OGVmNTgtNjA3YS00MWY5LTk0</span><br><span class="line">OTAtNjhmNTk1NGIwZGYwYmU0NzA3NjgtOGU0OS00MjBiLWE1YTktYjM1NDcyOTI2MjkwZmExMTdh</span><br><span class="line">NWQtMmRlMi00ZjllLTk1YmUtZWE0MzZlMWEwZmYxZjU2NzE5YWEtMTQzNy00YzZmLTgyNGQtNzFm</span><br><span class="line">YTNkZmVkNjBiNWE4ODViMmYtNjQ3NC00ODY2LThhMDEtMmRkMWY5NmQ5ZDgyMjNiNjAyMjgtNmY3</span><br><span class="line">NC00NGZjLWI3NWItM2Y3YzFmODlmOTIxYjA0ODE2ZjEtYTliZC00NjNkLTkxYWEtZDc3NDlhZGUx</span><br><span class="line">MTU4M2ZiMjJhZDItNzRmNS00Y2IxLTkyNmItY2Y4ZjZkNzc4OWVlZmJiMWQwYjMtZGE0MS00OTBi</span><br><span class="line">LWJmYWMtMTVmNjVmMjIxODc4</span><br><span class="line"></span><br><span class="line">a5717818-d1a1-422f-a2b8-57377c2487eeea88ef58-607a-41f9-9490-68f5954b0df0be470768-8e49-420b-a5a9-b35472926290fa117a5d-2de2-4f9e-95be-ea436e1a0ff1f56719aa-1437-4c6f-824d-71fa3dfed60b5a885b2f-6474-4866-8a01-2dd1f96d9d8223b60228-6f74-44fc-b75b-3f7c1f89f921b04816f1-a9bd-463d-91aa-d7749ade11583fb22ad2-74f5-4cb1-926b-cf8f6d7789eefbb1d0b3-da41-490b-bfac-15f65f221878</span><br></pre></td></tr></table></figure><p>是不是看不出来有 76 个字符分割 ？ 没关系，我们使用另一个 <code>getMimeEncoder(int lineLength, byte[] lineSeparator)</code> 重载方法试一下</p><h4 id="Base64Tester-java-3"><a href="#Base64Tester-java-3" class="headerlink" title="Base64Tester.java"></a>Base64Tester.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Tester</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            stringBuilder.append(UUID.randomUUID().toString());</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] mimeBytes = stringBuilder.toString().getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">mimeEncodedString</span> <span class="operator">=</span> Base64.getMimeEncoder(<span class="number">32</span>,<span class="string">&quot;@~@\n\n&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>)).encodeToString(mimeBytes);</span><br><span class="line">         System.out.println(mimeEncodedString);</span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         <span class="type">byte</span>[] base64decodedBytes = Base64.getMimeDecoder().decode(mimeEncodedString);</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(base64decodedBytes, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(UnsupportedEncodingException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;异常：&quot;</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上范例，输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">OTkwNWYxY2QtMDBkYS00Y2M1LTgwMGUt@~@</span><br><span class="line"></span><br><span class="line">YjgzYTNkNGZlMGJhNGNmM2Q2YzItODli@~@</span><br><span class="line"></span><br><span class="line">ZS00ZDQyLWI1MzEtYTEwMmRhNzk2ZjBi@~@</span><br><span class="line"></span><br><span class="line">Njk0MWNmMzItYzhlZS00NjE0LTk5NWMt@~@</span><br><span class="line"></span><br><span class="line">ODUwYWM0NDE3YTEyYzdjOTBkMGMtOTZl@~@</span><br><span class="line"></span><br><span class="line">Ny00MjkxLThmOGUtM2JkYWQ4NmY4YjU1@~@</span><br><span class="line"></span><br><span class="line">Nzk2NmZhYjItZmY0YS00ZTc1LThiOTUt@~@</span><br><span class="line"></span><br><span class="line">Mzk5MjAxMWM0ZTMwODdjYzdhYjAtZjEx@~@</span><br><span class="line"></span><br><span class="line">MC00NDAwLTkzN2EtZTU0N2IzYTY5Mzkx@~@</span><br><span class="line"></span><br><span class="line">MzNlNjYyYjAtYTM5Yy00OTJjLWI4Mzgt@~@</span><br><span class="line"></span><br><span class="line">ZmRmYzkyMGM4ZGEzM2NlMWVmOTgtMWI3@~@</span><br><span class="line"></span><br><span class="line">OS00Y2Q0LWI1NGItYjg2MzkzNDhiMDk1@~@</span><br><span class="line"></span><br><span class="line">YmQ1ZjE5NzAtNjliYS00NTRmLTgyNTAt@~@</span><br><span class="line"></span><br><span class="line">MjNlZmZkMGVjOWU0MDk1YTAyM2MtZTUz@~@</span><br><span class="line"></span><br><span class="line">NS00NTZiLTk4ZjQtNTkyMGE0Y2FiYTdk</span><br><span class="line"></span><br><span class="line">9905f1cd-00da-4cc5-800e-b83a3d4fe0ba4cf3d6c2-89be-4d42-b531-a102da796f0b6941cf32-c8ee-4614-995c-850ac4417a12c7c90d0c-96e7-4291-8f8e-3bdad86f8b557966fab2-ff4a-4e75-8b95-3992011c4e3087cc7ab0-f110-4400-937a-e547b3a6939133e662b0-a39c-492c-b838-fdfc920c8da33ce1ef98-1b79-4cd4-b54b-b8639348b095bd5f1970-69ba-454f-8250-23effd0ec9e4095a023c-e535-456b-98f4-5920a4caba7d</span><br></pre></td></tr></table></figure><p>在这个范例中，我们每隔 32 个字符就分割一次。且使用 <code>@~@\n\n</code> 作为分隔符。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、Java-8-java-util-Base64-编码解码&quot;&gt;&lt;a href=&quot;#五、Java-8-java-util-Base64-编码解码&quot; class=&quot;headerlink&quot; title=&quot;五、Java 8 java.util.Base64 编码解码&quot;&gt;</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Base64" scheme="https://tryrun.gitee.io/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>四、Java8 Runnable Lambda 表达式</title>
    <link href="https://tryrun.gitee.io/posts/2063f33b.html"/>
    <id>https://tryrun.gitee.io/posts/2063f33b.html</id>
    <published>2022-05-23T10:49:36.000Z</published>
    <updated>2022-05-23T10:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、Java8-Runnable-Lambda-表达式"><a href="#四、Java8-Runnable-Lambda-表达式" class="headerlink" title="四、Java8 Runnable Lambda 表达式"></a>四、Java8 Runnable Lambda 表达式</h1><p>本章节我们重点来讲讲 Java 8 中的 <code>Runnable</code> Lambda 表达式。众所周知，Java 8 中的 <code>Runable</code> 和 <code>Callable</code> 两个接口都添加了 <code>@FunctionalInterface</code> 注解，因此我们可以直接使用 Lambda 表达式来代替它们的 <code>run()</code> 和 <code>call()</code> 方法</p><h2 id="Runnable-表达式"><a href="#Runnable-表达式" class="headerlink" title="Runnable 表达式"></a>Runnable 表达式</h2><p>Java 8 开始支持 Lambda 表达式，所以，好像，一夜间，所有添加了 <code>@FunctionalInterface</code> 注解的方法都可以使用 Lambda 表达式来创建实例，<code>Runnable</code> 也不例外，我们可以直接使用一个 Lambda 表达式来创建它的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">th.start();</span><br></pre></td></tr></table></figure><p>运行结果输出为 <code>Hello World</code> ，是不是很神奇，如果没有 Lambda 表达式，那么原来的代码可能如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">th</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">th.start(); </span><br></pre></td></tr></table></figure><p>如果我们的 Lambda 表达式需要多行代码，可以用一对打括号 <code>&#123;&#125;</code> 扩起来，就像下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    Consumer&lt;Book&gt; style = (Book b) -&gt; System.out.println(<span class="string">&quot;Book Id:&quot;</span>+b.getId() + <span class="string">&quot;, Book Name:&quot;</span>+b.getName());</span><br><span class="line">    list.forEach(style);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果 Lambda 表达式需要使用到外部的参数，那么必须对参数添加 <code>final</code> 修饰符表示参数不可变更。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Book&gt; list =  Arrays.asList(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>, <span class="string">&quot;Ramayan&quot;</span>), <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>, <span class="string">&quot;Mahabharat&quot;</span>));</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    Consumer&lt;Book&gt; style = (Book b) -&gt; System.out.println(<span class="string">&quot;Book Id:&quot;</span>+b.getId() + <span class="string">&quot;, Book Name:&quot;</span>+b.getName());</span><br><span class="line">    list.forEach(style);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们还可以把 <code>Runnable</code> 表达式作为参数传递给 <code>Thread</code> 相关的方法</p><p>我们首先来定一个 <code>Book.java</code> 类</p><h4 id="Book-java"><a href="#Book-java" class="headerlink" title="Book.java"></a>Book.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.runnable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id, String name)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;id:&quot;</span>+id + <span class="string">&quot;, Name:&quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>然后在一个 <code>Runnable</code> 中输出书籍的一些信息</p><h4 id="Java8RunnableDemo-java"><a href="#Java8RunnableDemo-java" class="headerlink" title="Java8RunnableDemo.java"></a>Java8RunnableDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.runnable;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.concretepage.Book;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8RunnableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Book&gt; list =  Arrays.asList(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>, <span class="string">&quot;Ramayan&quot;</span>), <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>, <span class="string">&quot;Mahabharat&quot;</span>));</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; list.forEach(Book::print);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        th1.start();</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            Consumer&lt;Book&gt; style = (Book b) -&gt; System.out.println(<span class="string">&quot;Book Id:&quot;</span>+b.getId() + <span class="string">&quot;, Book Name:&quot;</span>+b.getName());</span><br><span class="line">            list.forEach(style);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">th2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r2);</span><br><span class="line">        th2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id:1, Name:Ramayan</span><br><span class="line">Book Id:1, Book Name:Ramayan</span><br><span class="line">id:2, Name:Mahabharat</span><br><span class="line">Book Id:2, Book Name:Mahabharat</span><br></pre></td></tr></table></figure><p>同样的，我们还可以在 <code>ExecutorService</code> 中运行 <code>Runnable</code></p><h4 id="Java8RunnableDemoExecutor-java"><a href="#Java8RunnableDemoExecutor-java" class="headerlink" title="Java8RunnableDemoExecutor.java"></a>Java8RunnableDemoExecutor.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.runnable;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> com.concretepage.Book;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8RunnableDemoExecutor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Book&gt; list =  Arrays.asList(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>, <span class="string">&quot;Ramayan&quot;</span>), <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>, <span class="string">&quot;Mahabharat&quot;</span>));</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span>  Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> () -&gt; list.forEach(Book::print);</span><br><span class="line">        service.execute(r1);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            Consumer&lt;Book&gt; style = (Book b) -&gt; System.out.println(<span class="string">&quot;Book Id:&quot;</span>+b.getId() + <span class="string">&quot;, Book Name:&quot;</span>+b.getName());</span><br><span class="line">            list.forEach(style);</span><br><span class="line">        &#125;;</span><br><span class="line">        service.execute(r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四、Java8-Runnable-Lambda-表达式&quot;&gt;&lt;a href=&quot;#四、Java8-Runnable-Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;四、Java8 Runnable Lambda 表达式&quot;&gt;&lt;/a&gt;四、Jav</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Lambda" scheme="https://tryrun.gitee.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>三、Java8 Collectors.joining() 详解</title>
    <link href="https://tryrun.gitee.io/posts/76994fd6.html"/>
    <id>https://tryrun.gitee.io/posts/76994fd6.html</id>
    <published>2022-05-22T10:48:03.000Z</published>
    <updated>2022-05-22T10:47:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、Java8-Collectors-joining-详解"><a href="#三、Java8-Collectors-joining-详解" class="headerlink" title="三、Java8 Collectors.joining() 详解"></a>三、Java8 Collectors.joining() 详解</h1><p>本章节我们来详细讲讲 Java 8 流 ( stream ) 收集器 ( Collectors ) 中的 <code>joining()</code> 方法。该方法会返回一个 <code>Collectors</code> 实例，方便在流收集器上的链式操作。</p><p><code>Collectors.joining()</code> 方法以遭遇元素的顺序拼接元素。我们可以传递可选的拼接字符串、前缀和后缀</p><h2 id="joinning-方法定义"><a href="#joinning-方法定义" class="headerlink" title="joinning() 方法定义"></a>joinning() 方法定义</h2><p>假设我们的流中有四个元素 <code>[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;]</code>，那么我们就可以按照以下方式来收集它们</p><h3 id="joining"><a href="#joining" class="headerlink" title="joining()"></a>joining()</h3><p><code>joinning()</code> 无参数方法会返回一个 <code>Collectors</code> 实例，并且以空字符串 ( <code>&quot;&quot;</code> ) 来拼接收集到的所有元素</p><h4 id="JoiningExample-java"><a href="#JoiningExample-java" class="headerlink" title="JoiningExample.java"></a>JoiningExample.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoiningExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>);</span><br><span class="line">       String result=  list.stream().collect(Collectors.joining());</span><br><span class="line">       System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为 <code>ABCD</code></p><h2 id="joining-CharSequence-delimiter"><a href="#joining-CharSequence-delimiter" class="headerlink" title="joining(CharSequence delimiter)"></a>joining(CharSequence delimiter)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joining(CharSequence delimiter)` 接受一个参数字符串序列作为拼接符，并返回一个 `Collectors` 实例。假如我们传递的拼接符为 `&quot;-&quot;` 。那么输出结果为 `A-B-C-D</span><br></pre></td></tr></table></figure><h4 id="JoiningExample-java-1"><a href="#JoiningExample-java-1" class="headerlink" title="JoiningExample.java"></a>JoiningExample.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoiningExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>);</span><br><span class="line">       String result=  list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">       System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为 <code>A-B-C-D</code></p><h2 id="joining-CharSequence-delimiter-CharSequence-prefix-CharSequence-suffix"><a href="#joining-CharSequence-delimiter-CharSequence-prefix-CharSequence-suffix" class="headerlink" title="joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)"></a>joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)` 方法接受一个字符串序列作为拼接符，并在拼接完成后添加传递的前缀和后缀。假如我们传递的分隔符为 `&quot;-&quot;`，前缀为 `&quot;[&quot;` ， 后缀为 `&quot;]&quot;` 。那么输出结果为 `[A-B-C-D]</span><br></pre></td></tr></table></figure><h4 id="JoiningExample-java-2"><a href="#JoiningExample-java-2" class="headerlink" title="JoiningExample.java"></a>JoiningExample.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoiningExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>);</span><br><span class="line">       String result=  list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">       System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为 <code>[A-B-C-D]</code></p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><h3 id="范例-1-：-如果流中的数据是字符串"><a href="#范例-1-：-如果流中的数据是字符串" class="headerlink" title="范例 1 ： 如果流中的数据是字符串"></a>范例 1 ： 如果流中的数据是字符串</h3><p>下面的代码演示了如何使用 <code>joinning()</code> 的三种重载方法来拼接字符串</p><h4 id="JoiningExampleWithListOfString-java"><a href="#JoiningExampleWithListOfString-java" class="headerlink" title="JoiningExampleWithListOfString.java"></a>JoiningExampleWithListOfString.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoiningExampleWithListOfString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Ram&quot;</span>,<span class="string">&quot;Shyam&quot;</span>,<span class="string">&quot;Shiv&quot;</span>,<span class="string">&quot;Mahesh&quot;</span>);</span><br><span class="line">        String result=  list.stream().collect(Collectors.joining());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(result);        </span><br><span class="line">        result=  list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>));</span><br><span class="line">        System.out.println(result);        </span><br><span class="line">    &#125;       </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RamShyamShivMahesh</span><br><span class="line">Ram,Shyam,Shiv,Mahesh</span><br><span class="line">[Ram-Shyam-Shiv-Mahesh] </span><br></pre></td></tr></table></figure><h2 id="范例-2-如果流中的数据是对象"><a href="#范例-2-如果流中的数据是对象" class="headerlink" title="范例 2: 如果流中的数据是对象"></a>范例 2: 如果流中的数据是对象</h2><p>如果流中的数据是对象，下面的代码演示了如何拼接它们。</p><p>首先，我们创建一个 <code>Person</code> 类</p><h4 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Ram&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Shyam&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Shiv&quot;</span>, <span class="number">25</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mahesh&quot;</span>, <span class="number">30</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>然后创建一个 <code>Person</code> 对象流</p><h4 id="JoiningExampleWithListOfObject-java"><a href="#JoiningExampleWithListOfObject-java" class="headerlink" title="JoiningExampleWithListOfObject.java"></a>JoiningExampleWithListOfObject.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoiningExampleWithListOfObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Person&gt; list = Person.getList();</span><br><span class="line">        System.out.println(<span class="string">&quot;--Join person name--&quot;</span>);</span><br><span class="line">        String result=  list.stream().map(p -&gt; p.getName()).collect(Collectors.joining());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().map(p -&gt; p.getName()).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().map(p -&gt; p.getName()).collect(Collectors.joining(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--Join person age--&quot;</span>);</span><br><span class="line">        result=  list.stream().map(p -&gt; String.valueOf(p.getAge())).collect(Collectors.joining());</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().map(p -&gt; String.valueOf(p.getAge())).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().map(p -&gt; String.valueOf(p.getAge())).collect(Collectors.joining(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>));</span><br><span class="line">        System.out.println(result);       </span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--Join person name-age--&quot;</span>);</span><br><span class="line">        result=  list.stream().map(p -&gt; p.getName()+<span class="string">&quot;-&quot;</span> + p.getAge()).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>));</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        result=  list.stream().map(p -&gt; p.getName()+<span class="string">&quot;-&quot;</span> + p.getAge()).collect(Collectors.joining(<span class="string">&quot;|&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>));</span><br><span class="line">        System.out.println(result);        </span><br><span class="line">    &#125;       </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--Join person name--</span><br><span class="line">RamShyamShivMahesh</span><br><span class="line">Ram|Shyam|Shiv|Mahesh</span><br><span class="line">[Ram-Shyam-Shiv-Mahesh]</span><br><span class="line">--Join person age--</span><br><span class="line">23202530</span><br><span class="line">23|20|25|30</span><br><span class="line">[23-20-25-30]</span><br><span class="line">--Join person name-age--</span><br><span class="line">Ram-23|Shyam-20|Shiv-25|Mahesh-30</span><br><span class="line">[Ram-23|Shyam-20|Shiv-25|Mahesh-30] </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三、Java8-Collectors-joining-详解&quot;&gt;&lt;a href=&quot;#三、Java8-Collectors-joining-详解&quot; class=&quot;headerlink&quot; title=&quot;三、Java8 Collectors.joining() 详解&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Collectors" scheme="https://tryrun.gitee.io/tags/Collectors/"/>
    
    <category term="Stream" scheme="https://tryrun.gitee.io/tags/Stream/"/>
    
  </entry>
  
  <entry>
    <title>二、Java8 IntStream,LongStream,DoubleStream</title>
    <link href="https://tryrun.gitee.io/posts/edc65d6d.html"/>
    <id>https://tryrun.gitee.io/posts/edc65d6d.html</id>
    <published>2022-05-21T10:46:19.000Z</published>
    <updated>2022-05-21T10:47:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、Java8-IntStream-LongStream-DoubleStream"><a href="#二、Java8-IntStream-LongStream-DoubleStream" class="headerlink" title="二、Java8 IntStream,LongStream,DoubleStream"></a>二、Java8 IntStream,LongStream,DoubleStream</h1><p>本章节我们提供一些 Java 8 中的 <code>IntStream</code>、<code>LongStream</code> 和 <code>DoubleStream</code> 使用范例。<code>IntStream</code>、<code>LongStream</code> 和 <code>DoubleStream</code> 分别表示原始 <code>int</code> 流、 原始 <code>long</code> 流 和 原始 <code>double</code> 流。</p><p>这三个原始流类提供了大量的方法用于操作流中的数据，同时提供了相应的静态方法来初始化它们自己。</p><p>这三个原始流类都在 <code>java.util.stream</code> 命名空间下。</p><h2 id="java-util-stream-IntStream"><a href="#java-util-stream-IntStream" class="headerlink" title="java.util.stream.IntStream"></a>java.util.stream.IntStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.stream.IntStream` 是一个原始整数值序列 ( sequence ) 。该流提供了许多方法可以对该流中的元素顺序执行或并行执行一些聚合操作，比如 `max()` 或 `average()</span><br></pre></td></tr></table></figure><h3 id="聚合方法"><a href="#聚合方法" class="headerlink" title="聚合方法"></a>聚合方法</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">rangeClosed(a,b)</td><td align="center">返回子序列 [a,b]，包含起始值，增长步值为 1</td></tr><tr><td align="center">range(a,b)</td><td align="center">返回子序列 [a,b)，左闭右开，意味着不包括 b</td></tr><tr><td align="center">sum</td><td align="center">计算所有元素的总和</td></tr><tr><td align="center">sorted</td><td align="center">排序元素</td></tr></tbody></table><p>这些方法使用示例如下</p><h4 id="IntStreamDemo-java"><a href="#IntStreamDemo-java" class="headerlink" title="IntStreamDemo.java"></a>IntStreamDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--Using IntStream.rangeClosed--&quot;</span>);</span><br><span class="line">        IntStream.rangeClosed(<span class="number">13</span>, <span class="number">15</span>).map(n-&gt;n*n).forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Using IntStream.range--&quot;</span>);</span><br><span class="line">        IntStream.range(<span class="number">13</span>,<span class="number">15</span>).map(n-&gt;n*n).forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Sum of range 1 to 10--&quot;</span>);</span><br><span class="line">        System.out.print(IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Sorted number--&quot;</span>);</span><br><span class="line">        IntStream.of(<span class="number">13</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>).sorted().forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--Using IntStream.rangeClosed--</span><br><span class="line">169 196 225 </span><br><span class="line">--Using IntStream.range--</span><br><span class="line">169 196 </span><br><span class="line">--Sum of range 1 to 10--</span><br><span class="line">55</span><br><span class="line">--Sorted number--</span><br><span class="line">2 4 8 13 15  </span><br></pre></td></tr></table></figure><h2 id="LongStream"><a href="#LongStream" class="headerlink" title="LongStream"></a>LongStream</h2><p><code>java.util.stream.LongStream</code> 是一个原始长整型值序列 ( sequence ) 。该流提供了许多方法可以对该流中的元素顺序执行或并行执行一些聚合操作。其实，它的使用方式和 <code>IntStream</code> 一样，因为提供的方法也一样，我们就不做展开了，直接看范例</p><h4 id="LongStreamDemo-java"><a href="#LongStreamDemo-java" class="headerlink" title="LongStreamDemo.java"></a>LongStreamDemo.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--Using LongStream.rangeClosed--&quot;</span>);</span><br><span class="line">        LongStream.rangeClosed(<span class="number">13</span>, <span class="number">15</span>).map(n-&gt;n*n).forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Using LongStream.range--&quot;</span>);</span><br><span class="line">        LongStream.range(<span class="number">13</span>,<span class="number">15</span>).map(n-&gt;n*n).forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Sum of range 1 to 10--&quot;</span>);</span><br><span class="line">        System.out.print(LongStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).sum());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Sorted number--&quot;</span>);</span><br><span class="line">        LongStream.of(<span class="number">13</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>).sorted().forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--Using LongStream.rangeClosed--</span><br><span class="line">169 196 225 </span><br><span class="line">--Using LongStream.range--</span><br><span class="line">169 196 </span><br><span class="line">--Sum of range 1 to 10--</span><br><span class="line">55</span><br><span class="line">--Sorted number--</span><br><span class="line">2 4 8 13 15 </span><br></pre></td></tr></table></figure><h2 id="DoubleStream"><a href="#DoubleStream" class="headerlink" title="DoubleStream"></a>DoubleStream</h2><p><code>java.util.stream.LongStream</code> 是一个原始双精度浮点型序列 ( sequence ) 。该流提供了许多方法可以对该流中的元素顺序执行或并行执行一些聚合操作。它的使用方式和 <code>IntStream</code> 一样，提供的方法也一样，除此之外，还额外提供了几个聚合方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">average</td><td align="center">计算平均值</td></tr><tr><td align="center">max</td><td align="center">查找最大值</td></tr></tbody></table><p>下面的代码是 DoubleStream 类的一些简单的使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.souyunku.tech.util.stream;</span><br><span class="line"><span class="keyword">import</span> java.util.function.DoublePredicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.DoubleStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--Using DoubleStream.of--&quot;</span>);</span><br><span class="line">        DoubleStream.of(<span class="number">5.33</span>,<span class="number">2.34</span>,<span class="number">5.32</span>,<span class="number">2.31</span>,<span class="number">3.51</span>).map(d-&gt;d*<span class="number">1.5</span>).forEach(s-&gt;System.out.print(s +<span class="string">&quot; &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;\n--Using DoubleStream.average--&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">val</span> <span class="operator">=</span> DoubleStream.of(<span class="number">12.1</span>,<span class="number">11.2</span>,<span class="number">13.3</span>).average().getAsDouble();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">        System.out.println(<span class="string">&quot;--Using DoubleStream.max--&quot;</span>);</span><br><span class="line">        val = DoubleStream.of(<span class="number">12.1</span>,<span class="number">11.2</span>,<span class="number">13.3</span>).max().getAsDouble();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">        System.out.println(<span class="string">&quot;--Using DoubleStream.filter--&quot;</span>);</span><br><span class="line">        <span class="type">DoublePredicate</span> <span class="variable">range</span> <span class="operator">=</span> d -&gt; d &gt; <span class="number">12.11</span> &amp;&amp; d &lt; <span class="number">12.99</span>;        </span><br><span class="line">        DoubleStream.of(<span class="number">12.1</span>,<span class="number">11.2</span>,<span class="number">12.3</span>).filter(range).forEach(d-&gt;System.out.print(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--Using DoubleStream.of--</span><br><span class="line">7、995 3.51 7.98 3.465 5.265 </span><br><span class="line">--Using DoubleStream.average--</span><br><span class="line">12、200000000000001</span><br><span class="line">--Using DoubleStream.max--</span><br><span class="line">13、3</span><br><span class="line">--Using DoubleStream.filter--</span><br><span class="line">12、3 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二、Java8-IntStream-LongStream-DoubleStream&quot;&gt;&lt;a href=&quot;#二、Java8-IntStream-LongStream-DoubleStream&quot; class=&quot;headerlink&quot; title=&quot;二、Java8 In</summary>
      
    
    
    
    <category term="Java" scheme="https://tryrun.gitee.io/categories/Java/"/>
    
    
    <category term="API" scheme="https://tryrun.gitee.io/tags/API/"/>
    
    <category term="Java8" scheme="https://tryrun.gitee.io/tags/Java8/"/>
    
    <category term="Collectors" scheme="https://tryrun.gitee.io/tags/Collectors/"/>
    
    <category term="stream" scheme="https://tryrun.gitee.io/tags/stream/"/>
    
  </entry>
  
</feed>
