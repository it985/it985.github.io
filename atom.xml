<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云遇未晚</title>
  
  <subtitle>大自然的搬运工</subtitle>
  <link href="https://hexo.tryrun.top/atom.xml" rel="self"/>
  
  <link href="https://hexo.tryrun.top/"/>
  <updated>2021-06-27T10:54:25.000Z</updated>
  <id>https://hexo.tryrun.top/</id>
  
  <author>
    <name>云少</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>专栏汇总：Java 9 新特性</title>
    <link href="https://hexo.tryrun.top/posts/f930f970.html"/>
    <id>https://hexo.tryrun.top/posts/f930f970.html</id>
    <published>2021-06-27T15:14:05.000Z</published>
    <updated>2021-06-27T10:54:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专栏汇总：Java-9-新特性"><a href="#专栏汇总：Java-9-新特性" class="headerlink" title="专栏汇总：Java 9 新特性"></a><a href="/f930f970.html">专栏汇总：Java 9 新特性</a></h1><p>Java 9 ( 又称为 jdk 1.9 ) 是 Java 编程语言开发的主要版本。它的初始版本于 2017 年 9 月21 日发布，按照今天的日期，也就是差不多一年前吧，但是，要知道，Java 10 都已经出来了…. 残废的 Java 9 ，大家还没用上，就开始过时了。</p><ul><li><a href="/posts/feb5fa71.html">二十、Java 9 新特性 – 其它特性</a>  </li><li><a href="/posts/dd5e9814.html">十九、Java 9 新特性 – CompletableFuture API ( 下 )</a>  </li><li><a href="/posts/42a3f741.html">十八、Java 9 新特性 – CompletableFuture API ( 中 )</a>  </li><li><a href="/posts/ec356257.html">十七、Java 9 新特性 – CompletableFuture API ( 上 )</a>  </li><li><a href="/posts/d99dd0f2.html">十六、Java 9 新特性 – 多分辨率图像 API</a>  </li><li><a href="/posts/113235.html">十五、Java 9 新特性 – Option 类</a>  </li><li><a href="/posts/a59e7726.html">十四、Java 9 新特性 – 内部类的方块操作符</a>  </li><li><a href="/posts/705c0273.html">十三、Java 9 新特性 – 增强 @Deprecated 注解</a>  </li><li><a href="/posts/1aa68387.html">十二、Java 9 新特性 – try-with-resources 语句</a>  </li><li><a href="/posts/b8090d7d.html">十一、Java 9 新特性 – 增强流 ( Stream ) API</a>  </li><li><a href="/posts/5baf7017.html">十、Java 9 新特性 – 改进进程管理 API</a>  </li><li><a href="/posts/952ce7cb.html">九、Java 9 新特性 – 接口 ( interface ) 的私有方法</a>  </li><li><a href="/posts/556a0153.html">八、Java 9 新特性 – 集合不可变实例工厂方法</a>  </li><li><a href="/posts/8ef68e69.html">七、Java 9 新特性 – 多版本共存 JAR</a>  </li><li><a href="/posts/e2c9ada7.html">六、Java 9 新特性 – 改进 JavaDocs</a>  </li><li><a href="/posts/ef7247a8.html">五、Java 9 新特性 – REPL ( JShell )</a>  </li><li><a href="/posts/eaa7eb1f.html">四、Java 9 新特性 – 模块化</a>  </li><li><a href="/posts/38094a1.html">三、Java 9 新特性 – 环境配置</a>  </li><li><a href="/posts/f68de2e9.html">二、Java 9 新特性 – 特性简介</a>  </li><li><a href="/posts/1b72d0f2.html">一、Java 9 新特性 – 介绍</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专栏汇总：Java-9-新特性&quot;&gt;&lt;a href=&quot;#专栏汇总：Java-9-新特性&quot; class=&quot;headerlink&quot; title=&quot;专栏汇总：Java 9 新特性&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/f930f970.html&quot;&gt;专栏汇总：Java 9 新特性&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://hexo.tryrun.top/categories/Java/"/>
    
    
    <category term="专栏" scheme="https://hexo.tryrun.top/tags/%E4%B8%93%E6%A0%8F/"/>
    
    <category term="Java9" scheme="https://hexo.tryrun.top/tags/Java9/"/>
    
  </entry>
  
  <entry>
    <title>专栏汇总：Java8 新特性</title>
    <link href="https://hexo.tryrun.top/posts/b4cd1e40.html"/>
    <id>https://hexo.tryrun.top/posts/b4cd1e40.html</id>
    <published>2021-06-08T09:51:16.000Z</published>
    <updated>2021-06-08T09:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专栏汇总：Java8-新特性"><a href="#专栏汇总：Java8-新特性" class="headerlink" title="专栏汇总：Java8 新特性"></a><a href="/b4cd1e40.html">专栏汇总：Java8 新特性</a></h1><p>Java 更新的很快，但我的知识储备还停留在 Java 7 的年代…是我们落伍了，还是这个社会不需要我们这么超前。但如果有一天，你自己能做主了，你会上 最新版本 吗？ 不管如何，先把 Java8 学习了</p><ul><li><a href="/posts/783096c.html">二十、Java 8 函数接口 （ Functional interface ）</a>  </li><li><a href="/posts/f4456923.html">十九、Java 8 流 Stream ( 下 )</a>  </li><li><a href="/posts/62e87c35.html">十八、Java 8 流 Stream ( 上 )</a>  </li><li><a href="/posts/1054668a.html">十七、Java 8 新日期时间 API ( 下 ) – 格式化</a>  </li><li><a href="/posts/65f9a50c.html">十六、Java 8 新日期时间 API ( 中 ) – 时区日期时间</a>  </li><li><a href="/posts/a5516f38.html">十五、Java 8 新日期时间 API ( 上 ) – 本地日期时间</a>  </li><li><a href="/posts/9a637408.html">十四、Java 8 Nashorn JavaScript</a>  </li><li><a href="/posts/3b70afd5.html">十三、Java 8 可选值 java.util.Optional 类</a>  </li><li><a href="/posts/8d0e4be4.html">十二、Java 8 集合遍历 forEach() 方法</a>  </li><li><a href="/posts/e3c8b1a4.html">十一、Java 8 接口静态方法</a>  </li><li><a href="/posts/efaf0a50.html">十、Java 8 接口 ( interface ) 默认方法</a>  </li><li><a href="/posts/6fd40a1c.html">八、Java 8 Lambda 表达式 （ 下 ）范例</a>  </li><li><a href="/posts/4d9ed831.html">九、Java 8 方法引用</a>  </li><li><a href="/posts/5fb1bf39.html">七、Java 8 Lambda 表达式 （ 中 ）- 外部参数</a>  </li><li><a href="/posts/2bc5fe4b.html">六、Java 8 Lambda 表达式 （ 上 ）- 简介</a>  </li><li><a href="/posts/d747711e.html">五、Java 8 java.util.Base64 编码解码</a>  </li><li><a href="/posts/2063f33b.html">四、Java8 Runnable Lambda 表达式</a>  </li><li><a href="/posts/76994fd6.html">三、Java8 Collectors.joining() 详解</a>  </li><li><a href="/posts/edc65d6d.html">二、Java8 IntStream,LongStream,DoubleStream</a>  </li><li><a href="/posts/c2245ef4.html">一、Java8 收集器 – java.util.stream.Collectors</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专栏汇总：Java8-新特性&quot;&gt;&lt;a href=&quot;#专栏汇总：Java8-新特性&quot; class=&quot;headerlink&quot; title=&quot;专栏汇总：Java8 新特性&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/b4cd1e40.html&quot;&gt;专栏汇总：Java8 新特性&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://hexo.tryrun.top/categories/Java/"/>
    
    
    <category term="专栏" scheme="https://hexo.tryrun.top/tags/%E4%B8%93%E6%A0%8F/"/>
    
    <category term="Java8" scheme="https://hexo.tryrun.top/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题魔改备忘录</title>
    <link href="https://hexo.tryrun.top/posts/3ec6e747.html"/>
    <id>https://hexo.tryrun.top/posts/3ec6e747.html</id>
    <published>2021-05-18T09:43:42.000Z</published>
    <updated>2021-05-18T09:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo主题魔改备忘录"><a href="#hexo主题魔改备忘录" class="headerlink" title="hexo主题魔改备忘录"></a>hexo主题魔改备忘录</h1><blockquote><p>  本文记录博主的魔改<code>hexo-anzhiyu</code>主题，以便后期的升级和维护</p></blockquote><h2 id="js获取用户IP和地理位置信息、UA并展示"><a href="#js获取用户IP和地理位置信息、UA并展示" class="headerlink" title="js获取用户IP和地理位置信息、UA并展示"></a>js获取用户IP和地理位置信息、UA并展示</h2><blockquote><p>  本教程来自 <a href="https://blog.zhheo.com/p/70bd84fc.html">张洪Heo</a></p></blockquote><p>这篇文章介绍了如何使用JavaScript获取用户IP和地理位置信息以及UA，并展示在网页上。这个方法可以用于隐私协议等场合，让用户了解自己被暴露的信息。文章提供了代码示例和安装方式。</p><p>想要在隐私协议里面添加展示用户自己会被暴露的信息，研究了一个获取用户信息并展示的方法，利用了<a href="https://www.ipip.net/?origin=EN">ipip.net</a>来获取用户的ip和地理信息。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="/privacy/">Demo</a></p><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><h4 id="页面引入js"><a href="#页面引入js" class="headerlink" title="页面引入js"></a>页面引入js</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn1.tianli0.top/gh/zhheo/JS-Heo@main/privacy/privacy.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><script  type="text/javascript" src="/js/1.js?1"></script><h4 id="页面引入markdown"><a href="#页面引入markdown" class="headerlink" title="页面引入markdown"></a>页面引入markdown</h4><table><thead><tr><th>类型<div style="width:100px"></th><th>信息</th></tr></thead><tbody><tr><td>IP地址</td><td><div id="userAgentIp"></div></td></tr><tr><td>国家</td><td><div id="userAgentCountry"></div></td></tr><tr><td>省份</td><td><div id="userAgentRegion"></div></td></tr><tr><td>城市</td><td><div id="userAgentCity"></div></td></tr><tr><td>运营商</td><td><div id="userAgentIsp"></div></td></tr><tr><td>设备</td><td><div id="userAgentDevice"></div></td></tr></tbody></table><script type="text/javascript">getIpInfo()</script><h2 id="Hexo-博客文章统计图"><a href="#Hexo-博客文章统计图" class="headerlink" title="Hexo 博客文章统计图"></a>Hexo 博客文章统计图</h2><blockquote><p>  本教程来自 <a href="https://blog.eurkon.com/post/1213ef82.html">eurkon</a></p></blockquote><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>在 <code>[Blogroot]\source\</code> 目录下新建 <code>charts</code> 文件夹，并在新建的 <code>charts</code> 文件夹下新建 <code>index.md</code> 文件，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章统计</span><br><span class="line">date: 2020-03-01 08:00:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="引入-ECharts-js"><a href="#引入-ECharts-js" class="headerlink" title="引入 ECharts.js"></a>引入 ECharts.js</h3><h4 id="页面引入"><a href="#页面引入" class="headerlink" title="页面引入"></a>页面引入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h4><p>以 anzhiyu主题为例，可以在 <code>[Blogroot]\_config.anzhiyu.yml</code> 的 <code>inject</code> 配置项中引入 <code>echart.js</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://npm.elemecdn.com/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文章统计代码"><a href="#文章统计代码" class="headerlink" title="文章统计代码"></a>文章统计代码</h3><p>以 anzhiyu主题为例，可以在 [Blogroot]\themes\anzhiyu\scripts\helpers\ 目录下新建 charts.js 文件，然后添加以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(locals)</span><br><span class="line">  <span class="keyword">const</span> post = $(<span class="string">&#x27;#posts-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> tag = $(<span class="string">&#x27;#tags-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> category = $(<span class="string">&#x27;#categories-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> htmlEncode = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> || tag.<span class="property">length</span> &gt; <span class="number">0</span> || category.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#postsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (post.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      post.<span class="title function_">after</span>(<span class="title function_">postsChart</span>(post.<span class="title function_">attr</span>(<span class="string">&#x27;data-start&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#tagsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      tag.<span class="title function_">after</span>(<span class="title function_">tagsChart</span>(tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-length&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#categoriesChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (category.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      category.<span class="title function_">after</span>(<span class="title function_">categoriesChart</span>(category.<span class="title function_">attr</span>(<span class="string">&#x27;data-parent&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (htmlEncode) &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/&amp;amp;#/g</span>, <span class="string">&#x27;&amp;#&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> locals</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postsChart</span> (startMonth) &#123;</span><br><span class="line">  <span class="keyword">const</span> startDate = <span class="title function_">moment</span>(startMonth || <span class="string">&#x27;2020-01&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> endDate = <span class="title function_">moment</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> monthMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> dayTime = <span class="number">3600</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> time = startDate; time &lt;= endDate; time += dayTime) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">post</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = post.<span class="property">date</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, monthMap.<span class="title function_">get</span>(month) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> monthArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">keys</span>()])</span><br><span class="line">  <span class="keyword">const</span> monthValueArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">values</span>()])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;postsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var postsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章发布统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;axis&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;日期&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        boundaryGap: false,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthArr&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;line&#x27;,</span></span><br><span class="line"><span class="string">        smooth: true,</span></span><br><span class="line"><span class="string">        lineStyle: &#123;</span></span><br><span class="line"><span class="string">            width: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        showSymbol: false,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        areaStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;, &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthValueArr&#125;</span>,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    postsChart.setOption(postsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      postsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    postsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (event.componentType === &#x27;series&#x27;) window.location.href = &#x27;/archives/&#x27; + event.name.replace(&#x27;-&#x27;, &#x27;/&#x27;);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tagsChart</span> (len) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagArr = []</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;tags&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">tag</span>) &#123;</span><br><span class="line">    tagArr.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: tag.<span class="property">name</span>, <span class="attr">value</span>: tag.<span class="property">length</span>, <span class="attr">path</span>: tag.<span class="property">path</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  tagArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(tagArr.<span class="property">length</span>, len) || tagArr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> tagNameArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataLength; i++) &#123;</span><br><span class="line">    tagNameArr.<span class="title function_">push</span>(tagArr[i].<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tagNameArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagNameArr)</span><br><span class="line">  <span class="keyword">const</span> tagArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagArr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;tagsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var tagsChart = echarts.init(document.getElementById(&#x27;tags-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var tagsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;Top <span class="subst">$&#123;dataLength&#125;</span> 标签统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;标签&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          interval: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagNameArrJson&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;bar&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderRadius: [5, 5, 0, 0],</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        emphasis: &#123;</span></span><br><span class="line"><span class="string">          itemStyle: &#123;</span></span><br><span class="line"><span class="string">            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">              offset: 0,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(128, 255, 195)&#x27;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              offset: 1,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(1, 211, 255)&#x27;</span></span><br><span class="line"><span class="string">            &#125;])</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    tagsChart.setOption(tagsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      tagsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    tagsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoriesChart</span> (dataParent) &#123;</span><br><span class="line">  <span class="keyword">const</span> categoryArr = []</span><br><span class="line">  <span class="keyword">let</span> categoryParentFlag = <span class="literal">false</span></span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;categories&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">parent</span>) categoryParentFlag = <span class="literal">true</span></span><br><span class="line">    categoryArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: category.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">value</span>: category.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">path</span>: category.<span class="property">path</span>,</span><br><span class="line">      <span class="attr">id</span>: category.<span class="property">_id</span>,</span><br><span class="line">      <span class="attr">parentId</span>: category.<span class="property">parent</span> || <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  categoryParentFlag = categoryParentFlag &amp;&amp; dataParent === <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  categoryArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">translateListToTree</span> (data, parent) &#123;</span><br><span class="line">    <span class="keyword">let</span> tree = []</span><br><span class="line">    <span class="keyword">let</span> temp</span><br><span class="line">    data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[index].<span class="property">parentId</span> == parent) &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = data[index];</span><br><span class="line">        temp = <span class="title function_">translateListToTree</span>(data, data[index].<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          obj.<span class="property">children</span> = temp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tree.<span class="title function_">indexOf</span>())</span><br><span class="line">          tree.<span class="title function_">push</span>(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> categoryNameJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123; <span class="keyword">return</span> category.<span class="property">name</span> &#125;))</span><br><span class="line">  <span class="keyword">const</span> categoryArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr)</span><br><span class="line">  <span class="keyword">const</span> categoryArrParentJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">translateListToTree</span>(categoryArr, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;categoriesChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var categoriesChart = echarts.init(document.getElementById(&#x27;categories-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var categoryParentFlag = <span class="subst">$&#123;categoryParentFlag&#125;</span></span></span><br><span class="line"><span class="string">    var categoriesOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章分类统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        top: &#x27;bottom&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryNameJson&#125;</span>,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;item&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: []</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    categoriesOption.series.push(</span></span><br><span class="line"><span class="string">      categoryParentFlag ? </span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        nodeClick :false,</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;sunburst&#x27;,</span></span><br><span class="line"><span class="string">        radius: [&#x27;15%&#x27;, &#x27;90%&#x27;],</span></span><br><span class="line"><span class="string">        center: [&#x27;50%&#x27;, &#x27;55%&#x27;],</span></span><br><span class="line"><span class="string">        sort: &#x27;desc&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrParentJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderColor: &#x27;#fff&#x27;,</span></span><br><span class="line"><span class="string">          borderWidth: 2,</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            focus: &#x27;ancestor&#x27;,</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      :</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;pie&#x27;,</span></span><br><span class="line"><span class="string">        radius: [30, 80],</span></span><br><span class="line"><span class="string">        roseType: &#x27;area&#x27;,</span></span><br><span class="line"><span class="string">        label: &#123;</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          formatter: &#x27;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    categoriesChart.setOption(categoriesOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      categoriesChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    categoriesChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if(event.data.path) window.location.href = &#x27;/&#x27; + event.data.path;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用统计图"><a href="#使用统计图" class="headerlink" title="使用统计图"></a>使用统计图</h3><p>在上文新建的 <code>[Blogroot]\source\charts\index.md</code> 文件中添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章发布时间统计图 --&gt;</span><br><span class="line">&lt;div id=&quot;posts-chart&quot; data-start=&quot;2021-01&quot; style=&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 文章标签统计图 --&gt;</span><br><span class="line">&lt;div id=&quot;tags-chart&quot; data-length=&quot;10&quot; style=&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 文章分类统计图 --&gt;</span><br><span class="line">&lt;div id=&quot;categories-chart&quot; data-parent=&quot;true&quot; style=&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="藏宝阁页面的实现"><a href="#藏宝阁页面的实现" class="headerlink" title="藏宝阁页面的实现"></a>藏宝阁页面的实现</h2><blockquote><p>  本教程来自 <a href="https://blog.leonus.cn/2023/collectPage.html">Leonus</a></p></blockquote><h3 id="1-修改page-pug"><a href="#1-修改page-pug" class="headerlink" title="1.修改page.pug"></a>1.修改page.pug</h3><p>在<code>[blogRoot]\themes\anzhiyu\layout\page.pug</code>中添加如下代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;tags&#x27;</span><br><span class="line">  include includes/page/tags.pug</span><br><span class="line">when &#x27;link&#x27;</span><br><span class="line">  include includes/page/flink.pug</span><br><span class="line">when &#x27;categories&#x27;</span><br><span class="line">  include includes/page/categories.pug</span><br><span class="line"><span class="addition">+when &#x27;collect&#x27;</span></span><br><span class="line"><span class="addition">+  include includes/page/collect.pug</span></span><br><span class="line">default</span><br><span class="line">  include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><blockquote><p>   本教程来自 <a href="https://blog.leonus.cn/2023/collectPage.html">Leonus</a></p></blockquote><p>在<code>[blogRoot]\themes\anzhiyu\layout\includes\page</code>下新建collect.pug文件并粘贴如下代码：<br>（样式可能需要根据自己的页面进行微调）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#article-container</span><br><span class="line">  .collect</span><br><span class="line">    - let collectPageContent = page.content</span><br><span class="line">    if site.data.collect</span><br><span class="line">      - let result = &quot;&quot;</span><br><span class="line">      each i in site.data.collect</span><br><span class="line">        - let className = i.class_name ? `&lt;h2 $&#123;i.class_desc?&#x27;&#x27;:&#x27;style=&quot;margin-bottom:12px&quot;&#x27;&#125;&gt;$&#123;i.class_name&#125; ($&#123;i.link_list.length&#125;)&lt;/h2&gt;` : &quot;&quot;</span><br><span class="line">        - let classDesc = i.class_desc ? `&lt;div class=&quot;collect-desc&quot;&gt;$&#123;i.class_desc&#125;&lt;/div&gt;` : &quot;&quot;</span><br><span class="line">        - let listResult = &quot;&quot;</span><br><span class="line">        each j in i.link_list</span><br><span class="line">          - </span><br><span class="line">            listResult += `</span><br><span class="line">              &lt;div title=&quot;$&#123;j.name&#125;&quot; referrerPolicy=&quot;no-referrer&quot; class=&quot;collect_box&quot; style=&quot;$&#123;j.img?`background-image: url($&#123;j.img&#125;)`:&#x27;background-color: #333;&#x27;&#125;&quot;&gt;</span><br><span class="line">                  &lt;div class=&quot;collect_top&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;$&#123;j.icon?j.icon:&#x27;fa-solid fa-film&#x27;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    &lt;span&gt;$&#123;j.tip?j.tip:&#x27;电影&#x27;&#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;div class=&quot;collect_content&quot;&gt;</span><br><span class="line">                    &lt;span&gt;$&#123;j.name?j.name:&#x27;未知&#x27;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;div&gt;$&#123;j.score?toStar(j.score):toStar(0)&#125;&lt;/div&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              `</span><br><span class="line">          -</span><br><span class="line">        - result += `$&#123;className&#125;$&#123;classDesc&#125; &lt;div class=&quot;collect-list&quot;&gt;$&#123;listResult&#125;&lt;/div&gt;`</span><br><span class="line">      - collectPageContent = collectPageContent + result</span><br><span class="line">    != collectPageContent</span><br></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span></span><br><span class="line">  <span class="selector-tag">b</span> 一些收藏</span><br><span class="line"><span class="selector-class">.hexo-collect-show</span></span><br><span class="line">  - let gamesPageContent = page<span class="selector-class">.content</span></span><br><span class="line">  <span class="keyword">if</span> site<span class="selector-class">.data</span><span class="selector-class">.games</span></span><br><span class="line">    - let result = <span class="string">&quot;&quot;</span></span><br><span class="line">    each <span class="selector-tag">i</span> <span class="keyword">in</span> site<span class="selector-class">.data</span><span class="selector-class">.games</span></span><br><span class="line">      - let className = <span class="selector-tag">i</span><span class="selector-class">.class_name</span> ? `&lt;<span class="selector-tag">h2</span> $&#123;<span class="selector-tag">i</span>.class_desc?<span class="string">&#x27;&#x27;</span>:<span class="string">&#x27;style=&quot;margin-bottom:12px&quot;&#x27;</span>&#125;&gt;$&#123;<span class="selector-tag">i</span>.class_name&#125;&lt;/h2&gt;` : <span class="string">&quot;&quot;</span></span><br><span class="line">      - let classDesc = <span class="selector-tag">i</span><span class="selector-class">.class_desc</span> ? `&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect-desc&quot;</span>&gt;$&#123;<span class="selector-tag">i</span>.class_desc&#125;&lt;/div&gt;` : <span class="string">&quot;&quot;</span></span><br><span class="line">      - let listResult = <span class="string">&quot;&quot;</span></span><br><span class="line">      each item <span class="keyword">in</span> <span class="selector-tag">i</span><span class="selector-class">.link_list</span></span><br><span class="line">        -</span><br><span class="line">          listResult += `</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-item&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-picture&quot;</span> title=<span class="string">&quot;$&#123;item.name&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">a</span> target=<span class="string">&quot;_blank&quot;</span> href=<span class="string">&quot;$&#123;item.link&#125;&quot;</span> rel=<span class="string">&quot;external nofollow&quot;</span>&gt;</span><br><span class="line">                  &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=<span class="string">&quot;$&#123;item.cover&#125;&quot;</span> data-src=<span class="string">&quot;$&#123;item.cover&#125;&quot;</span> referrerpolicy=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-info&quot;</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-title&quot;</span> title=<span class="string">&quot;$&#123;item.name&#125;&quot;</span>&gt;</span><br><span class="line">                  &lt;<span class="selector-tag">a</span> target=<span class="string">&quot;_blank&quot;</span> href=<span class="string">&quot;$&#123;item.link&#125;&quot;</span> rel=<span class="string">&quot;external nofollow&quot;</span>&gt;$&#123;item.name&#125;&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;bber-reply&quot;</span> onclick=<span class="string">&quot;rm.rightMenuCommentText(&#x27;$&#123;item.name&#125;&#x27;)&quot;</span>&gt;</span><br><span class="line">                  &lt;<span class="selector-tag">i</span> class=<span class="string">&quot;anzhiyufont anzhiyu-icon-message&quot;</span> style=<span class="string">&quot;cursor:pointer;float:right;right:10px;bottom:1px;position:absolute;&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-meta&quot;</span>&gt;$&#123;item.date_grade&#125;&lt;/div&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;hexo-collect-comments&quot;</span>&gt;$&#123;item.comment?item<span class="selector-class">.comment</span>:<span class="string">&#x27;暂无评论&#x27;</span>&#125;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          `</span><br><span class="line">        -</span><br><span class="line">      - result += `$&#123;className&#125;$&#123;classDesc&#125; &lt;<span class="selector-tag">div</span> id=<span class="string">&quot;hexo-collect-item3&quot;</span>&gt;$&#123;listResult&#125;&lt;/div&gt;`</span><br><span class="line">    - gamesPageContent = gamesPageContent + result</span><br><span class="line">  != gamesPageContent</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span></span><br><span class="line">  <span class="selector-tag">b</span> 那些年看的视频</span><br><span class="line"><span class="selector-class">.collect</span></span><br><span class="line">  - let collectPageContent = page<span class="selector-class">.content</span></span><br><span class="line">  <span class="keyword">if</span> site<span class="selector-class">.data</span><span class="selector-class">.collect</span></span><br><span class="line">    - let result = <span class="string">&quot;&quot;</span></span><br><span class="line">    each <span class="selector-tag">i</span> <span class="keyword">in</span> site<span class="selector-class">.data</span><span class="selector-class">.collect</span></span><br><span class="line">      - let className = <span class="selector-tag">i</span><span class="selector-class">.class_name</span> ? `&lt;<span class="selector-tag">h2</span> $&#123;<span class="selector-tag">i</span>.class_desc?<span class="string">&#x27;&#x27;</span>:<span class="string">&#x27;style=&quot;margin-bottom:12px&quot;&#x27;</span>&#125;&gt;$&#123;<span class="selector-tag">i</span>.class_name&#125;&lt;/h2&gt;` : <span class="string">&quot;&quot;</span></span><br><span class="line">      - let classDesc = <span class="selector-tag">i</span><span class="selector-class">.class_desc</span> ? `&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect-desc&quot;</span>&gt;$&#123;<span class="selector-tag">i</span>.class_desc&#125;&lt;/div&gt;` : <span class="string">&quot;&quot;</span></span><br><span class="line">      - let listResult = <span class="string">&quot;&quot;</span></span><br><span class="line">      each j <span class="keyword">in</span> <span class="selector-tag">i</span><span class="selector-class">.link_list</span></span><br><span class="line">        -</span><br><span class="line">          listResult += `</span><br><span class="line">            &lt;<span class="selector-tag">div</span> title=<span class="string">&quot;$&#123;j.name&#125;&quot;</span> referrerPolicy=<span class="string">&quot;no-referrer&quot;</span> class=<span class="string">&quot;collect_box&quot;</span> style=<span class="string">&quot;$&#123;j.img?`background-image: url($&#123;j.img&#125;)`:&#x27;background-color: #333;&#x27;&#125;&quot;</span>&gt;</span><br><span class="line">              &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect-div&quot;</span>&gt;&lt;<span class="selector-tag">a</span> target=<span class="string">&quot;_blank&quot;</span> href=<span class="string">&quot;$&#123;j.link&#125;&quot;</span> rel=<span class="string">&quot;external nofollow&quot;</span>&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect_top&quot;</span>&gt;</span><br><span class="line">                  &lt;<span class="selector-tag">i</span> class=<span class="string">&quot;$&#123;j.icon?j.icon:&#x27;fa-solid fa-film&#x27;&#125;&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;j.tip?j<span class="selector-class">.tip</span>:<span class="string">&#x27;电影&#x27;</span>&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect_content&quot;</span>&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;j.name?j<span class="selector-class">.name</span>:<span class="string">&#x27;未知&#x27;</span>&#125;&lt;/span&gt;</span><br><span class="line">                  &lt;div&gt;$&#123;j.score?<span class="built_in">toStar</span>(j.score):<span class="built_in">toStar</span>(<span class="number">0</span>)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          `</span><br><span class="line">        -</span><br><span class="line">      - result += `$&#123;className&#125;$&#123;classDesc&#125; &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;collect-list&quot;</span>&gt;$&#123;listResult&#125;&lt;/div&gt;`</span><br><span class="line">    - collectPageContent = collectPageContent + result</span><br><span class="line">  != collectPageContent</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><h4 id="方法一：新建collect-styl"><a href="#方法一：新建collect-styl" class="headerlink" title="方法一：新建collect.styl"></a>方法一：新建collect.styl</h4><p>在<code>[blogRoot]\themes\anzhiyu\source\css\_page</code>下新建collect.styl文件并粘贴如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.collect</span></span><br><span class="line">  <span class="selector-tag">h2</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">  <span class="selector-class">.collect-desc</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span></span><br><span class="line">  <span class="selector-class">.collect-list</span></span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">18px</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap</span><br><span class="line">    <span class="selector-class">.collect_box</span></span><br><span class="line">      <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">6</span> - <span class="number">15px</span>)</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">var</span>(--w)</span><br><span class="line">      <span class="attribute">display</span>: flex</span><br><span class="line">      <span class="attribute">justify-content</span>: space-between</span><br><span class="line">      <span class="attribute">flex-direction</span>: column</span><br><span class="line">      <span class="attribute">background-position</span>: center</span><br><span class="line">      <span class="attribute">background-size</span>: cover</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">12px</span></span><br><span class="line">      <span class="attribute">position</span>: relative</span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">      <span class="attribute">transition</span>: .<span class="number">5s</span></span><br><span class="line">      <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="attribute">position</span>: absolute</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>)</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">0</span></span><br><span class="line">        <span class="attribute">transition</span>: .<span class="number">5s</span></span><br><span class="line">      <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>)</span><br><span class="line">        <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>)</span><br><span class="line">      <span class="selector-class">.collect_top</span></span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">        <span class="attribute">align-items</span>: center</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between</span><br><span class="line">      <span class="selector-class">.collect_content</span></span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">86%</span></span><br><span class="line">        <span class="selector-tag">span</span></span><br><span class="line">          <span class="attribute">display</span>: block</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">18px</span></span><br><span class="line">          <span class="attribute">font-weight</span>: bold</span><br><span class="line">          <span class="attribute">white-space</span>: nowrap</span><br><span class="line">          <span class="attribute">overflow</span>: hidden</span><br><span class="line">          <span class="attribute">text-overflow</span>: ellipsis</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span></span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span> <span class="meta">!important</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>)</span><br><span class="line">      <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>)</span><br><span class="line">    <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span></span><br><span class="line">  <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1100px</span>)</span><br><span class="line">    gap: <span class="number">15px</span></span><br><span class="line">    .collect_box</span><br><span class="line">      --w: calc(<span class="number">20%</span> - <span class="number">12px</span>)</span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>)</span><br><span class="line">    gap: <span class="number">16px</span></span><br><span class="line">    .collect_box</span><br><span class="line">      --w: calc(<span class="number">25%</span> - <span class="number">12px</span>)</span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)</span><br><span class="line">    gap: <span class="number">15px</span></span><br><span class="line">    .collect_box</span><br><span class="line">      --w: calc(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">10px</span>)</span><br><span class="line">  @media screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)</span><br><span class="line">    gap: <span class="number">16px</span></span><br><span class="line">    .collect_box</span><br><span class="line">      --w: calc(<span class="number">50%</span> - <span class="number">8px</span>)</span><br></pre></td></tr></table></figure><h4 id="方法二：自定义css文件"><a href="#方法二：自定义css文件" class="headerlink" title="方法二：自定义css文件"></a>方法二：自定义css文件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 藏宝阁 */</span></span><br><span class="line"><span class="selector-class">.collect-item-content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">12px</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e3e8f7</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.collect-item-content-item</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">12px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.collect-item-content-item</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span> <span class="number">16px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-name</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">width</span>: fit-content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-specification</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c3c43cc</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c3c43cc</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.collect-item-content-item-link</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#9999992b</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.collect-item-content-item-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#425aef</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span><span class="selector-class">.collect-item-title</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-description</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c3c43cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-cover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f1f3f8</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.collect-item-content-item-image</span> &#123;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#collect</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect-item-content-item-toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bber-reply</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除页面白色底框 */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[data-type=collect]</span> <span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-desc</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect_box</span> <span class="selector-class">.collect-div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">  <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">6</span> - <span class="number">15px</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">var</span>(--w);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> <span class="selector-class">.collect_top</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> <span class="selector-class">.collect_content</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">86%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> <span class="selector-class">.collect_content</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ddd</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1100px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> &#123;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">    <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">20%</span> - <span class="number">12px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> &#123;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">    <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">25%</span> - <span class="number">12px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> &#123;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">    <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">10px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> &#123;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.collect</span> <span class="selector-class">.collect-list</span> <span class="selector-class">.collect_box</span> &#123;</span><br><span class="line">    <span class="attr">--w</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">8px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-item</span> &#123;</span><br><span class="line">  <span class="comment">/* border-bottom: none !important; */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--icedream-card-bg);</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--icedream-shadow-border);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">160px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> <span class="number">#ddd</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hexo-collect-item3</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-item</span> <span class="selector-class">.hexo-collect-picture</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-item</span> <span class="selector-class">.hexo-collect-picture</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-tabs</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-title</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-title</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2b94b</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-pagination</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-title</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-info</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">210px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-meta</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--Jay-secondtext);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.05</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-comments</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span> <span class="meta">!important</span>;</span><br><span class="line">  -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-picture</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hexo-collect-picture</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: auto\<span class="number">9</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* @media screen and (min-width: 1300px) &#123;</span></span><br><span class="line"><span class="comment">  .hexo-collect-item &#123;</span></span><br><span class="line"><span class="comment">      width: 32%;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">        <span class="selector-class">.hexo-collect-item</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.hexo-collect-picture</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* top: 10px; */</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* .hexo-collect-info &#123;</span></span><br><span class="line"><span class="comment">        padding-left: 120px;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.hexo-collect-meta</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.hexo-collect-comments</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="增加辅助函数"><a href="#增加辅助函数" class="headerlink" title="增加辅助函数"></a>增加辅助函数</h3><p>在<code>[blogRoot]themes\anzhiyu\scripts\helpers\page.js</code>的合适位置粘贴如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 藏宝阁星星</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">helper</span>.<span class="title function_">register</span>(<span class="string">&#x27;toStar&#x27;</span>, <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(num); i++) &#123; tmp += <span class="string">&#x27;&lt;i class=&quot;fa-solid fa-star&quot;&gt;&lt;/i&gt;&#x27;</span> &#125; <span class="comment">// 整数部分加 实心星星</span></span><br><span class="line">    <span class="keyword">if</span> (num - <span class="title class_">Math</span>.<span class="title function_">floor</span>(num) != <span class="number">0</span>) tmp += <span class="string">&#x27;&lt;i class=&quot;fa-solid fa-star-half-alt&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="comment">// 小数部分转成 半星</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span> - <span class="title class_">Math</span>.<span class="title function_">ceil</span>(num); i++) &#123; tmp += <span class="string">&#x27;&lt;i class=&quot;fa-regular fa-star&quot;&gt;&lt;/i&gt;&#x27;</span> &#125; <span class="comment">// 不够5个补 空心星星</span></span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="新建collect-yml"><a href="#新建collect-yml" class="headerlink" title="新建collect.yml"></a>新建collect.yml</h3><p>在<code>[blogRoot]\source\_data</code>下面新建collect.yml，弄过友链的应该都很熟悉。<br>按照如下格式配置即可(很像友链格式)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">📺</span> <span class="string">电影</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="comment">#分类描述</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">让子弹飞</span> <span class="comment">#名字</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://t1.szrtcpa.com/upload/vod/20220313-27/fa8e1f40e62df7aa609cba34f5ee8a25.jpg</span> <span class="comment">#图片链接</span></span><br><span class="line">      <span class="attr">score:</span> <span class="number">5</span> <span class="comment"># 1-5星</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fa-solid</span> <span class="string">fa-film</span> <span class="comment">#左上角图标</span></span><br><span class="line">      <span class="attr">tip:</span> <span class="string">电影</span> <span class="comment"># 右上角文字</span></span><br></pre></td></tr></table></figure><h2 id="太极图loading分享（纯css）"><a href="#太极图loading分享（纯css）" class="headerlink" title="太极图loading分享（纯css）"></a>太极图loading分享（纯css）</h2><blockquote><p>  此教程来源<a href="https://hcer.top/posts/4e2b.html">太极图loading分享（纯css） | 冰刻无痕 (hcer.top)</a></p></blockquote><h3 id="更改pug文件"><a href="#更改pug文件" class="headerlink" title="更改pug文件"></a>更改pug文件</h3><p>找到<code>[blog]\themes\anzhiyu\layout\includes\loading\</code>下的<strong>fullpage-loading.pug</strong>文件，进行以下更改。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#loading-box(onclick=&#x27;document.getElementById(&quot;loading-box&quot;).classList.add(&quot;loaded&quot;)&#x27;)</span><br><span class="line">  .loading-left-bg</span><br><span class="line"><span class="addition">+  .loading-right-bg</span></span><br><span class="line"><span class="addition">+  .loading-bg</span></span><br><span class="line"><span class="deletion">-     - img.loading-img(alt=&quot;加载头像&quot; class=&#x27;nolazyload&#x27; src=loading_img ? url_for(loading_img) : &quot;data:image。。。。&quot;)</span></span><br><span class="line">    .loading-image-dot</span><br><span class="line">      //- 加载的字体，可以不要</span><br><span class="line"><span class="addition">+     .loading-font loading... </span></span><br><span class="line">    #loading-percentage</span><br></pre></td></tr></table></figure><h3 id="修改style文件"><a href="#修改style文件" class="headerlink" title="修改style文件"></a>修改style文件</h3><p>找到<code>[blog]\themes\anzhiyu\source\css\_global\</code>下的<code>loading.styl</code>文件进行修改。</p><blockquote><p>这里用的是最新版本<strong>1.4.0</strong>版本的主题，和旧版本存放路径不一样，旧版本存放位置在<code>【blog】\themes\anzhiyu\source\css\_layout</code>下。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置了背景色，如果不需要的可以删除</span></span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">display</span>: block ;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;preloader&#x27;</span>)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#20293a</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#20293a</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">animation</span>: text <span class="number">10s</span> ease infinite;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow</span> hidden</span><br><span class="line">    <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.85</span>);</span><br><span class="line">      <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5vw</span>);</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">270deg</span>, <span class="number">#00fcbd</span>, <span class="number">#7400f9</span>);</span><br><span class="line">      <span class="attribute">background-size</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">animation</span>: glowmation <span class="number">10s</span> linear infinite;</span><br><span class="line">    &amp;::-webkit-scrollbar</span><br><span class="line">      <span class="attribute">display</span>: none</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#loading-box</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="selector-class">.loading-img</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f0f0f2</span>;</span><br><span class="line">      <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">      <span class="attribute">animation-name</span>: loadingAction;</span><br><span class="line">      <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">      <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.loading-left-bg</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="selector-class">.loading-right-bg</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.loading-bg</span></span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span></span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-left-bg</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100%</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="selector-class">.loading-right-bg</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">    <span class="attribute">position</span> relative</span><br><span class="line">    <span class="attribute">left</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">45%</span></span><br><span class="line">    <span class="attribute">margin-top</span> -<span class="number">100px</span></span><br><span class="line">    <span class="attribute">margin-left</span> -<span class="number">100px</span></span><br><span class="line">    <span class="attribute">border-left</span> <span class="number">100px</span> solid <span class="number">#000</span></span><br><span class="line">    <span class="attribute">border-right</span> <span class="number">100px</span> solid <span class="number">#fff</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">0</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">400px</span></span><br><span class="line">    <span class="attribute">animation</span> rotation <span class="number">2.5s</span> linear infinite</span><br><span class="line">    -webkit-<span class="attribute">animation</span> rotation <span class="number">2.5s</span> linear infinite</span><br><span class="line">    -moz-<span class="attribute">animation</span> rotation <span class="number">2.5s</span> linear infinit</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span> </span><br><span class="line">    <span class="attribute">width</span> <span class="number">100px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">100px</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> -<span class="number">50px</span></span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">1</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="number">#fff</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">#000</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:after</span> </span><br><span class="line">    <span class="attribute">width</span> <span class="number">30px</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">30px</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">35px</span></span><br><span class="line">    <span class="attribute">left</span> -<span class="number">15px</span></span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">2</span></span><br><span class="line">    <span class="attribute">background-color</span> <span class="number">#000</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">box-shadow</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">0</span> <span class="number">#fff</span></span><br><span class="line">    <span class="selector-class">.loading-image-dot</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.loading-image-dot</span><span class="selector-pseudo">:after</span> </span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">content</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attribute">display</span> block</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.loading-font</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span> absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#69d2e7</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">animation</span>: text <span class="number">2s</span> linear infinite;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#loading-percentage</span></span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">67%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">      <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;「&quot;</span></span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">10px</span></span><br><span class="line">      <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;」&quot;</span></span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span></span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-bg</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> loadingAction</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> glowmation</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">12.5%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">37.5%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">30%</span> <span class="number">30%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">62.5%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">30%</span> <span class="number">70%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">87.5%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">30%</span> <span class="number">70%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">3%</span>;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> text</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#7400f9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#00fcbd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#7400f9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> rotate-clockwise-<span class="number">360</span></span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> rotation</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@-webkit-keyframes</span> rotation</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@-moz-keyframes</span> rotation</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">  -moz-<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Heo-同款页脚"><a href="#Heo-同款页脚" class="headerlink" title="Heo 同款页脚"></a>Heo 同款页脚</h2><blockquote><p>本教程来源<a href="https://hcer.top/posts/d0e8.html">heo 同款页脚部署 | 冰刻无痕 (hcer.top)</a></p></blockquote><h3 id="footer页脚"><a href="#footer页脚" class="headerlink" title="footer页脚"></a>footer页脚</h3><p>在<code>themes/anzhiyu/layout/includes</code>目录下新增<strong>footer.pug</strong>文件（注意缩进）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#footer-bar</span><br><span class="line">    .footer-bar-links</span><br><span class="line">      .footer-bar-left</span><br><span class="line">        #footer-bar-tips</span><br><span class="line">          .copyright</span><br><span class="line">            | ©2023 - 2023 By&amp;nbsp;</span><br><span class="line">            a.footer-bar-link(href=&quot;https://bingmeng158.github.io&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;) 冰刻无痕</span><br><span class="line">      .footer-bar-right</span><br><span class="line">        a.footer-bar-link(href=&quot;/rss/&quot; data-pjax-state=&quot;&quot;) 订阅</span><br><span class="line">        a.footer-bar-link(href=&quot;https://beian.miit.gov.cn/#/Integrated/index&quot; target=&quot;_blank&quot; rel=&quot;noopener external    nofollow noreferrer noopener&quot;) 赣ICP备2021010104号</span><br><span class="line">        a.footer-bar-link.cc(href=&quot;/cc/&quot; title=&quot;cc协议&quot; data-pjax-state=&quot;&quot;)</span><br><span class="line">          i.iconfont.icon-a-Iconcopyright-line</span><br><span class="line">          i.iconfont.icon-creative-commons-by-line</span><br><span class="line">          i.iconfont.icon-creative-commons-nc-line</span><br><span class="line">          i.iconfont.icon-creative-commons-nd-line</span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--icedream-white</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--icedream-white-op</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attr">--icedream-black</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--icedream-black-op</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attr">--icedream-none</span>: <span class="number">#00000000</span>;</span><br><span class="line">    <span class="attr">--icedream-gray</span>: <span class="number">#999999</span>;</span><br><span class="line">    <span class="attr">--icedream-gray-op</span>: <span class="number">#9999992b</span>;</span><br><span class="line">    <span class="attr">--icedream-vip</span>: <span class="number">#e5a80d</span>;</span><br><span class="line">    <span class="attr">--icedream-main</span>: <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">    <span class="attr">--icedream-main-op</span>: <span class="built_in">var</span>(--icedream-theme-op);</span><br><span class="line">    <span class="attr">--icedream-main-op-deep</span>: <span class="built_in">var</span>(--icedream-theme-op-deep);</span><br><span class="line">    <span class="attr">--icedream-main-none</span>: <span class="built_in">var</span>(--icedream-theme-none);</span><br><span class="line">    <span class="attr">--icedream-shadow-theme</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--icedream-theme-op);</span><br><span class="line">    <span class="attr">--icedream-shadow-blackdeep</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">16px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">15</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-main</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--icedream-main-op);</span><br><span class="line">    <span class="attr">--icedream-shadow-blue</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">40</span>, <span class="number">109</span>, <span class="number">234</span>, .<span class="number">20</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-white</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">20</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-black</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">05</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-yellow</span>: <span class="number">0px</span> <span class="number">38px</span> <span class="number">77px</span> -<span class="number">26px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">62</span>, .<span class="number">12</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-red</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#ee7d7936</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-green</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#87ee7936</span>;</span><br><span class="line">    <span class="attr">--icedream-logo-color</span>: <span class="built_in">linear-gradient</span>(<span class="number">215deg</span>, <span class="number">#4584ff</span> <span class="number">0%</span>, <span class="number">#cf0db9</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attr">--icedream-snackbar-time</span>: <span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--icedream-fontcolor);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-background);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=light]</span> &#123;</span><br><span class="line">    <span class="attr">--icedream-theme</span>: <span class="number">#425AEF</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-op</span>: <span class="number">#4259ef23</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-op-deep</span>: <span class="number">#4259efdd</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-none</span>: <span class="number">#4259ef01</span>;</span><br><span class="line">    <span class="attr">--icedream-blue</span>: <span class="number">#425AEF</span>;</span><br><span class="line">    <span class="attr">--icedream-red</span>: <span class="number">#f04a63</span>;</span><br><span class="line">    <span class="attr">--icedream-pink</span>: <span class="number">#FF7C7C</span>;</span><br><span class="line">    <span class="attr">--icedream-green</span>: <span class="number">#57bd6a</span>;</span><br><span class="line">    <span class="attr">--icedream-yellow</span>: <span class="number">#c28b00</span>;</span><br><span class="line">    <span class="attr">--icedream-yellow-op</span>: <span class="number">#d99c001a</span>;</span><br><span class="line">    <span class="attr">--icedream-orange</span>: <span class="number">#e38100</span>;</span><br><span class="line">    <span class="attr">--icedream-fontcolor</span>: <span class="number">#363636</span>;</span><br><span class="line">    <span class="attr">--icedream-background</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">    <span class="attr">--icedream-reverse</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--icedream-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attr">--icedream-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">    <span class="attr">--icedream-hovertext</span>: <span class="built_in">var</span>(--icedream-main);</span><br><span class="line">    <span class="attr">--icedream-ahoverbg</span>: <span class="number">#F7F7FA</span>;</span><br><span class="line">    <span class="attr">--icedream-lighttext</span>: <span class="built_in">var</span>(--icedream-main);</span><br><span class="line">    <span class="attr">--icedream-secondtext</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.8</span>);</span><br><span class="line">    <span class="attr">--icedream-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--icedream-card-btn-bg</span>: <span class="number">#edf0f7</span>;</span><br><span class="line">    <span class="attr">--icedream-post-blockquote-bg</span>: <span class="number">#fafcff</span>;</span><br><span class="line">    <span class="attr">--icedream-post-tabs-bg</span>: <span class="number">#f2f5f8</span>;</span><br><span class="line">    <span class="attr">--icedream-secondbg</span>: <span class="number">#f1f3f8</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.05</span>);</span><br><span class="line">    <span class="attr">--icedream-card-bg</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--icedream-card-bg-op</span>: <span class="built_in">var</span>(--icedream-black-op);</span><br><span class="line">    <span class="attr">--icedream-card-bg-none</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">    <span class="attr">--icedream-card-border</span>: <span class="number">#e3e8f7</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">    <span class="attr">--style-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-card-border);</span><br><span class="line">    <span class="attr">--style-border-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-card-border);</span><br><span class="line">    <span class="attr">--style-border-hover</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-main);</span><br><span class="line">    <span class="attr">--style-border-hover-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-main);</span><br><span class="line">    <span class="attr">--style-border-dashed</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--icedream-theme-op);</span><br><span class="line">    <span class="attr">--style-border-forever</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--icedream-main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> &#123;</span><br><span class="line">    <span class="attr">--icedream-theme</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-op</span>: <span class="number">#f2b94b23</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-op-deep</span>: <span class="number">#f2b94bdd</span>;</span><br><span class="line">    <span class="attr">--icedream-theme-none</span>: <span class="number">#f2b94b00</span>;</span><br><span class="line">    <span class="attr">--icedream-blue</span>: <span class="number">#0084FF</span>;</span><br><span class="line">    <span class="attr">--icedream-red</span>: <span class="number">#FF3842</span>;</span><br><span class="line">    <span class="attr">--icedream-pink</span>: <span class="number">#d44040</span>;</span><br><span class="line">    <span class="attr">--icedream-green</span>: <span class="number">#3e9f50</span>;</span><br><span class="line">    <span class="attr">--icedream-yellow</span>: <span class="number">#ffc93e</span>;</span><br><span class="line">    <span class="attr">--icedream-yellow-op</span>: <span class="number">#ffc93e30</span>;</span><br><span class="line">    <span class="attr">--icedream-orange</span>: <span class="number">#ff953e</span>;</span><br><span class="line">    <span class="attr">--icedream-fontcolor</span>: <span class="number">#F7F7FA</span>;</span><br><span class="line">    <span class="attr">--icedream-background</span>: <span class="number">#18171d</span>;</span><br><span class="line">    <span class="attr">--icedream-reverse</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--icedream-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">    <span class="attr">--icedream-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>);</span><br><span class="line">    <span class="attr">--icedream-hovertext</span>: <span class="number">#0A84FF</span>;</span><br><span class="line">    <span class="attr">--icedream-ahoverbg</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attr">--icedream-lighttext</span>: <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">    <span class="attr">--icedream-secondtext</span>: <span class="number">#a1a2b8</span>;</span><br><span class="line">    <span class="attr">--icedream-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">223</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--icedream-card-btn-bg</span>: <span class="number">#30343f</span>;</span><br><span class="line">    <span class="attr">--icedream-post-blockquote-bg</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--icedream-post-tabs-bg</span>: <span class="number">#121212</span>;</span><br><span class="line">    <span class="attr">--icedream-secondbg</span>: <span class="number">#30343f</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attr">--icedream-card-bg</span>: <span class="number">#1d1e22</span>;</span><br><span class="line">    <span class="attr">--icedream-card-bg-op</span>: <span class="built_in">var</span>(--icedream-white-op);</span><br><span class="line">    <span class="attr">--icedream-card-bg-none</span>: <span class="number">#1d1b2600</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attr">--icedream-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="attr">--icedream-card-border</span>: <span class="number">#3d3d3f</span>;</span><br><span class="line">    <span class="attr">--icedream-shadow-border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#00000050</span>;</span><br><span class="line">    <span class="attr">--style-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-card-border);</span><br><span class="line">    <span class="attr">--style-border-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-card-border);</span><br><span class="line">    <span class="attr">--style-border-hover</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">    <span class="attr">--style-border-hover-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">    <span class="attr">--style-border-dashed</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--icedream-theme-op);</span><br><span class="line">    <span class="attr">--style-border-forever</span>: <span class="number">2px</span> solid <span class="built_in">var</span>(--icedream-lighttext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-fontcolor);</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--icedream-secondbg);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1002</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-links</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-left</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-link</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-fontcolor);</span><br><span class="line">    <span class="comment">/*font-size: 0.8rem;*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-link</span><span class="selector-class">.cc</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-link</span><span class="selector-class">.cc</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.footer-bar-left</span>&gt;<span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-bar</span> <span class="selector-class">.footer-bar-right</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-lighttext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer_deal</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0.9rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.9rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post-comment</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post-comment</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.comment-head</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.comment-privacy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post-comment</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.comment-head</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.comment-privacy</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--icedream-theme);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="让你的网站在一些日子中自动弹窗-x2F-灰屏"><a href="#让你的网站在一些日子中自动弹窗-x2F-灰屏" class="headerlink" title="让你的网站在一些日子中自动弹窗&#x2F;灰屏"></a>让你的网站在一些日子中自动弹窗&#x2F;灰屏</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>教程来源：<a href="https://yisous.xyz/posts/7e9276a3/">Ariasakaの小窝</a></p><h4 id="day-js"><a href="#day-js" class="headerlink" title="day.js"></a>day.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">m=d.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line">dd=d.<span class="title function_">getDate</span>();</span><br><span class="line">y=d.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="comment">//cookie函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomNum</span>(<span class="params">minNum,maxNum</span>)&#123; </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)&#123; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*minNum+<span class="number">1</span>,<span class="number">10</span>); </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(maxNum-minNum+<span class="number">1</span>)+minNum,<span class="number">10</span>); </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">            <span class="attr">default</span>: </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//纪念日</span></span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">9</span>&amp;&amp;dd==<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;勿忘国耻，振兴中华！\n\n今天是1931年9月18日九一八事变&quot;</span>+(y-<span class="number">1931</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日！\n=================================================================&quot;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;filter: grayscale(100%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是1931年9月18日九一八事变&quot;</span>+(y-<span class="number">1931</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日。\n勿忘国耻，振兴中华！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">7</span>&amp;&amp;dd==<span class="number">7</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;勿忘国耻，振兴中华！\n\n今天是1937年7月7日卢沟桥事变&quot;</span>+(y-<span class="number">1937</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日！\n=================================================================&quot;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;filter: grayscale(100%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是1937年7月7日卢沟桥事变&quot;</span>+(y-<span class="number">1937</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日。\n勿忘国耻，振兴中华！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">12</span>&amp;&amp;dd==<span class="number">13</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;勿忘国耻，振兴中华！\n\n今天是1937年12月13日南京大屠杀&quot;</span>+(y-<span class="number">1931</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日！为遇难的无辜同胞们缅怀！\n=================================================================&quot;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;filter: grayscale(100%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是1937年12月13日南京大屠杀&quot;</span>+(y-<span class="number">1937</span>).<span class="title function_">toString</span>()+<span class="string">&quot;周年纪念日，希望你能停下来缅怀遇难的无辜同胞们。\n勿忘国耻，振兴中华！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">8</span>&amp;&amp;dd==<span class="number">14</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;勿忘国耻，振兴中华！\n\n今天是8月14日世界慰安妇纪念日！\n=================================================================&quot;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;filter: grayscale(100%);&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;今天是8月14日世界慰安妇纪念日，希望你能停下来了解一下来为历史作证，为曾经的无辜妇女发声。\n勿忘国耻，振兴中华！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节假日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">10</span>&amp;&amp;dd&lt;=<span class="number">5</span>)&#123;<span class="comment">//国庆节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;祖国&quot;</span>+(y-<span class="number">1949</span>).<span class="title function_">toString</span>()+<span class="string">&quot;岁生日快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;祖国&quot;</span>+(y-<span class="number">1949</span>).<span class="title function_">toString</span>()+<span class="string">&quot;岁生日快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">8</span>&amp;&amp;dd==<span class="number">15</span>)&#123;<span class="comment">//搞来玩的，鬼子投降</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鬼子投降&quot;</span>+(y-<span class="number">1945</span>).<span class="title function_">toString</span>()+<span class="string">&quot;年了！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;鬼子投降&quot;</span>+(y-<span class="number">1945</span>).<span class="title function_">toString</span>()+<span class="string">&quot;年了！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">1</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//元旦节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">toString</span>()+<span class="string">&quot;年元旦快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(y.<span class="title function_">toString</span>()+<span class="string">&quot;年元旦快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">3</span>&amp;&amp;dd==<span class="number">8</span>)&#123;<span class="comment">//妇女节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;各位女神们，妇女节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;各位女神们，妇女节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">l=[<span class="string">&quot;震惊！微软让Minecraft Java免费了！&quot;</span>,<span class="string">&quot;Minecraft竟然违背Mojang的原则发布2.0！&quot;</span>,<span class="string">&quot;非常抱歉，因为不可控原因，博客将于明天停止运营，再见&quot;</span>,<span class="string">&quot;好消息，日本没了！&quot;</span>,<span class="string">&quot;美国垮了，背后原因竟是时刻心心念念想着祖国的川普！&quot;</span>,<span class="string">&quot;微软垮了！&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m,dd);</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">4</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//愚人节，随机谎话</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(l[<span class="title function_">randomNum</span>(<span class="number">0</span>,l.<span class="property">length</span>-<span class="number">1</span>)]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(l[<span class="title function_">randomNum</span>(<span class="number">0</span>,l.<span class="property">length</span>-<span class="number">1</span>)]);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">5</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//劳动节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;劳动节快乐！为助力各行各业发展辛勤工作的人们致敬！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;劳动节快乐！为助力各行各业发展辛勤工作的人们致敬！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">5</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//劳动节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;劳动节快乐！为助力各行各业发展辛勤工作的人们致敬！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;劳动节快乐！为助力各行各业发展辛勤工作的人们致敬！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">5</span>&amp;&amp;dd==<span class="number">4</span>)&#123;<span class="comment">//青年节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;为有思想政治觉悟，拥护中国共产党，追求无产阶级、共产主义、马克思主义的青年们致敬！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;为有思想政治觉悟，拥护中国共产党，追求无产阶级、共产主义、马克思主义的青年们致敬&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">6</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//儿童节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;各位小朋友们，儿童节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;各位小朋友们，儿童节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">7</span>&amp;&amp;dd==<span class="number">1</span>)&#123;<span class="comment">//建党节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;中国共产党&quot;</span>+(y-<span class="number">1921</span>).<span class="title function_">toString</span>()+<span class="string">&quot;岁生日快乐&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;中国共产党&quot;</span>+(y-<span class="number">1921</span>).<span class="title function_">toString</span>()+<span class="string">&quot;岁生日快乐&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统节日部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">4</span>&amp;&amp;dd==<span class="number">4</span>||(m==<span class="number">4</span>&amp;&amp;dd==<span class="number">5</span>))&#123;<span class="comment">//清明节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;清明安康&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;清明安康&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lunar=calendarFormatter.<span class="title function_">solar2lunar</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//农历采用汉字计算，防止出现闰月导致问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初六&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初五&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初四&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初三&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初二&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初一&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;腊月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;三十&quot;</span>)||(lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;腊月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;廿九&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//春节，本来只有大年三十到初六，但是有时候除夕是大年二十九，所以也加上了</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">toString</span>()+<span class="string">&quot;年新年快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(y.<span class="title function_">toString</span>()+<span class="string">&quot;年新年快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;十五&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//元宵节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;元宵节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;元宵节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;正月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;十五&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//元宵节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;元宵节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;元宵节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;五月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初五&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//端午节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;端午节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;端午节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;七月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初七&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//七夕节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;七夕节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;七夕节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;八月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;十五&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//中秋节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;中秋节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;中秋节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((lunar[<span class="string">&quot;IMonthCn&quot;</span>]==<span class="string">&quot;九月&quot;</span>&amp;&amp;lunar[<span class="string">&quot;IDayCn&quot;</span>]==<span class="string">&quot;初九&quot;</span>))&#123;</span><br><span class="line">    <span class="comment">//重阳节</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;重阳节快乐！&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>)!=<span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&quot;重阳节快乐！&quot;</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;isPopupWindow&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lunar-js"><a href="#lunar-js" class="headerlink" title="lunar.js"></a>lunar.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* @1900-2100区间内的公历、农历互转</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@charset</span> <span class="variable">UTF</span>-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span>  <span class="variable">jiangjiazhi</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* @公历转农历：calendar.solar2lunar(1987,11,01); //[you can ignore params of prefix 0]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* @农历转公历：calendar.lunar2solar(1987,09,10); //[you can ignore params of prefix 0]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 农历1900-2100的润大小信息表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> <span class="variable">Hex</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lunarInfo = [<span class="number">0x04bd8</span>, <span class="number">0x04ae0</span>, <span class="number">0x0a570</span>, <span class="number">0x054d5</span>, <span class="number">0x0d260</span>, <span class="number">0x0d950</span>, <span class="number">0x16554</span>, <span class="number">0x056a0</span>, <span class="number">0x09ad0</span>, <span class="number">0x055d2</span>, <span class="comment">// 1900-1909</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x04ae0</span>, <span class="number">0x0a5b6</span>, <span class="number">0x0a4d0</span>, <span class="number">0x0d250</span>, <span class="number">0x1d255</span>, <span class="number">0x0b540</span>, <span class="number">0x0d6a0</span>, <span class="number">0x0ada2</span>, <span class="number">0x095b0</span>, <span class="number">0x14977</span>, <span class="comment">// 1910-1919</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x04970</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0b4b5</span>, <span class="number">0x06a50</span>, <span class="number">0x06d40</span>, <span class="number">0x1ab54</span>, <span class="number">0x02b60</span>, <span class="number">0x09570</span>, <span class="number">0x052f2</span>, <span class="number">0x04970</span>, <span class="comment">// 1920-1929</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x06566</span>, <span class="number">0x0d4a0</span>, <span class="number">0x0ea50</span>, <span class="number">0x06e95</span>, <span class="number">0x05ad0</span>, <span class="number">0x02b60</span>, <span class="number">0x186e3</span>, <span class="number">0x092e0</span>, <span class="number">0x1c8d7</span>, <span class="number">0x0c950</span>, <span class="comment">// 1930-1939</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0d4a0</span>, <span class="number">0x1d8a6</span>, <span class="number">0x0b550</span>, <span class="number">0x056a0</span>, <span class="number">0x1a5b4</span>, <span class="number">0x025d0</span>, <span class="number">0x092d0</span>, <span class="number">0x0d2b2</span>, <span class="number">0x0a950</span>, <span class="number">0x0b557</span>, <span class="comment">// 1940-1949</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x06ca0</span>, <span class="number">0x0b550</span>, <span class="number">0x15355</span>, <span class="number">0x04da0</span>, <span class="number">0x0a5b0</span>, <span class="number">0x14573</span>, <span class="number">0x052b0</span>, <span class="number">0x0a9a8</span>, <span class="number">0x0e950</span>, <span class="number">0x06aa0</span>, <span class="comment">// 1950-1959</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0aea6</span>, <span class="number">0x0ab50</span>, <span class="number">0x04b60</span>, <span class="number">0x0aae4</span>, <span class="number">0x0a570</span>, <span class="number">0x05260</span>, <span class="number">0x0f263</span>, <span class="number">0x0d950</span>, <span class="number">0x05b57</span>, <span class="number">0x056a0</span>, <span class="comment">// 1960-1969</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x096d0</span>, <span class="number">0x04dd5</span>, <span class="number">0x04ad0</span>, <span class="number">0x0a4d0</span>, <span class="number">0x0d4d4</span>, <span class="number">0x0d250</span>, <span class="number">0x0d558</span>, <span class="number">0x0b540</span>, <span class="number">0x0b6a0</span>, <span class="number">0x195a6</span>, <span class="comment">// 1970-1979</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x095b0</span>, <span class="number">0x049b0</span>, <span class="number">0x0a974</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0b27a</span>, <span class="number">0x06a50</span>, <span class="number">0x06d40</span>, <span class="number">0x0af46</span>, <span class="number">0x0ab60</span>, <span class="number">0x09570</span>, <span class="comment">// 1980-1989</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x04af5</span>, <span class="number">0x04970</span>, <span class="number">0x064b0</span>, <span class="number">0x074a3</span>, <span class="number">0x0ea50</span>, <span class="number">0x06b58</span>, <span class="number">0x05ac0</span>, <span class="number">0x0ab60</span>, <span class="number">0x096d5</span>, <span class="number">0x092e0</span>, <span class="comment">// 1990-1999</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0c960</span>, <span class="number">0x0d954</span>, <span class="number">0x0d4a0</span>, <span class="number">0x0da50</span>, <span class="number">0x07552</span>, <span class="number">0x056a0</span>, <span class="number">0x0abb7</span>, <span class="number">0x025d0</span>, <span class="number">0x092d0</span>, <span class="number">0x0cab5</span>, <span class="comment">// 2000-2009</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0a950</span>, <span class="number">0x0b4a0</span>, <span class="number">0x0baa4</span>, <span class="number">0x0ad50</span>, <span class="number">0x055d9</span>, <span class="number">0x04ba0</span>, <span class="number">0x0a5b0</span>, <span class="number">0x15176</span>, <span class="number">0x052b0</span>, <span class="number">0x0a930</span>, <span class="comment">// 2010-2019</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x07954</span>, <span class="number">0x06aa0</span>, <span class="number">0x0ad50</span>, <span class="number">0x05b52</span>, <span class="number">0x04b60</span>, <span class="number">0x0a6e6</span>, <span class="number">0x0a4e0</span>, <span class="number">0x0d260</span>, <span class="number">0x0ea65</span>, <span class="number">0x0d530</span>, <span class="comment">// 2020-2029</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x05aa0</span>, <span class="number">0x076a3</span>, <span class="number">0x096d0</span>, <span class="number">0x04afb</span>, <span class="number">0x04ad0</span>, <span class="number">0x0a4d0</span>, <span class="number">0x1d0b6</span>, <span class="number">0x0d250</span>, <span class="number">0x0d520</span>, <span class="number">0x0dd45</span>, <span class="comment">// 2030-2039</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0b5a0</span>, <span class="number">0x056d0</span>, <span class="number">0x055b2</span>, <span class="number">0x049b0</span>, <span class="number">0x0a577</span>, <span class="number">0x0a4b0</span>, <span class="number">0x0aa50</span>, <span class="number">0x1b255</span>, <span class="number">0x06d20</span>, <span class="number">0x0ada0</span>, <span class="comment">// 2040-2049</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x14b63</span>, <span class="number">0x09370</span>, <span class="number">0x049f8</span>, <span class="number">0x04970</span>, <span class="number">0x064b0</span>, <span class="number">0x168a6</span>, <span class="number">0x0ea50</span>, <span class="number">0x06b20</span>, <span class="number">0x1a6c4</span>, <span class="number">0x0aae0</span>, <span class="comment">// 2050-2059</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0a2e0</span>, <span class="number">0x0d2e3</span>, <span class="number">0x0c960</span>, <span class="number">0x0d557</span>, <span class="number">0x0d4a0</span>, <span class="number">0x0da50</span>, <span class="number">0x05d55</span>, <span class="number">0x056a0</span>, <span class="number">0x0a6d0</span>, <span class="number">0x055d4</span>, <span class="comment">// 2060-2069</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x052d0</span>, <span class="number">0x0a9b8</span>, <span class="number">0x0a950</span>, <span class="number">0x0b4a0</span>, <span class="number">0x0b6a6</span>, <span class="number">0x0ad50</span>, <span class="number">0x055a0</span>, <span class="number">0x0aba4</span>, <span class="number">0x0a5b0</span>, <span class="number">0x052b0</span>, <span class="comment">// 2070-2079</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0b273</span>, <span class="number">0x06930</span>, <span class="number">0x07337</span>, <span class="number">0x06aa0</span>, <span class="number">0x0ad50</span>, <span class="number">0x14b55</span>, <span class="number">0x04b60</span>, <span class="number">0x0a570</span>, <span class="number">0x054e4</span>, <span class="number">0x0d160</span>, <span class="comment">// 2080-2089</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0e968</span>, <span class="number">0x0d520</span>, <span class="number">0x0daa0</span>, <span class="number">0x16aa6</span>, <span class="number">0x056d0</span>, <span class="number">0x04ae0</span>, <span class="number">0x0a9d4</span>, <span class="number">0x0a2d0</span>, <span class="number">0x0d150</span>, <span class="number">0x0f252</span>, <span class="comment">// 2090-2099</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x0d520</span>] <span class="comment">// 2100</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> solarMonth = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 天干地支之天干速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property trans[&#x27;甲&#x27;,&#x27;乙&#x27;,&#x27;丙&#x27;,&#x27;丁&#x27;,&#x27;戊&#x27;,&#x27;己&#x27;,&#x27;庚&#x27;,&#x27;辛&#x27;,&#x27;壬&#x27;,&#x27;癸&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Gan</span> = [<span class="string">&#x27;\u7532&#x27;</span>, <span class="string">&#x27;\u4e59&#x27;</span>, <span class="string">&#x27;\u4e19&#x27;</span>, <span class="string">&#x27;\u4e01&#x27;</span>, <span class="string">&#x27;\u620a&#x27;</span>, <span class="string">&#x27;\u5df1&#x27;</span>, <span class="string">&#x27;\u5e9a&#x27;</span>, <span class="string">&#x27;\u8f9b&#x27;</span>, <span class="string">&#x27;\u58ec&#x27;</span>, <span class="string">&#x27;\u7678&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 天干地支之地支速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span>[&#x27;子&#x27;,&#x27;丑&#x27;,&#x27;寅&#x27;,&#x27;卯&#x27;,&#x27;辰&#x27;,&#x27;巳&#x27;,&#x27;午&#x27;,&#x27;未&#x27;,&#x27;申&#x27;,&#x27;酉&#x27;,&#x27;戌&#x27;,&#x27;亥&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Zhi</span> = [<span class="string">&#x27;\u5b50&#x27;</span>, <span class="string">&#x27;\u4e11&#x27;</span>, <span class="string">&#x27;\u5bc5&#x27;</span>, <span class="string">&#x27;\u536f&#x27;</span>, <span class="string">&#x27;\u8fb0&#x27;</span>, <span class="string">&#x27;\u5df3&#x27;</span>, <span class="string">&#x27;\u5348&#x27;</span>, <span class="string">&#x27;\u672a&#x27;</span>, <span class="string">&#x27;\u7533&#x27;</span>, <span class="string">&#x27;\u9149&#x27;</span>, <span class="string">&#x27;\u620c&#x27;</span>, <span class="string">&#x27;\u4ea5&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 天干地支之地支速查表&lt;=&gt;生肖</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span>[&#x27;鼠&#x27;,&#x27;牛&#x27;,&#x27;虎&#x27;,&#x27;兔&#x27;,&#x27;龙&#x27;,&#x27;蛇&#x27;,&#x27;马&#x27;,&#x27;羊&#x27;,&#x27;猴&#x27;,&#x27;鸡&#x27;,&#x27;狗&#x27;,&#x27;猪&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Animals</span> = [<span class="string">&#x27;\u9f20&#x27;</span>, <span class="string">&#x27;\u725b&#x27;</span>, <span class="string">&#x27;\u864e&#x27;</span>, <span class="string">&#x27;\u5154&#x27;</span>, <span class="string">&#x27;\u9f99&#x27;</span>, <span class="string">&#x27;\u86c7&#x27;</span>, <span class="string">&#x27;\u9a6c&#x27;</span>, <span class="string">&#x27;\u7f8a&#x27;</span>, <span class="string">&#x27;\u7334&#x27;</span>, <span class="string">&#x27;\u9e21&#x27;</span>, <span class="string">&#x27;\u72d7&#x27;</span>, <span class="string">&#x27;\u732a&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 24节气速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span>[&#x27;小寒&#x27;,&#x27;大寒&#x27;,&#x27;立春&#x27;,&#x27;雨水&#x27;,&#x27;惊蛰&#x27;,&#x27;春分&#x27;,&#x27;清明&#x27;,&#x27;谷雨&#x27;,&#x27;立夏&#x27;,&#x27;小满&#x27;,&#x27;芒种&#x27;,&#x27;夏至&#x27;,&#x27;小暑&#x27;,&#x27;大暑&#x27;,&#x27;立秋&#x27;,&#x27;处暑&#x27;,&#x27;白露&#x27;,&#x27;秋分&#x27;,&#x27;寒露&#x27;,&#x27;霜降&#x27;,&#x27;立冬&#x27;,&#x27;小雪&#x27;,&#x27;大雪&#x27;,&#x27;冬至&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> solarTerm = [<span class="string">&#x27;\u5c0f\u5bd2&#x27;</span>, <span class="string">&#x27;\u5927\u5bd2&#x27;</span>, <span class="string">&#x27;\u7acb\u6625&#x27;</span>, <span class="string">&#x27;\u96e8\u6c34&#x27;</span>, <span class="string">&#x27;\u60ca\u86f0&#x27;</span>, <span class="string">&#x27;\u6625\u5206&#x27;</span>, <span class="string">&#x27;\u6e05\u660e&#x27;</span>, <span class="string">&#x27;\u8c37\u96e8&#x27;</span>, <span class="string">&#x27;\u7acb\u590f&#x27;</span>, <span class="string">&#x27;\u5c0f\u6ee1&#x27;</span>, <span class="string">&#x27;\u8292\u79cd&#x27;</span>, <span class="string">&#x27;\u590f\u81f3&#x27;</span>, <span class="string">&#x27;\u5c0f\u6691&#x27;</span>, <span class="string">&#x27;\u5927\u6691&#x27;</span>, <span class="string">&#x27;\u7acb\u79cb&#x27;</span>, <span class="string">&#x27;\u5904\u6691&#x27;</span>, <span class="string">&#x27;\u767d\u9732&#x27;</span>, <span class="string">&#x27;\u79cb\u5206&#x27;</span>, <span class="string">&#x27;\u5bd2\u9732&#x27;</span>, <span class="string">&#x27;\u971c\u964d&#x27;</span>, <span class="string">&#x27;\u7acb\u51ac&#x27;</span>, <span class="string">&#x27;\u5c0f\u96ea&#x27;</span>, <span class="string">&#x27;\u5927\u96ea&#x27;</span>, <span class="string">&#x27;\u51ac\u81f3&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 1900-2100各年的24节气日期速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 0x string For splice</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sTermInfo = [<span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c3598082c95f8c965cc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bd0b06bdb0722c965ce1cfcc920f&#x27;</span>, <span class="string">&#x27;b027097bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bcf97c359801ec95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd0b06bdb0722c965ce1cfcc920f&#x27;</span>, <span class="string">&#x27;b027097bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c359801ec95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd0b06bdb0722c965ce1cfcc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;b027097bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;9778397bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec95f8c965cc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bd09801d98082c95f8e1cfcc920f&#x27;</span>, <span class="string">&#x27;97bd097bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd197c36c9210c9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec95f8c965cc920e&#x27;</span>, <span class="string">&#x27;97bd09801d98082c95f8e1cfcc920f&#x27;</span>, <span class="string">&#x27;97bd097bd097c36b0b6fc9210c8dc2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36c9210c9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec95f8c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c3598082c95f8e1cfcc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bd097bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd097c36c9210c9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bcf97c3598082c95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd097bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c3598082c95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd097bd097c35b0b6fc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c359801ec95f8c965cc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bd097bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bcf97c359801ec95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd097bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf97c359801ec95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd097bd07f595b0b6fc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd19801ec9210c9274c920e&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec95f8c965cc920f&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bd07f5307f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd097c36c9210c9274c920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec95f8c965cc920f&#x27;</span>, <span class="string">&#x27;97bd07f5307f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c36b0b6fc9210c8dc2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36c9210c9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bd07f1487f595b0b0bc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bcf7f1487f595b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf7f1487f595b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>, <span class="string">&#x27;97bcf7f1487f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd19801ec9210c965cc920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97bcf7f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b97bd19801ec9210c9274c920e&#x27;</span>, <span class="string">&#x27;97bcf7f0e47f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9210c91aa&#x27;</span>, <span class="string">&#x27;97b6b97bd197c36c9210c9274c920e&#x27;</span>, <span class="string">&#x27;97bcf7f0e47f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd097c36c9210c9274c920e&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f5307f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c36b0b6fc9210c8dc2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b70c9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e37f1487f595b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd097c35b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e27f1487f595b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>, <span class="string">&#x27;97b6b7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9274c91aa&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;97b6b7f0e47f531b0723b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;9778397bd097c36b0b6fc9210c91aa&#x27;</span>, <span class="string">&#x27;97b6b7f0e47f149b0723b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0723b0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;9778397bd097c36b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;977837f0e37f149b0723b0787b0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f5307f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc9210c8dc2&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;977837f0e37f14998082b0787b0721&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e37f1487f595b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd097c35b0b6fc9210c8dc2&#x27;</span>, <span class="string">&#x27;977837f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>, <span class="string">&#x27;977837f0e37f14998082b0787b06bd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd097c35b0b6fc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;977837f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;977837f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;977837f0e37f14998082b0787b06bd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f149b0723b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;977837f0e37f14998082b0723b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e37f149b0723b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0723b0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e397bd07f595b0b0bc920fb0722&#x27;</span>, <span class="string">&#x27;977837f0e37f14898082b0723b02d5&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f1487f595b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f0e37f14898082b0723b02d5&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7ec967f0e37f14998082b0787b0721&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f1487f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e37f0e37f14898082b0723b02d5&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e37f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f0e37f14898082b072297c35&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f0e37f14898082b072297c35&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e37f0e366aa89801eb072297c35&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f149b0723b0787b0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f0e366aa89801eb072297c35&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0723b06bd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f149b0723b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e37f0e366aa89801eb072297c35&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7ec967f0e37f14998082b0723b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e37f14998083b0787b0721&#x27;</span>, <span class="string">&#x27;7f0e27f0e47f531b0723b0b6fb0722&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e37f0e366aa89801eb072297c35&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14898082b0723b02d5&#x27;</span>, <span class="string">&#x27;7f07e7f0e37f14998082b0787b0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e36665b66aa89801e9808297c35&#x27;</span>, <span class="string">&#x27;665f67f0e37f14898082b0723b02d5&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7ec967f0e37f14998082b0787b0721&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0722&#x27;</span>, <span class="string">&#x27;7f0e36665b66a449801e9808297c35&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;665f67f0e37f14898082b0723b02d5&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f0e36665b66a449801e9808297c35&#x27;</span>, <span class="string">&#x27;665f67f0e37f14898082b072297c35&#x27;</span>, <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e26665b66a449801e9808297c35&#x27;</span>, <span class="string">&#x27;665f67f0e37f1489801eb072297c35&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;7ec967f0e37f14998082b0787b06bd&#x27;</span>, <span class="string">&#x27;7f07e7f0e47f531b0723b0b6fb0721&#x27;</span>, <span class="string">&#x27;7f0e27f1487f531b0b0bb0b6fb0722&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * 数字转中文速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span> [&#x27;日&#x27;,&#x27;一&#x27;,&#x27;二&#x27;,&#x27;三&#x27;,&#x27;四&#x27;,&#x27;五&#x27;,&#x27;六&#x27;,&#x27;七&#x27;,&#x27;八&#x27;,&#x27;九&#x27;,&#x27;十&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nStr1 = [<span class="string">&#x27;\u65e5&#x27;</span>, <span class="string">&#x27;\u4e00&#x27;</span>, <span class="string">&#x27;\u4e8c&#x27;</span>, <span class="string">&#x27;\u4e09&#x27;</span>, <span class="string">&#x27;\u56db&#x27;</span>, <span class="string">&#x27;\u4e94&#x27;</span>, <span class="string">&#x27;\u516d&#x27;</span>, <span class="string">&#x27;\u4e03&#x27;</span>, <span class="string">&#x27;\u516b&#x27;</span>, <span class="string">&#x27;\u4e5d&#x27;</span>, <span class="string">&#x27;\u5341&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 日期转农历称呼速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span> [&#x27;初&#x27;,&#x27;十&#x27;,&#x27;廿&#x27;,&#x27;卅&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nStr2 = [<span class="string">&#x27;\u521d&#x27;</span>, <span class="string">&#x27;\u5341&#x27;</span>, <span class="string">&#x27;\u5eff&#x27;</span>, <span class="string">&#x27;\u5345&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 月份转农历称呼速查表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Array</span> Of Property</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@trans</span> [&#x27;正&#x27;,&#x27;一&#x27;,&#x27;二&#x27;,&#x27;三&#x27;,&#x27;四&#x27;,&#x27;五&#x27;,&#x27;六&#x27;,&#x27;七&#x27;,&#x27;八&#x27;,&#x27;九&#x27;,&#x27;十&#x27;,&#x27;冬&#x27;,&#x27;腊&#x27;]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nStr3 = [<span class="string">&#x27;\u6b63&#x27;</span>, <span class="string">&#x27;\u4e8c&#x27;</span>, <span class="string">&#x27;\u4e09&#x27;</span>, <span class="string">&#x27;\u56db&#x27;</span>, <span class="string">&#x27;\u4e94&#x27;</span>, <span class="string">&#x27;\u516d&#x27;</span>, <span class="string">&#x27;\u4e03&#x27;</span>, <span class="string">&#x27;\u516b&#x27;</span>, <span class="string">&#x27;\u4e5d&#x27;</span>, <span class="string">&#x27;\u5341&#x27;</span>, <span class="string">&#x27;\u51ac&#x27;</span>, <span class="string">&#x27;\u814a&#x27;</span>]</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回农历y年一整年的总天数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar Year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> <span class="variable">Number</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var count = calendar.lYearDays(1987) ;//count=387</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">lYearDays</span> (y) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">348</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0x8000</span>; i &gt; <span class="number">0x8</span>; i &gt;&gt;= <span class="number">1</span>) &#123; sum += (lunarInfo[y - <span class="number">1900</span>] &amp; i) ? <span class="number">1</span> : <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sum + <span class="title function_">leapDays</span>(y))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar Year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Number (0-12)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@eg</span>:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">leapMonth</span> (y) &#123; <span class="comment">// 闰字编码 \u95f0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (lunarInfo[y - <span class="number">1900</span>] &amp; <span class="number">0xf</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回农历y年闰月的天数 若该年没有闰月则返回0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar Year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Number (0、29、30)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">leapDays</span> (y) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">leapMonth</span>(y)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> ((lunarInfo[y - <span class="number">1900</span>] &amp; <span class="number">0x10000</span>) ? <span class="number">30</span> : <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar Year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Number (-1、29、30)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@eg</span>:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">monthDays</span> (y, m) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">12</span> || m &lt; <span class="number">1</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;<span class="comment">// 月份参数从1至12，参数错误返回-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ((lunarInfo[y - <span class="number">1900</span>] &amp; (<span class="number">0x10000</span> &gt;&gt; m)) ? <span class="number">30</span> : <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回公历(!)y年m月的天数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> solar Year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Number (-1、28、29、30、31)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">solarDays</span> (y, m) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">12</span> || m &lt; <span class="number">1</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125; <span class="comment">// 若参数错误 返回-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ms = m - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ms === <span class="number">1</span>) &#123; <span class="comment">// 2月份的闰平规律测算后确认返回28或29</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (((y % <span class="number">4</span> === <span class="number">0</span>) &amp;&amp; (y % <span class="number">100</span> !== <span class="number">0</span>) || (y % <span class="number">400</span> === <span class="number">0</span>)) ? <span class="number">29</span> : <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (solarMonth[ms])</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 农历年份转换为干支纪年</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  lYear 农历年的年份数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toGanZhiYear</span> (lYear) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ganKey = (lYear - <span class="number">3</span>) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> zhiKey = (lYear - <span class="number">3</span>) % <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ganKey === <span class="number">0</span>) ganKey = <span class="number">10</span> <span class="comment">// 如果余数为0则为最后一个天干</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zhiKey === <span class="number">0</span>) zhiKey = <span class="number">12</span> <span class="comment">// 如果余数为0则为最后一个地支</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Gan</span>[ganKey - <span class="number">1</span>] + <span class="title class_">Zhi</span>[zhiKey - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 公历月、日判断所属星座</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  cMonth [description]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>  cDay [description]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toAstro</span> (cMonth, cDay) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&#x27;\u9b54\u7faf\u6c34\u74f6\u53cc\u9c7c\u767d\u7f8a\u91d1\u725b\u53cc\u5b50\u5de8\u87f9\u72ee\u5b50\u5904\u5973\u5929\u79e4\u5929\u874e\u5c04\u624b\u9b54\u7faf&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">20</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">22</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">substr</span>(cMonth * <span class="number">2</span> - (cDay &lt; arr[cMonth - <span class="number">1</span>] ? <span class="number">2</span> : <span class="number">0</span>), <span class="number">2</span>) + <span class="string">&#x27;\u5ea7&#x27;</span> <span class="comment">// 座</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 传入offset偏移量返回干支</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> offset 相对甲子的偏移量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toGanZhi</span> (offset) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Gan</span>[offset % <span class="number">10</span>] + <span class="title class_">Zhi</span>[offset % <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 传入公历(!)y年获得该年第n个节气的公历日期</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> day Number</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getTerm</span> (y, n) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">1900</span> || y &gt; <span class="number">2100</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span> || n &gt; <span class="number">24</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _table = sTermInfo[y - <span class="number">1900</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _info = [</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">5</span>)).<span class="title function_">toString</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">5</span>, <span class="number">5</span>)).<span class="title function_">toString</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">10</span>, <span class="number">5</span>)).<span class="title function_">toString</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">15</span>, <span class="number">5</span>)).<span class="title function_">toString</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">20</span>, <span class="number">5</span>)).<span class="title function_">toString</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="built_in">parseInt</span>(<span class="string">&#x27;0x&#x27;</span> + _table.<span class="title function_">substr</span>(<span class="number">25</span>, <span class="number">5</span>)).<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _calday = [</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      _info[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      _info[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">2</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      _info[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">3</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      _info[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">4</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">      _info[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">      _info[<span class="number">5</span>].<span class="title function_">substr</span>(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(_calday[n - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 传入农历数字月份返回汉语通俗表示法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar month</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth=&#x27;腊月&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toChinaMonth</span> (m) &#123; <span class="comment">// 月 =&gt; \u6708</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">12</span> || m &lt; <span class="number">1</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125; <span class="comment">// 若参数错误 返回-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s = nStr3[m - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    s += <span class="string">&#x27;\u6708&#x27;</span> <span class="comment">// 加上月字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 传入农历日期数字返回汉字表示法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> lunar day</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var cnDay = calendar.toChinaDay(21) ;//cnMonth=&#x27;廿一&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toChinaDay</span> (d) &#123; <span class="comment">// 日 =&gt; \u65e5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (d) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&#x27;\u521d\u5341&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&#x27;\u4e8c\u5341&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">30</span>:</span><br><span class="line"></span><br><span class="line">        s = <span class="string">&#x27;\u4e09\u5341&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span> :</span><br><span class="line"></span><br><span class="line">        s = nStr2[<span class="title class_">Math</span>.<span class="title function_">floor</span>(d / <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        s += nStr1[d % <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (s)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 年份转生肖[!仅能大致转换] =&gt; 精确划分生肖分界线是“立春”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> y year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Cn string</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:var animal = calendar.getAnimal(1987) ;//animal=&#x27;兔&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getAnimal</span> (y) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Animals</span>[(y - <span class="number">4</span>) % <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 传入阳历年月日获得详细的公历、农历object信息 &lt;=&gt;JSON</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> y  solar year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> m  solar month</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> d  solar day</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> JSON object</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@eg</span>:console.log(calendar.solar2lunar(1987,11,01));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">solar2lunar</span> (y, m, d) &#123; <span class="comment">// 参数区间1900.1.31~2100.12.31</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 年份限定、上限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">1900</span> || y &gt; <span class="number">2100</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span> <span class="comment">// undefined转换为数字变为NaN</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公历传参最下限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y === <span class="number">1900</span> &amp;&amp; m === <span class="number">1</span> &amp;&amp; d &lt; <span class="number">31</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未传参  获得当天</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> objDate = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!y) &#123;</span><br><span class="line"></span><br><span class="line">      objDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      objDate = <span class="keyword">new</span> <span class="title class_">Date</span>(y, <span class="built_in">parseInt</span>(m) - <span class="number">1</span>, d)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> leap = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修正ymd参数</span></span><br><span class="line"></span><br><span class="line">    y = objDate.<span class="title function_">getFullYear</span>()</span><br><span class="line"></span><br><span class="line">    m = objDate.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    d = objDate.<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> offset = (<span class="title class_">Date</span>.<span class="title function_">UTC</span>(objDate.<span class="title function_">getFullYear</span>(), objDate.<span class="title function_">getMonth</span>(), objDate.<span class="title function_">getDate</span>()) - <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1900</span>, <span class="number">0</span>, <span class="number">31</span>)) / <span class="number">86400000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1900</span>; i &lt; <span class="number">2101</span> &amp;&amp; offset &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      temp = <span class="title function_">lYearDays</span>(i)</span><br><span class="line"></span><br><span class="line">      offset -= temp</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      offset += temp; i--</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否今天</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isTodayObj = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isToday = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isTodayObj.<span class="title function_">getFullYear</span>() === y &amp;&amp; isTodayObj.<span class="title function_">getMonth</span>() + <span class="number">1</span> === m &amp;&amp; isTodayObj.<span class="title function_">getDate</span>() === d) &#123;</span><br><span class="line"></span><br><span class="line">      isToday = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 星期几</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nWeek = objDate.<span class="title function_">getDay</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cWeek = nStr1[nWeek]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数字表示周几顺应天朝周一开始的惯例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nWeek === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      nWeek = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 农历年</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> year = i</span><br><span class="line"></span><br><span class="line">    leap = <span class="title function_">leapMonth</span>(i) <span class="comment">// 闰哪个月</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isLeap = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 效验闰月</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">13</span> &amp;&amp; offset &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 闰月</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (leap &gt; <span class="number">0</span> &amp;&amp; i === (leap + <span class="number">1</span>) &amp;&amp; isLeap === <span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">        --i</span><br><span class="line"></span><br><span class="line">        isLeap = <span class="literal">true</span>; temp = <span class="title function_">leapDays</span>(year) <span class="comment">// 计算农历闰月天数</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        temp = <span class="title function_">monthDays</span>(year, i)<span class="comment">// 计算农历普通月天数</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 解除闰月</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isLeap === <span class="literal">true</span> &amp;&amp; i === (leap + <span class="number">1</span>)) &#123; isLeap = <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">      offset -= temp</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 闰月导致数组下标重叠取反</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset === <span class="number">0</span> &amp;&amp; leap &gt; <span class="number">0</span> &amp;&amp; i === leap + <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isLeap) &#123;</span><br><span class="line"></span><br><span class="line">        isLeap = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        isLeap = <span class="literal">true</span>; --i</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      offset += temp; --i</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 农历月</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> month = i</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 农历日</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> day = offset + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 天干地支处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sm = m - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gzY = <span class="title function_">toGanZhiYear</span>(year)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当月的两个节气</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bugfix-2017-7-24 11:03:38 use lunar Year Param `y` Not `year`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> firstNode = <span class="title function_">getTerm</span>(y, (m * <span class="number">2</span> - <span class="number">1</span>)) <span class="comment">// 返回当月「节」为几日开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> secondNode = <span class="title function_">getTerm</span>(y, (m * <span class="number">2</span>)) <span class="comment">// 返回当月「节」为几日开始</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依据12节气修正干支月</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gzM = <span class="title function_">toGanZhi</span>((y - <span class="number">1900</span>) * <span class="number">12</span> + m + <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (d &gt;= firstNode) &#123;</span><br><span class="line"></span><br><span class="line">      gzM = <span class="title function_">toGanZhi</span>((y - <span class="number">1900</span>) * <span class="number">12</span> + m + <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的日期的节气与否</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isTerm = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Term</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (firstNode === d) &#123;</span><br><span class="line"></span><br><span class="line">      isTerm = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Term</span> = solarTerm[m * <span class="number">2</span> - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (secondNode === d) &#123;</span><br><span class="line"></span><br><span class="line">      isTerm = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="title class_">Term</span> = solarTerm[m * <span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日柱 当月一日与 1900/1/1 相差天数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dayCyclical = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(y, sm, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) / <span class="number">86400000</span> + <span class="number">25567</span> + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gzD = <span class="title function_">toGanZhi</span>(dayCyclical + d - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该日期所属的星座</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> astro = <span class="title function_">toAstro</span>(m, d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;lYear&#x27;</span>: year, <span class="string">&#x27;lMonth&#x27;</span>: month, <span class="string">&#x27;lDay&#x27;</span>: day, <span class="string">&#x27;Animal&#x27;</span>: <span class="title function_">getAnimal</span>(year), <span class="string">&#x27;IMonthCn&#x27;</span>: (isLeap ? <span class="string">&#x27;\u95f0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + <span class="title function_">toChinaMonth</span>(month), <span class="string">&#x27;IDayCn&#x27;</span>: <span class="title function_">toChinaDay</span>(day), <span class="string">&#x27;cYear&#x27;</span>: y, <span class="string">&#x27;cMonth&#x27;</span>: m, <span class="string">&#x27;cDay&#x27;</span>: d, <span class="string">&#x27;gzYear&#x27;</span>: gzY, <span class="string">&#x27;gzMonth&#x27;</span>: gzM, <span class="string">&#x27;gzDay&#x27;</span>: gzD, <span class="string">&#x27;isToday&#x27;</span>: isToday, <span class="string">&#x27;isLeap&#x27;</span>: isLeap, <span class="string">&#x27;nWeek&#x27;</span>: nWeek, <span class="string">&#x27;ncWeek&#x27;</span>: <span class="string">&#x27;\u661f\u671f&#x27;</span> + cWeek, <span class="string">&#x27;isTerm&#x27;</span>: isTerm, <span class="string">&#x27;Term&#x27;</span>: <span class="title class_">Term</span>, <span class="string">&#x27;astro&#x27;</span>: astro&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> calendarFormatter= &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 传入阳历年月日获得详细的公历、农历object信息 &lt;=&gt;JSON</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">solar2lunar</span>:<span class="keyword">function</span>(<span class="params">y, m, d</span>)&#123; <span class="comment">// 参数区间1900.1.31~2100.12.31</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">solar2lunar</span>(y, m, d)</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 &lt;=&gt;JSON</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> y  lunar year</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> m  lunar month</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> d  lunar day</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> JSON object</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      * <span class="doctag">@eg</span>:console.log(calendar.lunar2solar(1987,9,10));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">lunar2solar</span>: <span class="keyword">function</span> (<span class="params">y, m, d, isLeapMonth</span>) &#123; <span class="comment">// 参数区间1900.1.31~2100.12.1</span></span><br><span class="line"></span><br><span class="line">        isLeapMonth = !!isLeapMonth</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isLeapMonth &amp;&amp; (leapMonth !== m)) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;<span class="comment">// 传参要求计算该闰月公历 但该年得出的闰月与传参的月份并不同</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y === <span class="number">2100</span> &amp;&amp; m === <span class="number">12</span> &amp;&amp; d &gt; <span class="number">1</span> || y === <span class="number">1900</span> &amp;&amp; m === <span class="number">1</span> &amp;&amp; d &lt; <span class="number">31</span>) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125; <span class="comment">// 超出了最大极限值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> day = <span class="title function_">monthDays</span>(y, m)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _day = day</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bugFix 2016-9-25</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// if month is leap, _day use leapDays method</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isLeapMonth) &#123;</span><br><span class="line"></span><br><span class="line">          _day = <span class="title function_">leapDays</span>(y, m)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">1900</span> || y &gt; <span class="number">2100</span> || d &gt; _day) &#123; <span class="keyword">return</span> -<span class="number">1</span> &#125;<span class="comment">// 参数合法性效验</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算农历的时间差</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1900</span>; i &lt; y; i++) &#123;</span><br><span class="line"></span><br><span class="line">          offset += <span class="title function_">lYearDays</span>(i)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> leap = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> isAdd = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line"></span><br><span class="line">          leap = <span class="title function_">leapMonth</span>(y)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!isAdd) &#123; <span class="comment">// 处理闰月</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (leap &lt;= i &amp;&amp; leap &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">              offset += <span class="title function_">leapDays</span>(y); isAdd = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          offset += <span class="title function_">monthDays</span>(y, i)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换闰月农历 需补充该年闰月的前一个月的时差</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isLeapMonth) &#123; offset += day &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1900年农历正月一日的公历时间为1900年1月30日0时0分0秒(该时间也是本农历的最开始起始点)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> stmap = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">1900</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> calObj = <span class="keyword">new</span> <span class="title class_">Date</span>((offset + d - <span class="number">31</span>) * <span class="number">86400000</span> + stmap)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cY = calObj.<span class="title function_">getUTCFullYear</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cM = calObj.<span class="title function_">getUTCMonth</span>() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cD = calObj.<span class="title function_">getUTCDate</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">solar2lunar</span>(cY, cM, cD)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="SweetAlert-js"><a href="#SweetAlert-js" class="headerlink" title="SweetAlert.js"></a>SweetAlert.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">* sweetalert2 v8.19.0</span></span><br><span class="line"><span class="comment">* Released under the MIT License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span>, factory</span>) &#123;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>() :</span><br><span class="line"><span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span> ? <span class="title function_">define</span>(factory) :</span><br><span class="line">(<span class="variable language_">global</span>.<span class="property">Sweetalert2</span> = <span class="title function_">factory</span>());</span><br><span class="line">&#125;(<span class="variable language_">this</span>, (<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_typeof</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Symbol</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Symbol</span>.<span class="property">iterator</span> === <span class="string">&quot;symbol&quot;</span>) &#123;</span><br><span class="line">    _typeof = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _typeof = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Symbol</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Symbol</span> &amp;&amp; obj !== <span class="title class_">Symbol</span>.<span class="property"><span class="keyword">prototype</span></span> ? <span class="string">&quot;symbol&quot;</span> : <span class="keyword">typeof</span> obj;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_typeof</span>(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_defineProperties</span>(<span class="params">target, props</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">    descriptor.<span class="property">enumerable</span> = descriptor.<span class="property">enumerable</span> || <span class="literal">false</span>;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;value&quot;</span> <span class="keyword">in</span> descriptor) descriptor.<span class="property">writable</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, descriptor.<span class="property">key</span>, descriptor);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_createClass</span>(<span class="params">Constructor, protoProps, staticProps</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (protoProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>, protoProps);</span><br><span class="line">  <span class="keyword">if</span> (staticProps) <span class="title function_">_defineProperties</span>(<span class="title class_">Constructor</span>, staticProps);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Constructor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_extends</span>(<span class="params"></span>) &#123;</span><br><span class="line">  _extends = <span class="title class_">Object</span>.<span class="property">assign</span> || <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> source = <span class="variable language_">arguments</span>[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(source, key)) &#123;</span><br><span class="line">          target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _extends.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_inherits</span>(<span class="params">subClass, superClass</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">&quot;function&quot;</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Super expression must either be null or a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  subClass.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(superClass &amp;&amp; superClass.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">constructor</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: subClass,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (superClass) <span class="title function_">_setPrototypeOf</span>(subClass, superClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getPrototypeOf</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  _getPrototypeOf = <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> ? <span class="title class_">Object</span>.<span class="property">getPrototypeOf</span> : <span class="keyword">function</span> <span class="title function_">_getPrototypeOf</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> o.<span class="property">__proto__</span> || <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(o);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_getPrototypeOf</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_setPrototypeOf</span>(<span class="params">o, p</span>) &#123;</span><br><span class="line">  _setPrototypeOf = <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> || <span class="keyword">function</span> <span class="title function_">_setPrototypeOf</span>(<span class="params">o, p</span>) &#123;</span><br><span class="line">    o.<span class="property">__proto__</span> = p;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_setPrototypeOf</span>(o, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isNativeReflectConstruct</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Reflect</span> === <span class="string">&quot;undefined&quot;</span> || !<span class="title class_">Reflect</span>.<span class="property">construct</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="property">construct</span>.<span class="property">sham</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Proxy</span> === <span class="string">&quot;function&quot;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Date</span>, [], <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_construct</span>(<span class="params">Parent, args, Class</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isNativeReflectConstruct</span>()) &#123;</span><br><span class="line">    _construct = <span class="title class_">Reflect</span>.<span class="property">construct</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _construct = <span class="keyword">function</span> <span class="title function_">_construct</span>(<span class="params">Parent, args, Class</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = [<span class="literal">null</span>];</span><br><span class="line">      a.<span class="property">push</span>.<span class="title function_">apply</span>(a, args);</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">Constructor</span> = <span class="title class_">Function</span>.<span class="property">bind</span>.<span class="title function_">apply</span>(<span class="title class_">Parent</span>, a);</span><br><span class="line">      <span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">Constructor</span>();</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Class</span>) <span class="title function_">_setPrototypeOf</span>(instance, <span class="title class_">Class</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _construct.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_assertThisInitialized</span>(<span class="params">self</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (self === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">&quot;this hasn&#x27;t been initialised - super() hasn&#x27;t been called&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_possibleConstructorReturn</span>(<span class="params">self, call</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> call === <span class="string">&quot;function&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> call;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_assertThisInitialized</span>(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_superPropBase</span>(<span class="params">object, property</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(object, property)) &#123;</span><br><span class="line">    object = <span class="title function_">_getPrototypeOf</span>(object);</span><br><span class="line">    <span class="keyword">if</span> (object === <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Reflect</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="title class_">Reflect</span>.<span class="property">get</span>) &#123;</span><br><span class="line">    _get = <span class="title class_">Reflect</span>.<span class="property">get</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _get = <span class="keyword">function</span> <span class="title function_">_get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> base = <span class="title function_">_superPropBase</span>(target, property);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!base) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">var</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(base, property);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (desc.<span class="property">get</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> desc.<span class="property">get</span>.<span class="title function_">call</span>(receiver);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> desc.<span class="property">value</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_get</span>(target, property, receiver || target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> consolePrefix = <span class="string">&#x27;SweetAlert2:&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter the unique values into a new array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">arr</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uniqueArray = <span class="keyword">function</span> <span class="title function_">uniqueArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the array ob object values (Object.values isn&#x27;t supported in IE11)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectValues = <span class="keyword">function</span> <span class="title function_">objectValues</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert NodeList to Array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">nodeList</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toArray = <span class="keyword">function</span> <span class="title function_">toArray</span>(<span class="params">nodeList</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(nodeList);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Standardise console warnings</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> warn = <span class="keyword">function</span> <span class="title function_">warn</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(consolePrefix, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(message));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Standardise console errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(consolePrefix, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(message));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Private global state for `warnOnce`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">Array</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> previousWarnOnceMessages = [];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show a console warning, but only if it hasn&#x27;t already been shown</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> warnOnce = <span class="keyword">function</span> <span class="title function_">warnOnce</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(previousWarnOnceMessages.<span class="title function_">indexOf</span>(message) !== -<span class="number">1</span>)) &#123;</span><br><span class="line">    previousWarnOnceMessages.<span class="title function_">push</span>(message);</span><br><span class="line">    <span class="title function_">warn</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show a one-time console warning about deprecated params/methods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> warnAboutDepreation = <span class="keyword">function</span> <span class="title function_">warnAboutDepreation</span>(<span class="params">deprecatedParam, useInstead</span>) &#123;</span><br><span class="line">  <span class="title function_">warnOnce</span>(<span class="string">&quot;\&quot;&quot;</span>.<span class="title function_">concat</span>(deprecatedParam, <span class="string">&quot;\&quot; is deprecated and will be removed in the next major release. Please use \&quot;&quot;</span>).<span class="title function_">concat</span>(useInstead, <span class="string">&quot;\&quot; instead.&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If `arg` is a function, call it (with no arguments or context) and return the result.</span></span><br><span class="line"><span class="comment"> * Otherwise, just pass the value through</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">arg</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callIfFunction = <span class="keyword">function</span> <span class="title function_">callIfFunction</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> arg === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">arg</span>() : arg;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isPromise = <span class="keyword">function</span> <span class="title function_">isPromise</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arg &amp;&amp; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(arg) === arg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">DismissReason</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;</span><br><span class="line">  <span class="attr">cancel</span>: <span class="string">&#x27;cancel&#x27;</span>,</span><br><span class="line">  <span class="attr">backdrop</span>: <span class="string">&#x27;backdrop&#x27;</span>,</span><br><span class="line">  <span class="attr">close</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">  <span class="attr">esc</span>: <span class="string">&#x27;esc&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="string">&#x27;timer&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> argsToParams = <span class="keyword">function</span> <span class="title function_">argsToParams</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (<span class="title function_">_typeof</span>(args[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="title function_">_extends</span>(params, args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;type&#x27;</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">name, index</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="title function_">_typeof</span>(args[index])) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">            params[name] = args[index];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;undefined&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="title function_">error</span>(<span class="string">&quot;Unexpected type of &quot;</span>.<span class="title function_">concat</span>(name, <span class="string">&quot;! Expected \&quot;string\&quot;, got &quot;</span>).<span class="title function_">concat</span>(<span class="title function_">_typeof</span>(args[index])));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swalPrefix = <span class="string">&#x27;swal2-&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> prefix = <span class="keyword">function</span> <span class="title function_">prefix</span>(<span class="params">items</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> items) &#123;</span><br><span class="line">    result[items[i]] = swalPrefix + items[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> swalClasses = <span class="title function_">prefix</span>([<span class="string">&#x27;container&#x27;</span>, <span class="string">&#x27;shown&#x27;</span>, <span class="string">&#x27;height-auto&#x27;</span>, <span class="string">&#x27;iosfix&#x27;</span>, <span class="string">&#x27;popup&#x27;</span>, <span class="string">&#x27;modal&#x27;</span>, <span class="string">&#x27;no-backdrop&#x27;</span>, <span class="string">&#x27;toast&#x27;</span>, <span class="string">&#x27;toast-shown&#x27;</span>, <span class="string">&#x27;toast-column&#x27;</span>, <span class="string">&#x27;show&#x27;</span>, <span class="string">&#x27;hide&#x27;</span>, <span class="string">&#x27;noanimation&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;header&#x27;</span>, <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;actions&#x27;</span>, <span class="string">&#x27;confirm&#x27;</span>, <span class="string">&#x27;cancel&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;radio&#x27;</span>, <span class="string">&#x27;checkbox&#x27;</span>, <span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;textarea&#x27;</span>, <span class="string">&#x27;inputerror&#x27;</span>, <span class="string">&#x27;validation-message&#x27;</span>, <span class="string">&#x27;progress-steps&#x27;</span>, <span class="string">&#x27;active-progress-step&#x27;</span>, <span class="string">&#x27;progress-step&#x27;</span>, <span class="string">&#x27;progress-step-line&#x27;</span>, <span class="string">&#x27;loading&#x27;</span>, <span class="string">&#x27;styled&#x27;</span>, <span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;top-start&#x27;</span>, <span class="string">&#x27;top-end&#x27;</span>, <span class="string">&#x27;top-left&#x27;</span>, <span class="string">&#x27;top-right&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;center-start&#x27;</span>, <span class="string">&#x27;center-end&#x27;</span>, <span class="string">&#x27;center-left&#x27;</span>, <span class="string">&#x27;center-right&#x27;</span>, <span class="string">&#x27;bottom&#x27;</span>, <span class="string">&#x27;bottom-start&#x27;</span>, <span class="string">&#x27;bottom-end&#x27;</span>, <span class="string">&#x27;bottom-left&#x27;</span>, <span class="string">&#x27;bottom-right&#x27;</span>, <span class="string">&#x27;grow-row&#x27;</span>, <span class="string">&#x27;grow-column&#x27;</span>, <span class="string">&#x27;grow-fullscreen&#x27;</span>, <span class="string">&#x27;rtl&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> iconTypes = <span class="title function_">prefix</span>([<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;question&#x27;</span>, <span class="string">&#x27;error&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> states = &#123;</span><br><span class="line">  <span class="attr">previousBodyPadding</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> hasClass = <span class="keyword">function</span> <span class="title function_">hasClass</span>(<span class="params">elem, className</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> elem.<span class="property">classList</span>.<span class="title function_">contains</span>(className);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeCustomClasses = <span class="keyword">function</span> <span class="title function_">removeCustomClasses</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="title function_">toArray</span>(elem.<span class="property">classList</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="title function_">objectValues</span>(swalClasses).<span class="title function_">indexOf</span>(className) !== -<span class="number">1</span>) &amp;&amp; !(<span class="title function_">objectValues</span>(iconTypes).<span class="title function_">indexOf</span>(className) !== -<span class="number">1</span>)) &#123;</span><br><span class="line">      elem.<span class="property">classList</span>.<span class="title function_">remove</span>(className);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> applyCustomClass = <span class="keyword">function</span> <span class="title function_">applyCustomClass</span>(<span class="params">elem, customClass, className</span>) &#123;</span><br><span class="line">  <span class="title function_">removeCustomClasses</span>(elem);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (customClass &amp;&amp; customClass[className]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> customClass[className] !== <span class="string">&#x27;string&#x27;</span> &amp;&amp; !customClass[className].<span class="property">forEach</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">warn</span>(<span class="string">&quot;Invalid type of customClass.&quot;</span>.<span class="title function_">concat</span>(className, <span class="string">&quot;! Expected string or iterable object, got \&quot;&quot;</span>).<span class="title function_">concat</span>(<span class="title function_">_typeof</span>(customClass[className]), <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addClass</span>(elem, customClass[className]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInput</span>(<span class="params">content, inputType</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!inputType) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (inputType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;select&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;textarea&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getChildByClass</span>(content, swalClasses[inputType]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;checkbox&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">checkbox</span>, <span class="string">&quot; input&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;radio&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">radio</span>, <span class="string">&quot; input:checked&quot;</span>)) || content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">radio</span>, <span class="string">&quot; input:first-child&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;range&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">range</span>, <span class="string">&quot; input&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> focusInput = <span class="keyword">function</span> <span class="title function_">focusInput</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  input.<span class="title function_">focus</span>(); <span class="comment">// place cursor at end of text in text input</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">type</span> !== <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// http://stackoverflow.com/a/2345915</span></span><br><span class="line">    <span class="keyword">var</span> val = input.<span class="property">value</span>;</span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    input.<span class="property">value</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> toggleClass = <span class="keyword">function</span> <span class="title function_">toggleClass</span>(<span class="params">target, classList, condition</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!target || !classList) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> classList === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    classList = classList.<span class="title function_">split</span>(<span class="regexp">/\s+/</span>).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  classList.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">forEach</span>) &#123;</span><br><span class="line">      target.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">        condition ? elem.<span class="property">classList</span>.<span class="title function_">add</span>(className) : elem.<span class="property">classList</span>.<span class="title function_">remove</span>(className);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      condition ? target.<span class="property">classList</span>.<span class="title function_">add</span>(className) : target.<span class="property">classList</span>.<span class="title function_">remove</span>(className);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addClass = <span class="keyword">function</span> <span class="title function_">addClass</span>(<span class="params">target, classList</span>) &#123;</span><br><span class="line">  <span class="title function_">toggleClass</span>(target, classList, <span class="literal">true</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> removeClass = <span class="keyword">function</span> <span class="title function_">removeClass</span>(<span class="params">target, classList</span>) &#123;</span><br><span class="line">  <span class="title function_">toggleClass</span>(target, classList, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getChildByClass = <span class="keyword">function</span> <span class="title function_">getChildByClass</span>(<span class="params">elem, className</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elem.<span class="property">childNodes</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasClass</span>(elem.<span class="property">childNodes</span>[i], className)) &#123;</span><br><span class="line">      <span class="keyword">return</span> elem.<span class="property">childNodes</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> applyNumericalStyle = <span class="keyword">function</span> <span class="title function_">applyNumericalStyle</span>(<span class="params">elem, property, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value || <span class="built_in">parseInt</span>(value) === <span class="number">0</span>) &#123;</span><br><span class="line">    elem.<span class="property">style</span>[property] = <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> ? value + <span class="string">&#x27;px&#x27;</span> : value;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elem.<span class="property">style</span>.<span class="title function_">removeProperty</span>(property);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> show = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> display = <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; <span class="variable language_">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="variable language_">arguments</span>[<span class="number">1</span>] : <span class="string">&#x27;flex&#x27;</span>;</span><br><span class="line">  elem.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  elem.<span class="property">style</span>.<span class="property">display</span> = display;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> hide = <span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  elem.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  elem.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> toggle = <span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params">elem, condition, display</span>) &#123;</span><br><span class="line">  condition ? <span class="title function_">show</span>(elem, display) : <span class="title function_">hide</span>(elem);</span><br><span class="line">&#125;; <span class="comment">// borrowed from jquery $(elem).is(&#x27;:visible&#x27;) implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isVisible = <span class="keyword">function</span> <span class="title function_">isVisible</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !!(elem &amp;&amp; (elem.<span class="property">offsetWidth</span> || elem.<span class="property">offsetHeight</span> || elem.<span class="title function_">getClientRects</span>().<span class="property">length</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isScrollable = <span class="keyword">function</span> <span class="title function_">isScrollable</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !!(elem.<span class="property">scrollHeight</span> &gt; elem.<span class="property">clientHeight</span>);</span><br><span class="line">&#125;; <span class="comment">// borrowed from https://stackoverflow.com/a/46352119</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasCssAnimation = <span class="keyword">function</span> <span class="title function_">hasCssAnimation</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(elem);</span><br><span class="line">  <span class="keyword">var</span> animDuration = <span class="built_in">parseFloat</span>(style.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;animation-duration&#x27;</span>) || <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> transDuration = <span class="built_in">parseFloat</span>(style.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;transition-duration&#x27;</span>) || <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> animDuration &gt; <span class="number">0</span> || transDuration &gt; <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> contains = <span class="keyword">function</span> <span class="title function_">contains</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> haystack.<span class="property">contains</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> haystack.<span class="title function_">contains</span>(needle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getContainer = <span class="keyword">function</span> <span class="title function_">getContainer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.&#x27;</span> + swalClasses.<span class="property">container</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> elementBySelector = <span class="keyword">function</span> <span class="title function_">elementBySelector</span>(<span class="params">selectorString</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="keyword">return</span> container ? container.<span class="title function_">querySelector</span>(selectorString) : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elementByClass = <span class="keyword">function</span> <span class="title function_">elementByClass</span>(<span class="params">className</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementBySelector</span>(<span class="string">&#x27;.&#x27;</span> + className);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getPopup = <span class="keyword">function</span> <span class="title function_">getPopup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">popup</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getIcons = <span class="keyword">function</span> <span class="title function_">getIcons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">toArray</span>(popup.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.&#x27;</span> + swalClasses.<span class="property">icon</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getIcon = <span class="keyword">function</span> <span class="title function_">getIcon</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> visibleIcon = <span class="title function_">getIcons</span>().<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">icon</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isVisible</span>(icon);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> visibleIcon.<span class="property">length</span> ? visibleIcon[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getTitle = <span class="keyword">function</span> <span class="title function_">getTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">title</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getContent = <span class="keyword">function</span> <span class="title function_">getContent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">content</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getImage = <span class="keyword">function</span> <span class="title function_">getImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">image</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getProgressSteps = <span class="keyword">function</span> <span class="title function_">getProgressSteps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses[<span class="string">&#x27;progress-steps&#x27;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getValidationMessage = <span class="keyword">function</span> <span class="title function_">getValidationMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses[<span class="string">&#x27;validation-message&#x27;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getConfirmButton = <span class="keyword">function</span> <span class="title function_">getConfirmButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementBySelector</span>(<span class="string">&#x27;.&#x27;</span> + swalClasses.<span class="property">actions</span> + <span class="string">&#x27; .&#x27;</span> + swalClasses.<span class="property">confirm</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getCancelButton = <span class="keyword">function</span> <span class="title function_">getCancelButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementBySelector</span>(<span class="string">&#x27;.&#x27;</span> + swalClasses.<span class="property">actions</span> + <span class="string">&#x27; .&#x27;</span> + swalClasses.<span class="property">cancel</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getActions = <span class="keyword">function</span> <span class="title function_">getActions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">actions</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getHeader = <span class="keyword">function</span> <span class="title function_">getHeader</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">header</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getFooter = <span class="keyword">function</span> <span class="title function_">getFooter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">footer</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getCloseButton = <span class="keyword">function</span> <span class="title function_">getCloseButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">elementByClass</span>(swalClasses.<span class="property">close</span>);</span><br><span class="line">&#125;; <span class="comment">// https://github.com/jkup/focusable/blob/master/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> focusable = <span class="string">&quot;\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\&quot;0\&quot;],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> getFocusableElements = <span class="keyword">function</span> <span class="title function_">getFocusableElements</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> focusableElementsWithTabindex = <span class="title function_">toArray</span>(<span class="title function_">getPopup</span>().<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[tabindex]:not([tabindex=&quot;-1&quot;]):not([tabindex=&quot;0&quot;])&#x27;</span>)) <span class="comment">// sort according to tabindex</span></span><br><span class="line">  .<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    a = <span class="built_in">parseInt</span>(a.<span class="title function_">getAttribute</span>(<span class="string">&#x27;tabindex&#x27;</span>));</span><br><span class="line">    b = <span class="built_in">parseInt</span>(b.<span class="title function_">getAttribute</span>(<span class="string">&#x27;tabindex&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> otherFocusableElements = <span class="title function_">toArray</span>(<span class="title function_">getPopup</span>().<span class="title function_">querySelectorAll</span>(focusable)).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;tabindex&#x27;</span>) !== <span class="string">&#x27;-1&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">uniqueArray</span>(focusableElementsWithTabindex.<span class="title function_">concat</span>(otherFocusableElements)).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isVisible</span>(el);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isModal = <span class="keyword">function</span> <span class="title function_">isModal</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !<span class="title function_">isToast</span>() &amp;&amp; !<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(swalClasses[<span class="string">&#x27;no-backdrop&#x27;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isToast = <span class="keyword">function</span> <span class="title function_">isToast</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(swalClasses[<span class="string">&#x27;toast-shown&#x27;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> isLoading = <span class="keyword">function</span> <span class="title function_">isLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getPopup</span>().<span class="title function_">hasAttribute</span>(<span class="string">&#x27;data-loading&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detect Node env</span></span><br><span class="line"><span class="keyword">var</span> isNodeEnv = <span class="keyword">function</span> <span class="title function_">isNodeEnv</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> <span class="variable language_">document</span> === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sweetHTML = <span class="string">&quot;\n &lt;div aria-labelledby=\&quot;&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">title</span>, <span class="string">&quot;\&quot; aria-describedby=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">content</span>, <span class="string">&quot;\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">popup</span>, <span class="string">&quot;\&quot; tabindex=\&quot;-1\&quot;&gt;\n   &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">header</span>, <span class="string">&quot;\&quot;&gt;\n     &lt;ul class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses[<span class="string">&#x27;progress-steps&#x27;</span>], <span class="string">&quot;\&quot;&gt;&lt;/ul&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(iconTypes.<span class="property">error</span>, <span class="string">&quot;\&quot;&gt;\n       &lt;span class=\&quot;swal2-x-mark\&quot;&gt;&lt;span class=\&quot;swal2-x-mark-line-left\&quot;&gt;&lt;/span&gt;&lt;span class=\&quot;swal2-x-mark-line-right\&quot;&gt;&lt;/span&gt;&lt;/span&gt;\n     &lt;/div&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(iconTypes.<span class="property">question</span>, <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(iconTypes.<span class="property">warning</span>, <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(iconTypes.<span class="property">info</span>, <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot; &quot;</span>).<span class="title function_">concat</span>(iconTypes.<span class="property">success</span>, <span class="string">&quot;\&quot;&gt;\n       &lt;div class=\&quot;swal2-success-circular-line-left\&quot;&gt;&lt;/div&gt;\n       &lt;span class=\&quot;swal2-success-line-tip\&quot;&gt;&lt;/span&gt; &lt;span class=\&quot;swal2-success-line-long\&quot;&gt;&lt;/span&gt;\n       &lt;div class=\&quot;swal2-success-ring\&quot;&gt;&lt;/div&gt; &lt;div class=\&quot;swal2-success-fix\&quot;&gt;&lt;/div&gt;\n       &lt;div class=\&quot;swal2-success-circular-line-right\&quot;&gt;&lt;/div&gt;\n     &lt;/div&gt;\n     &lt;img class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">image</span>, <span class="string">&quot;\&quot; /&gt;\n     &lt;h2 class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">title</span>, <span class="string">&quot;\&quot; id=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">title</span>, <span class="string">&quot;\&quot;&gt;&lt;/h2&gt;\n     &lt;button type=\&quot;button\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">close</span>, <span class="string">&quot;\&quot;&gt;&lt;/button&gt;\n   &lt;/div&gt;\n   &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">content</span>, <span class="string">&quot;\&quot;&gt;\n     &lt;div id=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">content</span>, <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n     &lt;input class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">input</span>, <span class="string">&quot;\&quot; /&gt;\n     &lt;input type=\&quot;file\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">file</span>, <span class="string">&quot;\&quot; /&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">range</span>, <span class="string">&quot;\&quot;&gt;\n       &lt;input type=\&quot;range\&quot; /&gt;\n       &lt;output&gt;&lt;/output&gt;\n     &lt;/div&gt;\n     &lt;select class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">select</span>, <span class="string">&quot;\&quot;&gt;&lt;/select&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">radio</span>, <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n     &lt;label for=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">checkbox</span>, <span class="string">&quot;\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">checkbox</span>, <span class="string">&quot;\&quot;&gt;\n       &lt;input type=\&quot;checkbox\&quot; /&gt;\n       &lt;span class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">label</span>, <span class="string">&quot;\&quot;&gt;&lt;/span&gt;\n     &lt;/label&gt;\n     &lt;textarea class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">textarea</span>, <span class="string">&quot;\&quot;&gt;&lt;/textarea&gt;\n     &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses[<span class="string">&#x27;validation-message&#x27;</span>], <span class="string">&quot;\&quot; id=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses[<span class="string">&#x27;validation-message&#x27;</span>], <span class="string">&quot;\&quot;&gt;&lt;/div&gt;\n   &lt;/div&gt;\n   &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">actions</span>, <span class="string">&quot;\&quot;&gt;\n     &lt;button type=\&quot;button\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">confirm</span>, <span class="string">&quot;\&quot;&gt;OK&lt;/button&gt;\n     &lt;button type=\&quot;button\&quot; class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">cancel</span>, <span class="string">&quot;\&quot;&gt;Cancel&lt;/button&gt;\n   &lt;/div&gt;\n   &lt;div class=\&quot;&quot;</span>).<span class="title function_">concat</span>(swalClasses.<span class="property">footer</span>, <span class="string">&quot;\&quot;&gt;\n   &lt;/div&gt;\n &lt;/div&gt;\n&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/(^|\n)\s*/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resetOldContainer = <span class="keyword">function</span> <span class="title function_">resetOldContainer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> oldContainer = <span class="title function_">getContainer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldContainer) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  oldContainer.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(oldContainer);</span><br><span class="line">  <span class="title function_">removeClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>], [swalClasses[<span class="string">&#x27;no-backdrop&#x27;</span>], swalClasses[<span class="string">&#x27;toast-shown&#x27;</span>], swalClasses[<span class="string">&#x27;has-column&#x27;</span>]]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oldInputVal; <span class="comment">// IE11 workaround, see #1109 for details</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resetValidationMessage = <span class="keyword">function</span> <span class="title function_">resetValidationMessage</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Swal</span>.<span class="title function_">isVisible</span>() &amp;&amp; oldInputVal !== e.<span class="property">target</span>.<span class="property">value</span>) &#123;</span><br><span class="line">    <span class="title class_">Swal</span>.<span class="title function_">resetValidationMessage</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  oldInputVal = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addInputChangeListeners = <span class="keyword">function</span> <span class="title function_">addInputChangeListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="title function_">getContent</span>();</span><br><span class="line">  <span class="keyword">var</span> input = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">input</span>);</span><br><span class="line">  <span class="keyword">var</span> file = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">file</span>);</span><br><span class="line">  <span class="keyword">var</span> range = content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">range</span>, <span class="string">&quot; input&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> rangeOutput = content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">range</span>, <span class="string">&quot; output&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> select = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">select</span>);</span><br><span class="line">  <span class="keyword">var</span> checkbox = content.<span class="title function_">querySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">checkbox</span>, <span class="string">&quot; input&quot;</span>));</span><br><span class="line">  <span class="keyword">var</span> textarea = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">textarea</span>);</span><br><span class="line">  input.<span class="property">oninput</span> = resetValidationMessage;</span><br><span class="line">  file.<span class="property">onchange</span> = resetValidationMessage;</span><br><span class="line">  select.<span class="property">onchange</span> = resetValidationMessage;</span><br><span class="line">  checkbox.<span class="property">onchange</span> = resetValidationMessage;</span><br><span class="line">  textarea.<span class="property">oninput</span> = resetValidationMessage;</span><br><span class="line"></span><br><span class="line">  range.<span class="property">oninput</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">resetValidationMessage</span>(e);</span><br><span class="line">    rangeOutput.<span class="property">value</span> = range.<span class="property">value</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  range.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">resetValidationMessage</span>(e);</span><br><span class="line">    range.<span class="property">nextSibling</span>.<span class="property">value</span> = range.<span class="property">value</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTarget = <span class="keyword">function</span> <span class="title function_">getTarget</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> target === <span class="string">&#x27;string&#x27;</span> ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(target) : target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setupAccessibility = <span class="keyword">function</span> <span class="title function_">setupAccessibility</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line">  popup.<span class="title function_">setAttribute</span>(<span class="string">&#x27;role&#x27;</span>, params.<span class="property">toast</span> ? <span class="string">&#x27;alert&#x27;</span> : <span class="string">&#x27;dialog&#x27;</span>);</span><br><span class="line">  popup.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-live&#x27;</span>, params.<span class="property">toast</span> ? <span class="string">&#x27;polite&#x27;</span> : <span class="string">&#x27;assertive&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">toast</span>) &#123;</span><br><span class="line">    popup.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-modal&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setupRTL = <span class="keyword">function</span> <span class="title function_">setupRTL</span>(<span class="params">targetElement</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(targetElement).<span class="property">direction</span> === <span class="string">&#x27;rtl&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(<span class="title function_">getContainer</span>(), swalClasses.<span class="property">rtl</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add modal + backdrop to DOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="comment">// Clean up the old popup container if it exists</span></span><br><span class="line">  <span class="title function_">resetOldContainer</span>();</span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isNodeEnv</span>()) &#123;</span><br><span class="line">    <span class="title function_">error</span>(<span class="string">&#x27;SweetAlert2 requires document to initialize&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  container.<span class="property">className</span> = swalClasses.<span class="property">container</span>;</span><br><span class="line">  container.<span class="property">innerHTML</span> = sweetHTML;</span><br><span class="line">  <span class="keyword">var</span> targetElement = <span class="title function_">getTarget</span>(params.<span class="property">target</span>);</span><br><span class="line">  targetElement.<span class="title function_">appendChild</span>(container);</span><br><span class="line">  <span class="title function_">setupAccessibility</span>(params);</span><br><span class="line">  <span class="title function_">setupRTL</span>(targetElement);</span><br><span class="line">  <span class="title function_">addInputChangeListeners</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parseHtmlToContainer = <span class="keyword">function</span> <span class="title function_">parseHtmlToContainer</span>(<span class="params">param, target</span>) &#123;</span><br><span class="line">  <span class="comment">// DOM element</span></span><br><span class="line">  <span class="keyword">if</span> (param <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">    target.<span class="title function_">appendChild</span>(param); <span class="comment">// JQuery element(s)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">_typeof</span>(param) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">handleJqueryElem</span>(target, param); <span class="comment">// Plain string</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param) &#123;</span><br><span class="line">    target.<span class="property">innerHTML</span> = param;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleJqueryElem = <span class="keyword">function</span> <span class="title function_">handleJqueryElem</span>(<span class="params">target, elem</span>) &#123;</span><br><span class="line">  target.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> <span class="keyword">in</span> elem) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i <span class="keyword">in</span> elem; i++) &#123;</span><br><span class="line">      target.<span class="title function_">appendChild</span>(elem[i].<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.<span class="title function_">appendChild</span>(elem.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animationEndEvent = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Prevent run in Node env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isNodeEnv</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> testEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> transEndEventNames = &#123;</span><br><span class="line">    <span class="title class_">WebkitAnimation</span>: <span class="string">&#x27;webkitAnimationEnd&#x27;</span>,</span><br><span class="line">    <span class="title class_">OAnimation</span>: <span class="string">&#x27;oAnimationEnd oanimationend&#x27;</span>,</span><br><span class="line">    <span class="attr">animation</span>: <span class="string">&#x27;animationend&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> transEndEventNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(transEndEventNames, i) &amp;&amp; <span class="keyword">typeof</span> testEl.<span class="property">style</span>[i] !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> transEndEventNames[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Measure width of scrollbar</span></span><br><span class="line"><span class="comment">// https://github.com/twbs/bootstrap/blob/master/js/modal.js#L279-L286</span></span><br><span class="line"><span class="keyword">var</span> measureScrollbar = <span class="keyword">function</span> <span class="title function_">measureScrollbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> supportsTouch = <span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> || navigator.<span class="property">msMaxTouchPoints</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (supportsTouch) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> scrollDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  scrollDiv.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;50px&#x27;</span>;</span><br><span class="line">  scrollDiv.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;50px&#x27;</span>;</span><br><span class="line">  scrollDiv.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;scroll&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scrollDiv);</span><br><span class="line">  <span class="keyword">var</span> scrollbarWidth = scrollDiv.<span class="property">offsetWidth</span> - scrollDiv.<span class="property">clientWidth</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(scrollDiv);</span><br><span class="line">  <span class="keyword">return</span> scrollbarWidth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderActions = <span class="keyword">function</span> <span class="title function_">renderActions</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> actions = <span class="title function_">getActions</span>();</span><br><span class="line">  <span class="keyword">var</span> confirmButton = <span class="title function_">getConfirmButton</span>();</span><br><span class="line">  <span class="keyword">var</span> cancelButton = <span class="title function_">getCancelButton</span>(); <span class="comment">// Actions (buttons) wrapper</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">showConfirmButton</span> &amp;&amp; !params.<span class="property">showCancelButton</span>) &#123;</span><br><span class="line">    <span class="title function_">hide</span>(actions);</span><br><span class="line">  &#125; <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(actions, params.<span class="property">customClass</span>, <span class="string">&#x27;actions&#x27;</span>); <span class="comment">// Render confirm button</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderButton</span>(confirmButton, <span class="string">&#x27;confirm&#x27;</span>, params); <span class="comment">// render Cancel Button</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderButton</span>(cancelButton, <span class="string">&#x27;cancel&#x27;</span>, params);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">buttonsStyling</span>) &#123;</span><br><span class="line">    <span class="title function_">handleButtonsStyling</span>(confirmButton, cancelButton, params);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">removeClass</span>([confirmButton, cancelButton], swalClasses.<span class="property">styled</span>);</span><br><span class="line">    confirmButton.<span class="property">style</span>.<span class="property">backgroundColor</span> = confirmButton.<span class="property">style</span>.<span class="property">borderLeftColor</span> = confirmButton.<span class="property">style</span>.<span class="property">borderRightColor</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    cancelButton.<span class="property">style</span>.<span class="property">backgroundColor</span> = cancelButton.<span class="property">style</span>.<span class="property">borderLeftColor</span> = cancelButton.<span class="property">style</span>.<span class="property">borderRightColor</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">reverseButtons</span>) &#123;</span><br><span class="line">    confirmButton.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(cancelButton, confirmButton);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleButtonsStyling</span>(<span class="params">confirmButton, cancelButton, params</span>) &#123;</span><br><span class="line">  <span class="title function_">addClass</span>([confirmButton, cancelButton], swalClasses.<span class="property">styled</span>); <span class="comment">// Buttons background colors</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">confirmButtonColor</span>) &#123;</span><br><span class="line">    confirmButton.<span class="property">style</span>.<span class="property">backgroundColor</span> = params.<span class="property">confirmButtonColor</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">cancelButtonColor</span>) &#123;</span><br><span class="line">    cancelButton.<span class="property">style</span>.<span class="property">backgroundColor</span> = params.<span class="property">cancelButtonColor</span>;</span><br><span class="line">  &#125; <span class="comment">// Loading state</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> confirmButtonBackgroundColor = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(confirmButton).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;background-color&#x27;</span>);</span><br><span class="line">  confirmButton.<span class="property">style</span>.<span class="property">borderLeftColor</span> = confirmButtonBackgroundColor;</span><br><span class="line">  confirmButton.<span class="property">style</span>.<span class="property">borderRightColor</span> = confirmButtonBackgroundColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderButton</span>(<span class="params">button, buttonType, params</span>) &#123;</span><br><span class="line">  <span class="title function_">toggle</span>(button, params[<span class="string">&#x27;showC&#x27;</span> + buttonType.<span class="title function_">substring</span>(<span class="number">1</span>) + <span class="string">&#x27;Button&#x27;</span>], <span class="string">&#x27;inline-block&#x27;</span>);</span><br><span class="line">  button.<span class="property">innerHTML</span> = params[buttonType + <span class="string">&#x27;ButtonText&#x27;</span>]; <span class="comment">// Set caption text</span></span><br><span class="line"></span><br><span class="line">  button.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-label&#x27;</span>, params[buttonType + <span class="string">&#x27;ButtonAriaLabel&#x27;</span>]); <span class="comment">// ARIA label</span></span><br><span class="line">  <span class="comment">// Add buttons custom classes</span></span><br><span class="line"></span><br><span class="line">  button.<span class="property">className</span> = swalClasses[buttonType];</span><br><span class="line">  <span class="title function_">applyCustomClass</span>(button, params.<span class="property">customClass</span>, buttonType + <span class="string">&#x27;Button&#x27;</span>);</span><br><span class="line">  <span class="title function_">addClass</span>(button, params[buttonType + <span class="string">&#x27;ButtonClass&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleBackdropParam</span>(<span class="params">container, backdrop</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> backdrop === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    container.<span class="property">style</span>.<span class="property">background</span> = backdrop;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!backdrop) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>], swalClasses[<span class="string">&#x27;no-backdrop&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handlePositionParam</span>(<span class="params">container, position</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (position <span class="keyword">in</span> swalClasses) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(container, swalClasses[position]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;The &quot;position&quot; parameter is not valid, defaulting to &quot;center&quot;&#x27;</span>);</span><br><span class="line">    <span class="title function_">addClass</span>(container, swalClasses.<span class="property">center</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleGrowParam</span>(<span class="params">container, grow</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (grow &amp;&amp; <span class="keyword">typeof</span> grow === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> growClass = <span class="string">&#x27;grow-&#x27;</span> + grow;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (growClass <span class="keyword">in</span> swalClasses) &#123;</span><br><span class="line">      <span class="title function_">addClass</span>(container, swalClasses[growClass]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderContainer = <span class="keyword">function</span> <span class="title function_">renderContainer</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!container) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleBackdropParam</span>(container, params.<span class="property">backdrop</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">backdrop</span> &amp;&amp; params.<span class="property">allowOutsideClick</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;&quot;allowOutsideClick&quot; parameter requires `backdrop` parameter to be set to `true`&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handlePositionParam</span>(container, params.<span class="property">position</span>);</span><br><span class="line">  <span class="title function_">handleGrowParam</span>(container, params.<span class="property">grow</span>); <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(container, params.<span class="property">customClass</span>, <span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">customContainerClass</span>) &#123;</span><br><span class="line">    <span class="comment">// @deprecated</span></span><br><span class="line">    <span class="title function_">addClass</span>(container, params.<span class="property">customContainerClass</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This module containts `WeakMap`s for each effectively-&quot;private  property&quot; that a `Swal` has.</span></span><br><span class="line"><span class="comment"> * For example, to set the private property &quot;foo&quot; of `this` to &quot;bar&quot;, you can `privateProps.foo.set(this, &#x27;bar&#x27;)`</span></span><br><span class="line"><span class="comment"> * This is the approach that Babel will probably take to implement private methods/fields</span></span><br><span class="line"><span class="comment"> *   https://github.com/tc39/proposal-private-methods</span></span><br><span class="line"><span class="comment"> *   https://github.com/babel/babel/pull/7555</span></span><br><span class="line"><span class="comment"> * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*</span></span><br><span class="line"><span class="comment"> *   then we can use that language feature.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> privateProps = &#123;</span><br><span class="line">  <span class="attr">promise</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>(),</span><br><span class="line">  <span class="attr">innerParams</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>(),</span><br><span class="line">  <span class="attr">domCache</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputTypes = [<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;radio&#x27;</span>, <span class="string">&#x27;checkbox&#x27;</span>, <span class="string">&#x27;textarea&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> renderInput = <span class="keyword">function</span> <span class="title function_">renderInput</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="title function_">getContent</span>();</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(instance);</span><br><span class="line">  <span class="keyword">var</span> rerender = !innerParams || params.<span class="property">input</span> !== innerParams.<span class="property">input</span>;</span><br><span class="line">  inputTypes.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">inputType</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> inputClass = swalClasses[inputType];</span><br><span class="line">    <span class="keyword">var</span> inputContainer = <span class="title function_">getChildByClass</span>(content, inputClass); <span class="comment">// set attributes</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">setAttributes</span>(inputType, params.<span class="property">inputAttributes</span>); <span class="comment">// set class</span></span><br><span class="line"></span><br><span class="line">    inputContainer.<span class="property">className</span> = inputClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rerender) &#123;</span><br><span class="line">      <span class="title function_">hide</span>(inputContainer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">input</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rerender) &#123;</span><br><span class="line">      <span class="title function_">showInput</span>(params);</span><br><span class="line">    &#125; <span class="comment">// set custom class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">setCustomClass</span>(params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showInput = <span class="keyword">function</span> <span class="title function_">showInput</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!renderInputType[params.<span class="property">input</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">error</span>(<span class="string">&quot;Unexpected type of input! Expected \&quot;text\&quot;, \&quot;email\&quot;, \&quot;password\&quot;, \&quot;number\&quot;, \&quot;tel\&quot;, \&quot;select\&quot;, \&quot;radio\&quot;, \&quot;checkbox\&quot;, \&quot;textarea\&quot;, \&quot;file\&quot; or \&quot;url\&quot;, got \&quot;&quot;</span>.<span class="title function_">concat</span>(params.<span class="property">input</span>, <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> inputContainer = <span class="title function_">getInputContainer</span>(params.<span class="property">input</span>);</span><br><span class="line">  <span class="keyword">var</span> input = renderInputType[params.<span class="property">input</span>](inputContainer, params);</span><br><span class="line">  <span class="title function_">show</span>(input); <span class="comment">// input autofocus</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">focusInput</span>(input);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeAttributes = <span class="keyword">function</span> <span class="title function_">removeAttributes</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.<span class="property">attributes</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> attrName = input.<span class="property">attributes</span>[i].<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!([<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;style&#x27;</span>].<span class="title function_">indexOf</span>(attrName) !== -<span class="number">1</span>)) &#123;</span><br><span class="line">      input.<span class="title function_">removeAttribute</span>(attrName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setAttributes = <span class="keyword">function</span> <span class="title function_">setAttributes</span>(<span class="params">inputType, inputAttributes</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> input = <span class="title function_">getInput</span>(<span class="title function_">getContent</span>(), inputType);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeAttributes</span>(input);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> inputAttributes) &#123;</span><br><span class="line">    <span class="comment">// Do not set a placeholder for &lt;input type=&quot;range&quot;&gt;</span></span><br><span class="line">    <span class="comment">// it&#x27;ll crash Edge, #1298</span></span><br><span class="line">    <span class="keyword">if</span> (inputType === <span class="string">&#x27;range&#x27;</span> &amp;&amp; attr === <span class="string">&#x27;placeholder&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input.<span class="title function_">setAttribute</span>(attr, inputAttributes[attr]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCustomClass = <span class="keyword">function</span> <span class="title function_">setCustomClass</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> inputContainer = <span class="title function_">getInputContainer</span>(params.<span class="property">input</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">inputClass</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(inputContainer, params.<span class="property">inputClass</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">customClass</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(inputContainer, params.<span class="property">customClass</span>.<span class="property">input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setInputPlaceholder = <span class="keyword">function</span> <span class="title function_">setInputPlaceholder</span>(<span class="params">input, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input.<span class="property">placeholder</span> || params.<span class="property">inputPlaceholder</span>) &#123;</span><br><span class="line">    input.<span class="property">placeholder</span> = params.<span class="property">inputPlaceholder</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getInputContainer = <span class="keyword">function</span> <span class="title function_">getInputContainer</span>(<span class="params">inputType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.<span class="property">input</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getChildByClass</span>(<span class="title function_">getContent</span>(), inputClass);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderInputType = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">text</span> = renderInputType.<span class="property">email</span> = renderInputType.<span class="property">password</span> = renderInputType.<span class="property">number</span> = renderInputType.<span class="property">tel</span> = renderInputType.<span class="property">url</span> = <span class="keyword">function</span> (<span class="params">input, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">inputValue</span> === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> params.<span class="property">inputValue</span> === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    input.<span class="property">value</span> = params.<span class="property">inputValue</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title function_">isPromise</span>(params.<span class="property">inputValue</span>)) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&quot;Unexpected type of inputValue! Expected \&quot;string\&quot;, \&quot;number\&quot; or \&quot;Promise\&quot;, got \&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title function_">_typeof</span>(params.<span class="property">inputValue</span>), <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setInputPlaceholder</span>(input, params);</span><br><span class="line">  input.<span class="property">type</span> = params.<span class="property">input</span>;</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">file</span> = <span class="keyword">function</span> (<span class="params">input, params</span>) &#123;</span><br><span class="line">  <span class="title function_">setInputPlaceholder</span>(input, params);</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">range</span> = <span class="keyword">function</span> (<span class="params">range, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> rangeInput = range.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> rangeOutput = range.<span class="title function_">querySelector</span>(<span class="string">&#x27;output&#x27;</span>);</span><br><span class="line">  rangeInput.<span class="property">value</span> = params.<span class="property">inputValue</span>;</span><br><span class="line">  rangeInput.<span class="property">type</span> = params.<span class="property">input</span>;</span><br><span class="line">  rangeOutput.<span class="property">value</span> = params.<span class="property">inputValue</span>;</span><br><span class="line">  <span class="keyword">return</span> range;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">select</span> = <span class="keyword">function</span> (<span class="params">select, params</span>) &#123;</span><br><span class="line">  select.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">inputPlaceholder</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> placeholder = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;option&#x27;</span>);</span><br><span class="line">    placeholder.<span class="property">innerHTML</span> = params.<span class="property">inputPlaceholder</span>;</span><br><span class="line">    placeholder.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    placeholder.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">    placeholder.<span class="property">selected</span> = <span class="literal">true</span>;</span><br><span class="line">    select.<span class="title function_">appendChild</span>(placeholder);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> select;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">radio</span> = <span class="keyword">function</span> (<span class="params">radio</span>) &#123;</span><br><span class="line">  radio.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> radio;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">checkbox</span> = <span class="keyword">function</span> (<span class="params">checkboxContainer, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> checkbox = <span class="title function_">getInput</span>(<span class="title function_">getContent</span>(), <span class="string">&#x27;checkbox&#x27;</span>);</span><br><span class="line">  checkbox.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line">  checkbox.<span class="property">id</span> = swalClasses.<span class="property">checkbox</span>;</span><br><span class="line">  checkbox.<span class="property">checked</span> = <span class="title class_">Boolean</span>(params.<span class="property">inputValue</span>);</span><br><span class="line">  <span class="keyword">var</span> label = checkboxContainer.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">  label.<span class="property">innerHTML</span> = params.<span class="property">inputPlaceholder</span>;</span><br><span class="line">  <span class="keyword">return</span> checkboxContainer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderInputType.<span class="property">textarea</span> = <span class="keyword">function</span> (<span class="params">textarea, params</span>) &#123;</span><br><span class="line">  textarea.<span class="property">value</span> = params.<span class="property">inputValue</span>;</span><br><span class="line">  <span class="title function_">setInputPlaceholder</span>(textarea, params);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;MutationObserver&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="comment">// #1699</span></span><br><span class="line">    <span class="keyword">var</span> initialPopupWidth = <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(<span class="title function_">getPopup</span>()).<span class="property">width</span>);</span><br><span class="line">    <span class="keyword">var</span> popupPadding = <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(<span class="title function_">getPopup</span>()).<span class="property">paddingLeft</span>) + <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(<span class="title function_">getPopup</span>()).<span class="property">paddingRight</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> outputsize = <span class="keyword">function</span> <span class="title function_">outputsize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> contentWidth = textarea.<span class="property">offsetWidth</span> + popupPadding;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (contentWidth &gt; initialPopupWidth) &#123;</span><br><span class="line">        <span class="title function_">getPopup</span>().<span class="property">style</span>.<span class="property">width</span> = contentWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">getPopup</span>().<span class="property">style</span>.<span class="property">width</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(outputsize).<span class="title function_">observe</span>(textarea, &#123;</span><br><span class="line">      <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">attributeFilter</span>: [<span class="string">&#x27;style&#x27;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> textarea;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderContent = <span class="keyword">function</span> <span class="title function_">renderContent</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="title function_">getContent</span>().<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + swalClasses.<span class="property">content</span>); <span class="comment">// Content as HTML</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">html</span>) &#123;</span><br><span class="line">    <span class="title function_">parseHtmlToContainer</span>(params.<span class="property">html</span>, content);</span><br><span class="line">    <span class="title function_">show</span>(content, <span class="string">&#x27;block&#x27;</span>); <span class="comment">// Content as plain text</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params.<span class="property">text</span>) &#123;</span><br><span class="line">    content.<span class="property">textContent</span> = params.<span class="property">text</span>;</span><br><span class="line">    <span class="title function_">show</span>(content, <span class="string">&#x27;block&#x27;</span>); <span class="comment">// No content</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">hide</span>(content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderInput</span>(instance, params); <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(<span class="title function_">getContent</span>(), params.<span class="property">customClass</span>, <span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderFooter = <span class="keyword">function</span> <span class="title function_">renderFooter</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> footer = <span class="title function_">getFooter</span>();</span><br><span class="line">  <span class="title function_">toggle</span>(footer, params.<span class="property">footer</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">footer</span>) &#123;</span><br><span class="line">    <span class="title function_">parseHtmlToContainer</span>(params.<span class="property">footer</span>, footer);</span><br><span class="line">  &#125; <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(footer, params.<span class="property">customClass</span>, <span class="string">&#x27;footer&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderCloseButton = <span class="keyword">function</span> <span class="title function_">renderCloseButton</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> closeButton = <span class="title function_">getCloseButton</span>();</span><br><span class="line">  closeButton.<span class="property">innerHTML</span> = params.<span class="property">closeButtonHtml</span>; <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(closeButton, params.<span class="property">customClass</span>, <span class="string">&#x27;closeButton&#x27;</span>);</span><br><span class="line">  <span class="title function_">toggle</span>(closeButton, params.<span class="property">showCloseButton</span>);</span><br><span class="line">  closeButton.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-label&#x27;</span>, params.<span class="property">closeButtonAriaLabel</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderIcon = <span class="keyword">function</span> <span class="title function_">renderIcon</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(instance); <span class="comment">// if the icon with the given type already rendered,</span></span><br><span class="line">  <span class="comment">// apply the custom class without re-rendering the icon</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams &amp;&amp; params.<span class="property">type</span> === innerParams.<span class="property">type</span> &amp;&amp; <span class="title function_">getIcon</span>()) &#123;</span><br><span class="line">    <span class="title function_">applyCustomClass</span>(<span class="title function_">getIcon</span>(), params.<span class="property">customClass</span>, <span class="string">&#x27;icon&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">hideAllIcons</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">adjustSuccessIconBackgoundColor</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(iconTypes).<span class="title function_">indexOf</span>(params.<span class="property">type</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> icon = <span class="title function_">elementBySelector</span>(<span class="string">&quot;.&quot;</span>.<span class="title function_">concat</span>(swalClasses.<span class="property">icon</span>, <span class="string">&quot;.&quot;</span>).<span class="title function_">concat</span>(iconTypes[params.<span class="property">type</span>]));</span><br><span class="line">    <span class="title function_">show</span>(icon); <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">applyCustomClass</span>(icon, params.<span class="property">customClass</span>, <span class="string">&#x27;icon&#x27;</span>); <span class="comment">// Animate icon</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">toggleClass</span>(icon, <span class="string">&quot;swal2-animate-&quot;</span>.<span class="title function_">concat</span>(params.<span class="property">type</span>, <span class="string">&quot;-icon&quot;</span>), params.<span class="property">animation</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">error</span>(<span class="string">&quot;Unknown type! Expected \&quot;success\&quot;, \&quot;error\&quot;, \&quot;warning\&quot;, \&quot;info\&quot; or \&quot;question\&quot;, got \&quot;&quot;</span>.<span class="title function_">concat</span>(params.<span class="property">type</span>, <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hideAllIcons = <span class="keyword">function</span> <span class="title function_">hideAllIcons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> icons = <span class="title function_">getIcons</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; icons.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">hide</span>(icons[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// Adjust success icon background color to match the popup background color</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> adjustSuccessIconBackgoundColor = <span class="keyword">function</span> <span class="title function_">adjustSuccessIconBackgoundColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line">  <span class="keyword">var</span> popupBackgroundColor = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(popup).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;background-color&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> successIconParts = popup.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[class^=swal2-success-circular-line], .swal2-success-fix&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; successIconParts.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    successIconParts[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = popupBackgroundColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderImage = <span class="keyword">function</span> <span class="title function_">renderImage</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="title function_">getImage</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">imageUrl</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hide</span>(image);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">show</span>(image); <span class="comment">// Src, alt</span></span><br><span class="line"></span><br><span class="line">  image.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, params.<span class="property">imageUrl</span>);</span><br><span class="line">  image.<span class="title function_">setAttribute</span>(<span class="string">&#x27;alt&#x27;</span>, params.<span class="property">imageAlt</span>); <span class="comment">// Width, height</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyNumericalStyle</span>(image, <span class="string">&#x27;width&#x27;</span>, params.<span class="property">imageWidth</span>);</span><br><span class="line">  <span class="title function_">applyNumericalStyle</span>(image, <span class="string">&#x27;height&#x27;</span>, params.<span class="property">imageHeight</span>); <span class="comment">// Class</span></span><br><span class="line"></span><br><span class="line">  image.<span class="property">className</span> = swalClasses.<span class="property">image</span>;</span><br><span class="line">  <span class="title function_">applyCustomClass</span>(image, params.<span class="property">customClass</span>, <span class="string">&#x27;image&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">imageClass</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(image, params.<span class="property">imageClass</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createStepElement = <span class="keyword">function</span> <span class="title function_">createStepElement</span>(<span class="params">step</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> stepEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">  <span class="title function_">addClass</span>(stepEl, swalClasses[<span class="string">&#x27;progress-step&#x27;</span>]);</span><br><span class="line">  stepEl.<span class="property">innerHTML</span> = step;</span><br><span class="line">  <span class="keyword">return</span> stepEl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLineElement = <span class="keyword">function</span> <span class="title function_">createLineElement</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lineEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">  <span class="title function_">addClass</span>(lineEl, swalClasses[<span class="string">&#x27;progress-step-line&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">progressStepsDistance</span>) &#123;</span><br><span class="line">    lineEl.<span class="property">style</span>.<span class="property">width</span> = params.<span class="property">progressStepsDistance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> lineEl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderProgressSteps = <span class="keyword">function</span> <span class="title function_">renderProgressSteps</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> progressStepsContainer = <span class="title function_">getProgressSteps</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">progressSteps</span> || params.<span class="property">progressSteps</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hide</span>(progressStepsContainer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">show</span>(progressStepsContainer);</span><br><span class="line">  progressStepsContainer.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> currentProgressStep = <span class="built_in">parseInt</span>(params.<span class="property">currentProgressStep</span> === <span class="literal">null</span> ? <span class="title class_">Swal</span>.<span class="title function_">getQueueStep</span>() : params.<span class="property">currentProgressStep</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentProgressStep &gt;= params.<span class="property">progressSteps</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Invalid currentProgressStep parameter, it should be less than progressSteps.length &#x27;</span> + <span class="string">&#x27;(currentProgressStep like JS arrays starts from 0)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  params.<span class="property">progressSteps</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">step, index</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stepEl = <span class="title function_">createStepElement</span>(step);</span><br><span class="line">    progressStepsContainer.<span class="title function_">appendChild</span>(stepEl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === currentProgressStep) &#123;</span><br><span class="line">      <span class="title function_">addClass</span>(stepEl, swalClasses[<span class="string">&#x27;active-progress-step&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index !== params.<span class="property">progressSteps</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> lineEl = <span class="title function_">createLineElement</span>(step);</span><br><span class="line">      progressStepsContainer.<span class="title function_">appendChild</span>(lineEl);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderTitle = <span class="keyword">function</span> <span class="title function_">renderTitle</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> title = <span class="title function_">getTitle</span>();</span><br><span class="line">  <span class="title function_">toggle</span>(title, params.<span class="property">title</span> || params.<span class="property">titleText</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="title function_">parseHtmlToContainer</span>(params.<span class="property">title</span>, title);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">titleText</span>) &#123;</span><br><span class="line">    title.<span class="property">innerText</span> = params.<span class="property">titleText</span>;</span><br><span class="line">  &#125; <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(title, params.<span class="property">customClass</span>, <span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderHeader = <span class="keyword">function</span> <span class="title function_">renderHeader</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> header = <span class="title function_">getHeader</span>(); <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(header, params.<span class="property">customClass</span>, <span class="string">&#x27;header&#x27;</span>); <span class="comment">// Progress steps</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderProgressSteps</span>(instance, params); <span class="comment">// Icon</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderIcon</span>(instance, params); <span class="comment">// Image</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderImage</span>(instance, params); <span class="comment">// Title</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderTitle</span>(instance, params); <span class="comment">// Close button</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderCloseButton</span>(instance, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderPopup = <span class="keyword">function</span> <span class="title function_">renderPopup</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>(); <span class="comment">// Width</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyNumericalStyle</span>(popup, <span class="string">&#x27;width&#x27;</span>, params.<span class="property">width</span>); <span class="comment">// Padding</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyNumericalStyle</span>(popup, <span class="string">&#x27;padding&#x27;</span>, params.<span class="property">padding</span>); <span class="comment">// Background</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">background</span>) &#123;</span><br><span class="line">    popup.<span class="property">style</span>.<span class="property">background</span> = params.<span class="property">background</span>;</span><br><span class="line">  &#125; <span class="comment">// Default Class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  popup.<span class="property">className</span> = swalClasses.<span class="property">popup</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">toast</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>], swalClasses[<span class="string">&#x27;toast-shown&#x27;</span>]);</span><br><span class="line">    <span class="title function_">addClass</span>(popup, swalClasses.<span class="property">toast</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(popup, swalClasses.<span class="property">modal</span>);</span><br><span class="line">  &#125; <span class="comment">// Custom class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">applyCustomClass</span>(popup, params.<span class="property">customClass</span>, <span class="string">&#x27;popup&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">customClass</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(popup, params.<span class="property">customClass</span>);</span><br><span class="line">  &#125; <span class="comment">// CSS animation</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">toggleClass</span>(popup, swalClasses.<span class="property">noanimation</span>, !params.<span class="property">animation</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> render = <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="title function_">renderPopup</span>(instance, params);</span><br><span class="line">  <span class="title function_">renderContainer</span>(instance, params);</span><br><span class="line">  <span class="title function_">renderHeader</span>(instance, params);</span><br><span class="line">  <span class="title function_">renderContent</span>(instance, params);</span><br><span class="line">  <span class="title function_">renderActions</span>(instance, params);</span><br><span class="line">  <span class="title function_">renderFooter</span>(instance, params);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">onRender</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    params.<span class="title function_">onRender</span>(<span class="title function_">getPopup</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function to determine if SweetAlert2 popup is shown</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isVisible$1 = <span class="keyword">function</span> <span class="title function_">isVisible$$1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isVisible</span>(<span class="title function_">getPopup</span>());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function to click &#x27;Confirm&#x27; button</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clickConfirm = <span class="keyword">function</span> <span class="title function_">clickConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getConfirmButton</span>() &amp;&amp; <span class="title function_">getConfirmButton</span>().<span class="title function_">click</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function to click &#x27;Cancel&#x27; button</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clickCancel = <span class="keyword">function</span> <span class="title function_">clickCancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getCancelButton</span>() &amp;&amp; <span class="title function_">getCancelButton</span>().<span class="title function_">click</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fire</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Swal</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    args[_key] = <span class="variable language_">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_construct</span>(<span class="title class_">Swal</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an extended version of `Swal` containing `params` as defaults.</span></span><br><span class="line"><span class="comment"> * Useful for reusing Swal configuration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For example:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Before:</span></span><br><span class="line"><span class="comment"> * const textPromptOptions = &#123; input: &#x27;text&#x27;, showCancelButton: true &#125;</span></span><br><span class="line"><span class="comment"> * const &#123;value: firstName&#125; = await Swal.fire(&#123; ...textPromptOptions, title: &#x27;What is your first name?&#x27; &#125;)</span></span><br><span class="line"><span class="comment"> * const &#123;value: lastName&#125; = await Swal.fire(&#123; ...textPromptOptions, title: &#x27;What is your last name?&#x27; &#125;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * After:</span></span><br><span class="line"><span class="comment"> * const TextPrompt = Swal.mixin(&#123; input: &#x27;text&#x27;, showCancelButton: true &#125;)</span></span><br><span class="line"><span class="comment"> * const &#123;value: firstName&#125; = await TextPrompt(&#x27;What is your first name?&#x27;)</span></span><br><span class="line"><span class="comment"> * const &#123;value: lastName&#125; = await TextPrompt(&#x27;What is your last name?&#x27;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">mixinParams</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">mixinParams</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">MixinSwal</span> =</span><br><span class="line">  <span class="comment">/*#__PURE__*/</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params">_this</span>) &#123;</span><br><span class="line">    <span class="title function_">_inherits</span>(<span class="title class_">MixinSwal</span>, _this);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">MixinSwal</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">MixinSwal</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">_possibleConstructorReturn</span>(<span class="variable language_">this</span>, <span class="title function_">_getPrototypeOf</span>(<span class="title class_">MixinSwal</span>).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_createClass</span>(<span class="title class_">MixinSwal</span>, [&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&quot;_main&quot;</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">_main</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">_get</span>(<span class="title function_">_getPrototypeOf</span>(<span class="title class_">MixinSwal</span>.<span class="property"><span class="keyword">prototype</span></span>), <span class="string">&quot;_main&quot;</span>, <span class="variable language_">this</span>).<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="title function_">_extends</span>(&#123;&#125;, mixinParams, params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">MixinSwal</span>;</span><br><span class="line">  &#125;(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">MixinSwal</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private global state for the queue feature</span></span><br><span class="line"><span class="keyword">var</span> currentSteps = [];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function for chaining sweetAlert popups</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> queue = <span class="keyword">function</span> <span class="title function_">queue</span>(<span class="params">steps</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Swal</span> = <span class="variable language_">this</span>;</span><br><span class="line">  currentSteps = steps;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> resetAndResolve = <span class="keyword">function</span> <span class="title function_">resetAndResolve</span>(<span class="params">resolve, value</span>) &#123;</span><br><span class="line">    currentSteps = [];</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-swal2-queue-step&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> queueResult = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    (<span class="keyword">function</span> <span class="title function_">step</span>(<span class="params">i, callback</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; currentSteps.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-swal2-queue-step&#x27;</span>, i);</span><br><span class="line">        <span class="title class_">Swal</span>.<span class="title function_">fire</span>(currentSteps[i]).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> result.<span class="property">value</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            queueResult.<span class="title function_">push</span>(result.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">step</span>(i + <span class="number">1</span>, callback);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resetAndResolve</span>(resolve, &#123;</span><br><span class="line">              <span class="attr">dismiss</span>: result.<span class="property">dismiss</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resetAndResolve</span>(resolve, &#123;</span><br><span class="line">          <span class="attr">value</span>: queueResult</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function for getting the index of current popup in queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getQueueStep = <span class="keyword">function</span> <span class="title function_">getQueueStep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-swal2-queue-step&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function for inserting a popup to the queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> insertQueueStep = <span class="keyword">function</span> <span class="title function_">insertQueueStep</span>(<span class="params">step, index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &amp;&amp; index &lt; currentSteps.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> currentSteps.<span class="title function_">splice</span>(index, <span class="number">0</span>, step);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentSteps.<span class="title function_">push</span>(step);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Global function for deleting a popup from the queue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deleteQueueStep = <span class="keyword">function</span> <span class="title function_">deleteQueueStep</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> currentSteps[index] !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    currentSteps.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show spinner instead of Confirm button and disable Cancel button</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showLoading = <span class="keyword">function</span> <span class="title function_">showLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!popup) &#123;</span><br><span class="line">    <span class="title class_">Swal</span>.<span class="title function_">fire</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  popup = <span class="title function_">getPopup</span>();</span><br><span class="line">  <span class="keyword">var</span> actions = <span class="title function_">getActions</span>();</span><br><span class="line">  <span class="keyword">var</span> confirmButton = <span class="title function_">getConfirmButton</span>();</span><br><span class="line">  <span class="keyword">var</span> cancelButton = <span class="title function_">getCancelButton</span>();</span><br><span class="line">  <span class="title function_">show</span>(actions);</span><br><span class="line">  <span class="title function_">show</span>(confirmButton);</span><br><span class="line">  <span class="title function_">addClass</span>([popup, actions], swalClasses.<span class="property">loading</span>);</span><br><span class="line">  confirmButton.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">  cancelButton.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">  popup.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-loading&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  popup.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-busy&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">  popup.<span class="title function_">focus</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">RESTORE_FOCUS_TIMEOUT</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> globalState = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> focusPreviousActiveElement = <span class="keyword">function</span> <span class="title function_">focusPreviousActiveElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (globalState.<span class="property">previousActiveElement</span> &amp;&amp; globalState.<span class="property">previousActiveElement</span>.<span class="property">focus</span>) &#123;</span><br><span class="line">    globalState.<span class="property">previousActiveElement</span>.<span class="title function_">focus</span>();</span><br><span class="line">    globalState.<span class="property">previousActiveElement</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// Restore previous active (focused) element</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> restoreActiveElement = <span class="keyword">function</span> <span class="title function_">restoreActiveElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">window</span>.<span class="property">scrollX</span>;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="variable language_">window</span>.<span class="property">scrollY</span>;</span><br><span class="line">    globalState.<span class="property">restoreFocusTimeout</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">focusPreviousActiveElement</span>();</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, <span class="variable constant_">RESTORE_FOCUS_TIMEOUT</span>); <span class="comment">// issues/900</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// IE doesn&#x27;t have scrollX/scrollY support</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If `timer` parameter is set, returns number of milliseconds of timer remained.</span></span><br><span class="line"><span class="comment"> * Otherwise, returns undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getTimerLeft = <span class="keyword">function</span> <span class="title function_">getTimerLeft</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> globalState.<span class="property">timeout</span> &amp;&amp; globalState.<span class="property">timeout</span>.<span class="title function_">getTimerLeft</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stop timer. Returns number of milliseconds of timer remained.</span></span><br><span class="line"><span class="comment"> * If `timer` parameter isn&#x27;t set, returns undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stopTimer = <span class="keyword">function</span> <span class="title function_">stopTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> globalState.<span class="property">timeout</span> &amp;&amp; globalState.<span class="property">timeout</span>.<span class="title function_">stop</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resume timer. Returns number of milliseconds of timer remained.</span></span><br><span class="line"><span class="comment"> * If `timer` parameter isn&#x27;t set, returns undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resumeTimer = <span class="keyword">function</span> <span class="title function_">resumeTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> globalState.<span class="property">timeout</span> &amp;&amp; globalState.<span class="property">timeout</span>.<span class="title function_">start</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resume timer. Returns number of milliseconds of timer remained.</span></span><br><span class="line"><span class="comment"> * If `timer` parameter isn&#x27;t set, returns undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toggleTimer = <span class="keyword">function</span> <span class="title function_">toggleTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timer = globalState.<span class="property">timeout</span>;</span><br><span class="line">  <span class="keyword">return</span> timer &amp;&amp; (timer.<span class="property">running</span> ? timer.<span class="title function_">stop</span>() : timer.<span class="title function_">start</span>());</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increase timer. Returns number of milliseconds of an updated timer.</span></span><br><span class="line"><span class="comment"> * If `timer` parameter isn&#x27;t set, returns undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> increaseTimer = <span class="keyword">function</span> <span class="title function_">increaseTimer</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> globalState.<span class="property">timeout</span> &amp;&amp; globalState.<span class="property">timeout</span>.<span class="title function_">increase</span>(n);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if timer is running. Returns true if timer is running</span></span><br><span class="line"><span class="comment"> * or false if timer is paused or stopped.</span></span><br><span class="line"><span class="comment"> * If `timer` parameter isn&#x27;t set, returns undefined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isTimerRunning = <span class="keyword">function</span> <span class="title function_">isTimerRunning</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> globalState.<span class="property">timeout</span> &amp;&amp; globalState.<span class="property">timeout</span>.<span class="title function_">isRunning</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultParams = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">titleText</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">footer</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">toast</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">customClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">customContainerClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;body&#x27;</span>,</span><br><span class="line">  <span class="attr">backdrop</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">animation</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">heightAuto</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowOutsideClick</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowEscapeKey</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">allowEnterKey</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">stopKeydownPropagation</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">keydownListenerCapture</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">showConfirmButton</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">showCancelButton</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">preConfirm</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">confirmButtonText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line">  <span class="attr">confirmButtonAriaLabel</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">confirmButtonColor</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">confirmButtonClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonText</span>: <span class="string">&#x27;Cancel&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonAriaLabel</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonColor</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">cancelButtonClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonsStyling</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">reverseButtons</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">focusConfirm</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">focusCancel</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">showCloseButton</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">closeButtonHtml</span>: <span class="string">&#x27;&amp;times;&#x27;</span>,</span><br><span class="line">  <span class="attr">closeButtonAriaLabel</span>: <span class="string">&#x27;Close this dialog&#x27;</span>,</span><br><span class="line">  <span class="attr">showLoaderOnConfirm</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">imageUrl</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">imageWidth</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">imageHeight</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">imageAlt</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">imageClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">timer</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">padding</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">background</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">input</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">inputPlaceholder</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">inputOptions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">inputAutoTrim</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">inputClass</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">inputAttributes</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">inputValidator</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">validationMessage</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">grow</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">position</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  <span class="attr">progressSteps</span>: [],</span><br><span class="line">  <span class="attr">currentProgressStep</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">progressStepsDistance</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">onBeforeOpen</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">onOpen</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">onRender</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">onClose</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">onAfterClose</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">scrollbarPadding</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> updatableParams = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;titleText&#x27;</span>, <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;customClass&#x27;</span>, <span class="string">&#x27;showConfirmButton&#x27;</span>, <span class="string">&#x27;showCancelButton&#x27;</span>, <span class="string">&#x27;confirmButtonText&#x27;</span>, <span class="string">&#x27;confirmButtonAriaLabel&#x27;</span>, <span class="string">&#x27;confirmButtonColor&#x27;</span>, <span class="string">&#x27;confirmButtonClass&#x27;</span>, <span class="string">&#x27;cancelButtonText&#x27;</span>, <span class="string">&#x27;cancelButtonAriaLabel&#x27;</span>, <span class="string">&#x27;cancelButtonColor&#x27;</span>, <span class="string">&#x27;cancelButtonClass&#x27;</span>, <span class="string">&#x27;buttonsStyling&#x27;</span>, <span class="string">&#x27;reverseButtons&#x27;</span>, <span class="string">&#x27;imageUrl&#x27;</span>, <span class="string">&#x27;imageWidth&#x27;</span>, <span class="string">&#x27;imageHeigth&#x27;</span>, <span class="string">&#x27;imageAlt&#x27;</span>, <span class="string">&#x27;imageClass&#x27;</span>, <span class="string">&#x27;progressSteps&#x27;</span>, <span class="string">&#x27;currentProgressStep&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> deprecatedParams = &#123;</span><br><span class="line">  <span class="attr">customContainerClass</span>: <span class="string">&#x27;customClass&#x27;</span>,</span><br><span class="line">  <span class="attr">confirmButtonClass</span>: <span class="string">&#x27;customClass&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonClass</span>: <span class="string">&#x27;customClass&#x27;</span>,</span><br><span class="line">  <span class="attr">imageClass</span>: <span class="string">&#x27;customClass&#x27;</span>,</span><br><span class="line">  <span class="attr">inputClass</span>: <span class="string">&#x27;customClass&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> toastIncompatibleParams = [<span class="string">&#x27;allowOutsideClick&#x27;</span>, <span class="string">&#x27;allowEnterKey&#x27;</span>, <span class="string">&#x27;backdrop&#x27;</span>, <span class="string">&#x27;focusConfirm&#x27;</span>, <span class="string">&#x27;focusCancel&#x27;</span>, <span class="string">&#x27;heightAuto&#x27;</span>, <span class="string">&#x27;keydownListenerCapture&#x27;</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Is valid parameter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">paramName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isValidParameter = <span class="keyword">function</span> <span class="title function_">isValidParameter</span>(<span class="params">paramName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(defaultParams, paramName);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Is valid parameter for Swal.update() method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">paramName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isUpdatableParameter = <span class="keyword">function</span> <span class="title function_">isUpdatableParameter</span>(<span class="params">paramName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> updatableParams.<span class="title function_">indexOf</span>(paramName) !== -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Is deprecated parameter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">paramName</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isDeprecatedParameter = <span class="keyword">function</span> <span class="title function_">isDeprecatedParameter</span>(<span class="params">paramName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> deprecatedParams[paramName];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkIfParamIsValid = <span class="keyword">function</span> <span class="title function_">checkIfParamIsValid</span>(<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isValidParameter</span>(param)) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&quot;Unknown parameter \&quot;&quot;</span>.<span class="title function_">concat</span>(param, <span class="string">&quot;\&quot;&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkIfToastParamIsValid = <span class="keyword">function</span> <span class="title function_">checkIfToastParamIsValid</span>(<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (toastIncompatibleParams.<span class="title function_">indexOf</span>(param) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&quot;The parameter \&quot;&quot;</span>.<span class="title function_">concat</span>(param, <span class="string">&quot;\&quot; is incompatible with toasts&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkIfParamIsDeprecated = <span class="keyword">function</span> <span class="title function_">checkIfParamIsDeprecated</span>(<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDeprecatedParameter</span>(param)) &#123;</span><br><span class="line">    <span class="title function_">warnAboutDepreation</span>(param, <span class="title function_">isDeprecatedParameter</span>(param));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show relevant warnings for given params</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showWarningsForParams = <span class="keyword">function</span> <span class="title function_">showWarningsForParams</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> param <span class="keyword">in</span> params) &#123;</span><br><span class="line">    <span class="title function_">checkIfParamIsValid</span>(param);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (params.<span class="property">toast</span>) &#123;</span><br><span class="line">      <span class="title function_">checkIfToastParamIsValid</span>(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">checkIfParamIsDeprecated</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staticMethods = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;</span><br><span class="line"><span class="attr">isValidParameter</span>: isValidParameter,</span><br><span class="line"><span class="attr">isUpdatableParameter</span>: isUpdatableParameter,</span><br><span class="line"><span class="attr">isDeprecatedParameter</span>: isDeprecatedParameter,</span><br><span class="line"><span class="attr">argsToParams</span>: argsToParams,</span><br><span class="line"><span class="attr">isVisible</span>: isVisible$1,</span><br><span class="line"><span class="attr">clickConfirm</span>: clickConfirm,</span><br><span class="line"><span class="attr">clickCancel</span>: clickCancel,</span><br><span class="line"><span class="attr">getContainer</span>: getContainer,</span><br><span class="line"><span class="attr">getPopup</span>: getPopup,</span><br><span class="line"><span class="attr">getTitle</span>: getTitle,</span><br><span class="line"><span class="attr">getContent</span>: getContent,</span><br><span class="line"><span class="attr">getImage</span>: getImage,</span><br><span class="line"><span class="attr">getIcon</span>: getIcon,</span><br><span class="line"><span class="attr">getIcons</span>: getIcons,</span><br><span class="line"><span class="attr">getCloseButton</span>: getCloseButton,</span><br><span class="line"><span class="attr">getActions</span>: getActions,</span><br><span class="line"><span class="attr">getConfirmButton</span>: getConfirmButton,</span><br><span class="line"><span class="attr">getCancelButton</span>: getCancelButton,</span><br><span class="line"><span class="attr">getHeader</span>: getHeader,</span><br><span class="line"><span class="attr">getFooter</span>: getFooter,</span><br><span class="line"><span class="attr">getFocusableElements</span>: getFocusableElements,</span><br><span class="line"><span class="attr">getValidationMessage</span>: getValidationMessage,</span><br><span class="line"><span class="attr">isLoading</span>: isLoading,</span><br><span class="line"><span class="attr">fire</span>: fire,</span><br><span class="line"><span class="attr">mixin</span>: mixin,</span><br><span class="line"><span class="attr">queue</span>: queue,</span><br><span class="line"><span class="attr">getQueueStep</span>: getQueueStep,</span><br><span class="line"><span class="attr">insertQueueStep</span>: insertQueueStep,</span><br><span class="line"><span class="attr">deleteQueueStep</span>: deleteQueueStep,</span><br><span class="line"><span class="attr">showLoading</span>: showLoading,</span><br><span class="line"><span class="attr">enableLoading</span>: showLoading,</span><br><span class="line"><span class="attr">getTimerLeft</span>: getTimerLeft,</span><br><span class="line"><span class="attr">stopTimer</span>: stopTimer,</span><br><span class="line"><span class="attr">resumeTimer</span>: resumeTimer,</span><br><span class="line"><span class="attr">toggleTimer</span>: toggleTimer,</span><br><span class="line"><span class="attr">increaseTimer</span>: increaseTimer,</span><br><span class="line"><span class="attr">isTimerRunning</span>: isTimerRunning</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enables buttons and hide loader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hideLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!innerParams.<span class="property">showConfirmButton</span>) &#123;</span><br><span class="line">    <span class="title function_">hide</span>(domCache.<span class="property">confirmButton</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!innerParams.<span class="property">showCancelButton</span>) &#123;</span><br><span class="line">      <span class="title function_">hide</span>(domCache.<span class="property">actions</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeClass</span>([domCache.<span class="property">popup</span>, domCache.<span class="property">actions</span>], swalClasses.<span class="property">loading</span>);</span><br><span class="line">  domCache.<span class="property">popup</span>.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;aria-busy&#x27;</span>);</span><br><span class="line">  domCache.<span class="property">popup</span>.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-loading&#x27;</span>);</span><br><span class="line">  domCache.<span class="property">confirmButton</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">  domCache.<span class="property">cancelButton</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInput$1</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(instance || <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(instance || <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!domCache) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getInput</span>(domCache.<span class="property">content</span>, innerParams.<span class="property">input</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fixScrollbar = <span class="keyword">function</span> <span class="title function_">fixScrollbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// for queues, do not do this more than once</span></span><br><span class="line">  <span class="keyword">if</span> (states.<span class="property">previousBodyPadding</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="comment">// if the body has overflow</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span> &gt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>) &#123;</span><br><span class="line">    <span class="comment">// add padding so the content doesn&#x27;t shift after removal of scrollbar</span></span><br><span class="line">    states.<span class="property">previousBodyPadding</span> = <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;padding-right&#x27;</span>));</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">paddingRight</span> = states.<span class="property">previousBodyPadding</span> + <span class="title function_">measureScrollbar</span>() + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> undoScrollbar = <span class="keyword">function</span> <span class="title function_">undoScrollbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (states.<span class="property">previousBodyPadding</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">paddingRight</span> = states.<span class="property">previousBodyPadding</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    states.<span class="property">previousBodyPadding</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iOSfix = <span class="keyword">function</span> <span class="title function_">iOSfix</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> iOS = <span class="regexp">/iPad|iPhone|iPod/</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>) &amp;&amp; !<span class="variable language_">window</span>.<span class="property">MSStream</span> || navigator.<span class="property">platform</span> === <span class="string">&#x27;MacIntel&#x27;</span> &amp;&amp; navigator.<span class="property">maxTouchPoints</span> &gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (iOS &amp;&amp; !<span class="title function_">hasClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses.<span class="property">iosfix</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">top</span> = offset * -<span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="title function_">addClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses.<span class="property">iosfix</span>);</span><br><span class="line">    <span class="title function_">lockBodyScroll</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lockBodyScroll = <span class="keyword">function</span> <span class="title function_">lockBodyScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// #1246</span></span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="keyword">var</span> preventTouchMove;</span><br><span class="line"></span><br><span class="line">  container.<span class="property">ontouchstart</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    preventTouchMove = e.<span class="property">target</span> === container || !<span class="title function_">isScrollable</span>(container) &amp;&amp; e.<span class="property">target</span>.<span class="property">tagName</span> !== <span class="string">&#x27;INPUT&#x27;</span> <span class="comment">// #1603</span></span><br><span class="line">    ;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  container.<span class="property">ontouchmove</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preventTouchMove) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">      e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> undoIOSfix = <span class="keyword">function</span> <span class="title function_">undoIOSfix</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses.<span class="property">iosfix</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="built_in">parseInt</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">top</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="title function_">removeClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses.<span class="property">iosfix</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = offset * -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isIE11 = <span class="keyword">function</span> <span class="title function_">isIE11</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> !!<span class="variable language_">window</span>.<span class="property">MSInputMethodContext</span> &amp;&amp; !!<span class="variable language_">document</span>.<span class="property">documentMode</span>;</span><br><span class="line">&#125;; <span class="comment">// Fix IE11 centering sweetalert2/issues/933</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fixVerticalPositionIE = <span class="keyword">function</span> <span class="title function_">fixVerticalPositionIE</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line">  container.<span class="property">style</span>.<span class="title function_">removeProperty</span>(<span class="string">&#x27;align-items&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (popup.<span class="property">offsetTop</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    container.<span class="property">style</span>.<span class="property">alignItems</span> = <span class="string">&#x27;flex-start&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">IEfix</span> = <span class="keyword">function</span> <span class="title function_">IEfix</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isIE11</span>()) &#123;</span><br><span class="line">    <span class="title function_">fixVerticalPositionIE</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, fixVerticalPositionIE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> undoIEfix = <span class="keyword">function</span> <span class="title function_">undoIEfix</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isIE11</span>()) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, fixVerticalPositionIE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding aria-hidden=&quot;true&quot; to elements outside of the active modal dialog ensures that</span></span><br><span class="line"><span class="comment">// elements not within the active modal dialog will not be surfaced if a user opens a screen</span></span><br><span class="line"><span class="comment">// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setAriaHidden = <span class="keyword">function</span> <span class="title function_">setAriaHidden</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bodyChildren = <span class="title function_">toArray</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">children</span>);</span><br><span class="line">  bodyChildren.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (el === <span class="title function_">getContainer</span>() || <span class="title function_">contains</span>(el, <span class="title function_">getContainer</span>())) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (el.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;aria-hidden&#x27;</span>)) &#123;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-previous-aria-hidden&#x27;</span>, el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;aria-hidden&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-hidden&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> unsetAriaHidden = <span class="keyword">function</span> <span class="title function_">unsetAriaHidden</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bodyChildren = <span class="title function_">toArray</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">children</span>);</span><br><span class="line">  bodyChildren.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (el.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;data-previous-aria-hidden&#x27;</span>)) &#123;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-hidden&#x27;</span>, el.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-previous-aria-hidden&#x27;</span>));</span><br><span class="line">      el.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-previous-aria-hidden&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;aria-hidden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This module containts `WeakMap`s for each effectively-&quot;private  property&quot; that a `Swal` has.</span></span><br><span class="line"><span class="comment"> * For example, to set the private property &quot;foo&quot; of `this` to &quot;bar&quot;, you can `privateProps.foo.set(this, &#x27;bar&#x27;)`</span></span><br><span class="line"><span class="comment"> * This is the approach that Babel will probably take to implement private methods/fields</span></span><br><span class="line"><span class="comment"> *   https://github.com/tc39/proposal-private-methods</span></span><br><span class="line"><span class="comment"> *   https://github.com/babel/babel/pull/7555</span></span><br><span class="line"><span class="comment"> * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*</span></span><br><span class="line"><span class="comment"> *   then we can use that language feature.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> privateMethods = &#123;</span><br><span class="line">  <span class="attr">swalPromiseResolve</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Instance method to close sweetAlert</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removePopupAndResetState</span>(<span class="params">instance, container, isToast, onAfterClose</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isToast) &#123;</span><br><span class="line">    <span class="title function_">triggerOnAfterCloseAndDispose</span>(instance, onAfterClose);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">restoreActiveElement</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">triggerOnAfterCloseAndDispose</span>(instance, onAfterClose);</span><br><span class="line">    &#125;);</span><br><span class="line">    globalState.<span class="property">keydownTarget</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, globalState.<span class="property">keydownHandler</span>, &#123;</span><br><span class="line">      <span class="attr">capture</span>: globalState.<span class="property">keydownListenerCapture</span></span><br><span class="line">    &#125;);</span><br><span class="line">    globalState.<span class="property">keydownHandlerAdded</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (container.<span class="property">parentNode</span>) &#123;</span><br><span class="line">    container.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(container);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isModal</span>()) &#123;</span><br><span class="line">    <span class="title function_">undoScrollbar</span>();</span><br><span class="line">    <span class="title function_">undoIOSfix</span>();</span><br><span class="line">    <span class="title function_">undoIEfix</span>();</span><br><span class="line">    <span class="title function_">unsetAriaHidden</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeBodyClasses</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeBodyClasses</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">removeClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>], [swalClasses.<span class="property">shown</span>, swalClasses[<span class="string">&#x27;height-auto&#x27;</span>], swalClasses[<span class="string">&#x27;no-backdrop&#x27;</span>], swalClasses[<span class="string">&#x27;toast-shown&#x27;</span>], swalClasses[<span class="string">&#x27;toast-column&#x27;</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disposeSwal</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">  <span class="comment">// Unset this.params so GC will dispose it (#1569)</span></span><br><span class="line">  <span class="keyword">delete</span> instance.<span class="property">params</span>; <span class="comment">// Unset globalState props so GC will dispose globalState (#1569)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> globalState.<span class="property">keydownHandler</span>;</span><br><span class="line">  <span class="keyword">delete</span> globalState.<span class="property">keydownTarget</span>; <span class="comment">// Unset WeakMaps so GC will be able to dispose them (#1569)</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">unsetWeakMaps</span>(privateProps);</span><br><span class="line">  <span class="title function_">unsetWeakMaps</span>(privateMethods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">close</span>(<span class="params">resolveValue</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!popup || <span class="title function_">hasClass</span>(popup, swalClasses.<span class="property">hide</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!innerParams) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> swalPromiseResolve = privateMethods.<span class="property">swalPromiseResolve</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">removeClass</span>(popup, swalClasses.<span class="property">show</span>);</span><br><span class="line">  <span class="title function_">addClass</span>(popup, swalClasses.<span class="property">hide</span>);</span><br><span class="line">  <span class="title function_">handlePopupAnimation</span>(<span class="variable language_">this</span>, popup, innerParams); <span class="comment">// Resolve Swal promise</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">swalPromiseResolve</span>(resolveValue || &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handlePopupAnimation = <span class="keyword">function</span> <span class="title function_">handlePopupAnimation</span>(<span class="params">instance, popup, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>(); <span class="comment">// If animation is supported, animate</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> animationIsSupported = animationEndEvent &amp;&amp; <span class="title function_">hasCssAnimation</span>(popup);</span><br><span class="line">  <span class="keyword">var</span> onClose = innerParams.<span class="property">onClose</span>,</span><br><span class="line">      onAfterClose = innerParams.<span class="property">onAfterClose</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (onClose !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> onClose === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">onClose</span>(popup);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (animationIsSupported) &#123;</span><br><span class="line">    <span class="title function_">animatePopup</span>(instance, popup, container, onAfterClose);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Otherwise, remove immediately</span></span><br><span class="line">    <span class="title function_">removePopupAndResetState</span>(instance, container, <span class="title function_">isToast</span>(), onAfterClose);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animatePopup = <span class="keyword">function</span> <span class="title function_">animatePopup</span>(<span class="params">instance, popup, container, onAfterClose</span>) &#123;</span><br><span class="line">  globalState.<span class="property">swalCloseEventFinishedCallback</span> = removePopupAndResetState.<span class="title function_">bind</span>(<span class="literal">null</span>, instance, container, <span class="title function_">isToast</span>(), onAfterClose);</span><br><span class="line">  popup.<span class="title function_">addEventListener</span>(animationEndEvent, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span> === popup) &#123;</span><br><span class="line">      globalState.<span class="title function_">swalCloseEventFinishedCallback</span>();</span><br><span class="line">      <span class="keyword">delete</span> globalState.<span class="property">swalCloseEventFinishedCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> unsetWeakMaps = <span class="keyword">function</span> <span class="title function_">unsetWeakMaps</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    obj[i] = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> triggerOnAfterCloseAndDispose = <span class="keyword">function</span> <span class="title function_">triggerOnAfterCloseAndDispose</span>(<span class="params">instance, onAfterClose</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (onAfterClose !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> onAfterClose === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">onAfterClose</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">getPopup</span>()) &#123;</span><br><span class="line">      <span class="title function_">disposeSwal</span>(instance);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setButtonsDisabled</span>(<span class="params">instance, buttons, disabled</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(instance);</span><br><span class="line">  buttons.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">button</span>) &#123;</span><br><span class="line">    domCache[button].<span class="property">disabled</span> = disabled;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setInputDisabled</span>(<span class="params">input, disabled</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">type</span> === <span class="string">&#x27;radio&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> radiosContainer = input.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="keyword">var</span> radios = radiosContainer.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; radios.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      radios[i].<span class="property">disabled</span> = disabled;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    input.<span class="property">disabled</span> = disabled;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableButtons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setButtonsDisabled</span>(<span class="variable language_">this</span>, [<span class="string">&#x27;confirmButton&#x27;</span>, <span class="string">&#x27;cancelButton&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disableButtons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setButtonsDisabled</span>(<span class="variable language_">this</span>, [<span class="string">&#x27;confirmButton&#x27;</span>, <span class="string">&#x27;cancelButton&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="comment">// @deprecated</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableConfirmButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">warnAboutDepreation</span>(<span class="string">&#x27;Swal.enableConfirmButton()&#x27;</span>, <span class="string">&quot;Swal.getConfirmButton().removeAttribute(&#x27;disabled&#x27;)&quot;</span>);</span><br><span class="line">  <span class="title function_">setButtonsDisabled</span>(<span class="variable language_">this</span>, [<span class="string">&#x27;confirmButton&#x27;</span>], <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="comment">// @deprecated</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disableConfirmButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">warnAboutDepreation</span>(<span class="string">&#x27;Swal.disableConfirmButton()&#x27;</span>, <span class="string">&quot;Swal.getConfirmButton().setAttribute(&#x27;disabled&#x27;, &#x27;&#x27;)&quot;</span>);</span><br><span class="line">  <span class="title function_">setButtonsDisabled</span>(<span class="variable language_">this</span>, [<span class="string">&#x27;confirmButton&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">setInputDisabled</span>(<span class="variable language_">this</span>.<span class="title function_">getInput</span>(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disableInput</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">setInputDisabled</span>(<span class="variable language_">this</span>.<span class="title function_">getInput</span>(), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showValidationMessage</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  domCache.<span class="property">validationMessage</span>.<span class="property">innerHTML</span> = error;</span><br><span class="line">  <span class="keyword">var</span> popupComputedStyle = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(domCache.<span class="property">popup</span>);</span><br><span class="line">  domCache.<span class="property">validationMessage</span>.<span class="property">style</span>.<span class="property">marginLeft</span> = <span class="string">&quot;-&quot;</span>.<span class="title function_">concat</span>(popupComputedStyle.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;padding-left&#x27;</span>));</span><br><span class="line">  domCache.<span class="property">validationMessage</span>.<span class="property">style</span>.<span class="property">marginRight</span> = <span class="string">&quot;-&quot;</span>.<span class="title function_">concat</span>(popupComputedStyle.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;padding-right&#x27;</span>));</span><br><span class="line">  <span class="title function_">show</span>(domCache.<span class="property">validationMessage</span>);</span><br><span class="line">  <span class="keyword">var</span> input = <span class="variable language_">this</span>.<span class="title function_">getInput</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input) &#123;</span><br><span class="line">    input.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-invalid&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    input.<span class="title function_">setAttribute</span>(<span class="string">&#x27;aria-describedBy&#x27;</span>, swalClasses[<span class="string">&#x27;validation-message&#x27;</span>]);</span><br><span class="line">    <span class="title function_">focusInput</span>(input);</span><br><span class="line">    <span class="title function_">addClass</span>(input, swalClasses.<span class="property">inputerror</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// Hide block with validation message</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetValidationMessage$1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (domCache.<span class="property">validationMessage</span>) &#123;</span><br><span class="line">    <span class="title function_">hide</span>(domCache.<span class="property">validationMessage</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> input = <span class="variable language_">this</span>.<span class="title function_">getInput</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input) &#123;</span><br><span class="line">    input.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;aria-invalid&#x27;</span>);</span><br><span class="line">    input.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;aria-describedBy&#x27;</span>);</span><br><span class="line">    <span class="title function_">removeClass</span>(input, swalClasses.<span class="property">inputerror</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProgressSteps$1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">warnAboutDepreation</span>(<span class="string">&#x27;Swal.getProgressSteps()&#x27;</span>, <span class="string">&quot;const swalInstance = Swal.fire(&#123;progressSteps: [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]&#125;); const progressSteps = swalInstance.params.progressSteps&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> innerParams.<span class="property">progressSteps</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setProgressSteps</span>(<span class="params">progressSteps</span>) &#123;</span><br><span class="line">  <span class="title function_">warnAboutDepreation</span>(<span class="string">&#x27;Swal.setProgressSteps()&#x27;</span>, <span class="string">&#x27;Swal.update()&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> updatedParams = <span class="title function_">_extends</span>(&#123;&#125;, innerParams, &#123;</span><br><span class="line">    <span class="attr">progressSteps</span>: progressSteps</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderProgressSteps</span>(<span class="variable language_">this</span>, updatedParams);</span><br><span class="line">  privateProps.<span class="property">innerParams</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>, updatedParams);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProgressSteps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">show</span>(domCache.<span class="property">progressSteps</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hideProgressSteps</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = privateProps.<span class="property">domCache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">hide</span>(domCache.<span class="property">progressSteps</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Timer</span> =</span><br><span class="line"><span class="comment">/*#__PURE__*/</span></span><br><span class="line"><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params">callback, delay</span>) &#123;</span><br><span class="line">    <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Timer</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">remaining</span> = delay;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_createClass</span>(<span class="title class_">Timer</span>, [&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">running</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">started</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = <span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">callback</span>, <span class="variable language_">this</span>.<span class="property">remaining</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">remaining</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">running</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">remaining</span> -= <span class="keyword">new</span> <span class="title class_">Date</span>() - <span class="variable language_">this</span>.<span class="property">started</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">remaining</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;increase&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> running = <span class="variable language_">this</span>.<span class="property">running</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (running) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">stop</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">remaining</span> += n;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (running) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">remaining</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;getTimerLeft&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">getTimerLeft</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">running</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">stop</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">remaining</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;isRunning&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">isRunning</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">running</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Timer</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultInputValidators = &#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="keyword">function</span> <span class="title function_">email</span>(<span class="params">string, validationMessage</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]&#123;2,24&#125;$/</span>.<span class="title function_">test</span>(string) ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() : <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(validationMessage || <span class="string">&#x27;Invalid email address&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">url</span>: <span class="keyword">function</span> <span class="title function_">url</span>(<span class="params">string, validationMessage</span>) &#123;</span><br><span class="line">    <span class="comment">// taken from https://stackoverflow.com/a/3809435 with a small change from #1306</span></span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]&#123;2,256&#125;\.[a-z]&#123;2,63&#125;\b([-a-zA-Z0-9@:%_+.~#?&amp;/=]*)$/</span>.<span class="title function_">test</span>(string) ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() : <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(validationMessage || <span class="string">&#x27;Invalid URL&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefaultInputValidators</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="comment">// Use default `inputValidator` for supported input types if not provided</span></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">inputValidator</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(defaultInputValidators).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (params.<span class="property">input</span> === key) &#123;</span><br><span class="line">        params.<span class="property">inputValidator</span> = defaultInputValidators[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateCustomTargetElement</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="comment">// Determine if the custom target element is valid</span></span><br><span class="line">  <span class="keyword">if</span> (!params.<span class="property">target</span> || <span class="keyword">typeof</span> params.<span class="property">target</span> === <span class="string">&#x27;string&#x27;</span> &amp;&amp; !<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(params.<span class="property">target</span>) || <span class="keyword">typeof</span> params.<span class="property">target</span> !== <span class="string">&#x27;string&#x27;</span> &amp;&amp; !params.<span class="property">target</span>.<span class="property">appendChild</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Target parameter is not valid, defaulting to &quot;body&quot;&#x27;</span>);</span><br><span class="line">    params.<span class="property">target</span> = <span class="string">&#x27;body&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set type, text and actions on popup</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setParameters</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="title function_">setDefaultInputValidators</span>(params); <span class="comment">// showLoaderOnConfirm &amp;&amp; preConfirm</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">showLoaderOnConfirm</span> &amp;&amp; !params.<span class="property">preConfirm</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;showLoaderOnConfirm is set to true, but preConfirm is not defined.\n&#x27;</span> + <span class="string">&#x27;showLoaderOnConfirm should be used together with preConfirm, see usage example:\n&#x27;</span> + <span class="string">&#x27;https://sweetalert2.github.io/#ajax-request&#x27;</span>);</span><br><span class="line">  &#125; <span class="comment">// params.animation will be actually used in renderPopup.js</span></span><br><span class="line">  <span class="comment">// but in case when params.animation is a function, we need to call that function</span></span><br><span class="line">  <span class="comment">// before popup (re)initialization, so it&#x27;ll be possible to check Swal.isVisible()</span></span><br><span class="line">  <span class="comment">// inside the params.animation function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  params.<span class="property">animation</span> = <span class="title function_">callIfFunction</span>(params.<span class="property">animation</span>);</span><br><span class="line">  <span class="title function_">validateCustomTargetElement</span>(params); <span class="comment">// Replace newlines with &lt;br&gt; in title</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">title</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    params.<span class="property">title</span> = params.<span class="property">title</span>.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;&lt;br /&gt;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">swalOpenAnimationFinished</span>(<span class="params">popup, container</span>) &#123;</span><br><span class="line">  popup.<span class="title function_">removeEventListener</span>(animationEndEvent, swalOpenAnimationFinished);</span><br><span class="line">  container.<span class="property">style</span>.<span class="property">overflowY</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Open popup, add necessary classes and styles, fix scrollbar</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; <span class="variable">params</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openPopup = <span class="keyword">function</span> <span class="title function_">openPopup</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> container = <span class="title function_">getContainer</span>();</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">onBeforeOpen</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    params.<span class="title function_">onBeforeOpen</span>(popup);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addClasses</span>(container, popup, params); <span class="comment">// scrolling is &#x27;hidden&#x27; until animation is done, after that &#x27;auto&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setScrollingVisibility</span>(container, popup);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isModal</span>()) &#123;</span><br><span class="line">    <span class="title function_">fixScrollContainer</span>(container, params.<span class="property">scrollbarPadding</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isToast</span>() &amp;&amp; !globalState.<span class="property">previousActiveElement</span>) &#123;</span><br><span class="line">    globalState.<span class="property">previousActiveElement</span> = <span class="variable language_">document</span>.<span class="property">activeElement</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> params.<span class="property">onOpen</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> params.<span class="title function_">onOpen</span>(popup);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setScrollingVisibility = <span class="keyword">function</span> <span class="title function_">setScrollingVisibility</span>(<span class="params">container, popup</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (animationEndEvent &amp;&amp; <span class="title function_">hasCssAnimation</span>(popup)) &#123;</span><br><span class="line">    container.<span class="property">style</span>.<span class="property">overflowY</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">    popup.<span class="title function_">addEventListener</span>(animationEndEvent, swalOpenAnimationFinished.<span class="title function_">bind</span>(<span class="literal">null</span>, popup, container));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    container.<span class="property">style</span>.<span class="property">overflowY</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fixScrollContainer = <span class="keyword">function</span> <span class="title function_">fixScrollContainer</span>(<span class="params">container, scrollbarPadding</span>) &#123;</span><br><span class="line">  <span class="title function_">iOSfix</span>();</span><br><span class="line">  <span class="title class_">IEfix</span>();</span><br><span class="line">  <span class="title function_">setAriaHidden</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (scrollbarPadding) &#123;</span><br><span class="line">    <span class="title function_">fixScrollbar</span>();</span><br><span class="line">  &#125; <span class="comment">// sweetalert2/issues/1247</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    container.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addClasses = <span class="keyword">function</span> <span class="title function_">addClasses</span>(<span class="params">container, popup, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">animation</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>(popup, swalClasses.<span class="property">show</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">show</span>(popup);</span><br><span class="line">  <span class="title function_">addClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>, container], swalClasses.<span class="property">shown</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">heightAuto</span> &amp;&amp; params.<span class="property">backdrop</span> &amp;&amp; !params.<span class="property">toast</span>) &#123;</span><br><span class="line">    <span class="title function_">addClass</span>([<span class="variable language_">document</span>.<span class="property">documentElement</span>, <span class="variable language_">document</span>.<span class="property">body</span>], swalClasses[<span class="string">&#x27;height-auto&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleInputOptionsAndValue = <span class="keyword">function</span> <span class="title function_">handleInputOptionsAndValue</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (params.<span class="property">input</span> === <span class="string">&#x27;select&#x27;</span> || params.<span class="property">input</span> === <span class="string">&#x27;radio&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">handleInputOptions</span>(instance, params);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;tel&#x27;</span>, <span class="string">&#x27;textarea&#x27;</span>].<span class="title function_">indexOf</span>(params.<span class="property">input</span>) !== -<span class="number">1</span> &amp;&amp; <span class="title function_">isPromise</span>(params.<span class="property">inputValue</span>)) &#123;</span><br><span class="line">    <span class="title function_">handleInputValue</span>(instance, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getInputValue = <span class="keyword">function</span> <span class="title function_">getInputValue</span>(<span class="params">instance, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> input = instance.<span class="title function_">getInput</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (innerParams.<span class="property">input</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;checkbox&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getCheckboxValue</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;radio&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getRadioValue</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getFileValue</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> innerParams.<span class="property">inputAutoTrim</span> ? input.<span class="property">value</span>.<span class="title function_">trim</span>() : input.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getCheckboxValue = <span class="keyword">function</span> <span class="title function_">getCheckboxValue</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="property">checked</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getRadioValue = <span class="keyword">function</span> <span class="title function_">getRadioValue</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="property">checked</span> ? input.<span class="property">value</span> : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFileValue = <span class="keyword">function</span> <span class="title function_">getFileValue</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="property">files</span>.<span class="property">length</span> ? input.<span class="title function_">getAttribute</span>(<span class="string">&#x27;multiple&#x27;</span>) !== <span class="literal">null</span> ? input.<span class="property">files</span> : input.<span class="property">files</span>[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleInputOptions = <span class="keyword">function</span> <span class="title function_">handleInputOptions</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="title function_">getContent</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> processInputOptions = <span class="keyword">function</span> <span class="title function_">processInputOptions</span>(<span class="params">inputOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> populateInputOptions[params.<span class="property">input</span>](content, <span class="title function_">formatInputOptions</span>(inputOptions), params);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isPromise</span>(params.<span class="property">inputOptions</span>)) &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>();</span><br><span class="line">    params.<span class="property">inputOptions</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">inputOptions</span>) &#123;</span><br><span class="line">      instance.<span class="title function_">hideLoading</span>();</span><br><span class="line">      <span class="title function_">processInputOptions</span>(inputOptions);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">_typeof</span>(params.<span class="property">inputOptions</span>) === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">processInputOptions</span>(params.<span class="property">inputOptions</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">error</span>(<span class="string">&quot;Unexpected type of inputOptions! Expected object, Map or Promise, got &quot;</span>.<span class="title function_">concat</span>(<span class="title function_">_typeof</span>(params.<span class="property">inputOptions</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleInputValue = <span class="keyword">function</span> <span class="title function_">handleInputValue</span>(<span class="params">instance, params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> input = instance.<span class="title function_">getInput</span>();</span><br><span class="line">  <span class="title function_">hide</span>(input);</span><br><span class="line">  params.<span class="property">inputValue</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">inputValue</span>) &#123;</span><br><span class="line">    input.<span class="property">value</span> = params.<span class="property">input</span> === <span class="string">&#x27;number&#x27;</span> ? <span class="built_in">parseFloat</span>(inputValue) || <span class="number">0</span> : inputValue + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title function_">show</span>(input);</span><br><span class="line">    input.<span class="title function_">focus</span>();</span><br><span class="line">    instance.<span class="title function_">hideLoading</span>();</span><br><span class="line">  &#125;)[<span class="string">&quot;catch&quot;</span>](<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="title function_">error</span>(<span class="string">&#x27;Error in inputValue promise: &#x27;</span> + err);</span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title function_">show</span>(input);</span><br><span class="line">    input.<span class="title function_">focus</span>();</span><br><span class="line">    instance.<span class="title function_">hideLoading</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> populateInputOptions = &#123;</span><br><span class="line">  <span class="attr">select</span>: <span class="keyword">function</span> <span class="title function_">select</span>(<span class="params">content, inputOptions, params</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> select = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">select</span>);</span><br><span class="line">    inputOptions.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">inputOption</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> optionValue = inputOption[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> optionLabel = inputOption[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> option = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;option&#x27;</span>);</span><br><span class="line">      option.<span class="property">value</span> = optionValue;</span><br><span class="line">      option.<span class="property">innerHTML</span> = optionLabel;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (params.<span class="property">inputValue</span>.<span class="title function_">toString</span>() === optionValue.<span class="title function_">toString</span>()) &#123;</span><br><span class="line">        option.<span class="property">selected</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      select.<span class="title function_">appendChild</span>(option);</span><br><span class="line">    &#125;);</span><br><span class="line">    select.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">radio</span>: <span class="keyword">function</span> <span class="title function_">radio</span>(<span class="params">content, inputOptions, params</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> radio = <span class="title function_">getChildByClass</span>(content, swalClasses.<span class="property">radio</span>);</span><br><span class="line">    inputOptions.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">inputOption</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> radioValue = inputOption[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> radioLabel = inputOption[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> radioInput = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> radioLabelElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;label&#x27;</span>);</span><br><span class="line">      radioInput.<span class="property">type</span> = <span class="string">&#x27;radio&#x27;</span>;</span><br><span class="line">      radioInput.<span class="property">name</span> = swalClasses.<span class="property">radio</span>;</span><br><span class="line">      radioInput.<span class="property">value</span> = radioValue;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (params.<span class="property">inputValue</span>.<span class="title function_">toString</span>() === radioValue.<span class="title function_">toString</span>()) &#123;</span><br><span class="line">        radioInput.<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> label = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">      label.<span class="property">innerHTML</span> = radioLabel;</span><br><span class="line">      label.<span class="property">className</span> = swalClasses.<span class="property">label</span>;</span><br><span class="line">      radioLabelElement.<span class="title function_">appendChild</span>(radioInput);</span><br><span class="line">      radioLabelElement.<span class="title function_">appendChild</span>(label);</span><br><span class="line">      radio.<span class="title function_">appendChild</span>(radioLabelElement);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> radios = radio.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (radios.<span class="property">length</span>) &#123;</span><br><span class="line">      radios[<span class="number">0</span>].<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Converts `inputOptions` into an array of `[value, label]`s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">inputOptions</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> formatInputOptions = <span class="keyword">function</span> <span class="title function_">formatInputOptions</span>(<span class="params">inputOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Map</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; inputOptions <span class="keyword">instanceof</span> <span class="title class_">Map</span>) &#123;</span><br><span class="line">    inputOptions.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, key</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([key, value]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(inputOptions).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([key, inputOptions[key]]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleConfirmButtonClick = <span class="keyword">function</span> <span class="title function_">handleConfirmButtonClick</span>(<span class="params">instance, innerParams</span>) &#123;</span><br><span class="line">  instance.<span class="title function_">disableButtons</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">input</span>) &#123;</span><br><span class="line">    <span class="title function_">handleConfirmWithInput</span>(instance, innerParams);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">confirm</span>(instance, innerParams, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> handleCancelButtonClick = <span class="keyword">function</span> <span class="title function_">handleCancelButtonClick</span>(<span class="params">instance, dismissWith</span>) &#123;</span><br><span class="line">  instance.<span class="title function_">disableButtons</span>();</span><br><span class="line">  <span class="title function_">dismissWith</span>(<span class="title class_">DismissReason</span>.<span class="property">cancel</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleConfirmWithInput = <span class="keyword">function</span> <span class="title function_">handleConfirmWithInput</span>(<span class="params">instance, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> inputValue = <span class="title function_">getInputValue</span>(instance, innerParams);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">inputValidator</span>) &#123;</span><br><span class="line">    instance.<span class="title function_">disableInput</span>();</span><br><span class="line">    <span class="keyword">var</span> validationPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> innerParams.<span class="title function_">inputValidator</span>(inputValue, innerParams.<span class="property">validationMessage</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    validationPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">validationMessage</span>) &#123;</span><br><span class="line">      instance.<span class="title function_">enableButtons</span>();</span><br><span class="line">      instance.<span class="title function_">enableInput</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (validationMessage) &#123;</span><br><span class="line">        instance.<span class="title function_">showValidationMessage</span>(validationMessage);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">confirm</span>(instance, innerParams, inputValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!instance.<span class="title function_">getInput</span>().<span class="title function_">checkValidity</span>()) &#123;</span><br><span class="line">    instance.<span class="title function_">enableButtons</span>();</span><br><span class="line">    instance.<span class="title function_">showValidationMessage</span>(innerParams.<span class="property">validationMessage</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">confirm</span>(instance, innerParams, inputValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> succeedWith = <span class="keyword">function</span> <span class="title function_">succeedWith</span>(<span class="params">instance, value</span>) &#123;</span><br><span class="line">  instance.<span class="title function_">closePopup</span>(&#123;</span><br><span class="line">    <span class="attr">value</span>: value</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> confirm = <span class="keyword">function</span> <span class="title function_">confirm</span>(<span class="params">instance, innerParams, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">showLoaderOnConfirm</span>) &#123;</span><br><span class="line">    <span class="title function_">showLoading</span>(); <span class="comment">// <span class="doctag">TODO:</span> make showLoading an *instance* method</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">preConfirm</span>) &#123;</span><br><span class="line">    instance.<span class="title function_">resetValidationMessage</span>();</span><br><span class="line">    <span class="keyword">var</span> preConfirmPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> innerParams.<span class="title function_">preConfirm</span>(value, innerParams.<span class="property">validationMessage</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    preConfirmPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">preConfirmValue</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isVisible</span>(<span class="title function_">getValidationMessage</span>()) || preConfirmValue === <span class="literal">false</span>) &#123;</span><br><span class="line">        instance.<span class="title function_">hideLoading</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">succeedWith</span>(instance, <span class="keyword">typeof</span> preConfirmValue === <span class="string">&#x27;undefined&#x27;</span> ? value : preConfirmValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">succeedWith</span>(instance, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addKeydownHandler = <span class="keyword">function</span> <span class="title function_">addKeydownHandler</span>(<span class="params">instance, globalState, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (globalState.<span class="property">keydownTarget</span> &amp;&amp; globalState.<span class="property">keydownHandlerAdded</span>) &#123;</span><br><span class="line">    globalState.<span class="property">keydownTarget</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, globalState.<span class="property">keydownHandler</span>, &#123;</span><br><span class="line">      <span class="attr">capture</span>: globalState.<span class="property">keydownListenerCapture</span></span><br><span class="line">    &#125;);</span><br><span class="line">    globalState.<span class="property">keydownHandlerAdded</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!innerParams.<span class="property">toast</span>) &#123;</span><br><span class="line">    globalState.<span class="property">keydownHandler</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">keydownHandler</span>(instance, e, innerParams, dismissWith);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    globalState.<span class="property">keydownTarget</span> = innerParams.<span class="property">keydownListenerCapture</span> ? <span class="variable language_">window</span> : <span class="title function_">getPopup</span>();</span><br><span class="line">    globalState.<span class="property">keydownListenerCapture</span> = innerParams.<span class="property">keydownListenerCapture</span>;</span><br><span class="line">    globalState.<span class="property">keydownTarget</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, globalState.<span class="property">keydownHandler</span>, &#123;</span><br><span class="line">      <span class="attr">capture</span>: globalState.<span class="property">keydownListenerCapture</span></span><br><span class="line">    &#125;);</span><br><span class="line">    globalState.<span class="property">keydownHandlerAdded</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;; <span class="comment">// Focus handling</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setFocus = <span class="keyword">function</span> <span class="title function_">setFocus</span>(<span class="params">innerParams, index, increment</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> focusableElements = <span class="title function_">getFocusableElements</span>(); <span class="comment">// search for visible elements and select the next possible match</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; focusableElements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    index = index + increment; <span class="comment">// rollover to first item</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === focusableElements.<span class="property">length</span>) &#123;</span><br><span class="line">      index = <span class="number">0</span>; <span class="comment">// go to last item</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">      index = focusableElements.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> focusableElements[index].<span class="title function_">focus</span>();</span><br><span class="line">  &#125; <span class="comment">// no visible focusable elements, focus the popup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">getPopup</span>().<span class="title function_">focus</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arrowKeys = [<span class="string">&#x27;ArrowLeft&#x27;</span>, <span class="string">&#x27;ArrowRight&#x27;</span>, <span class="string">&#x27;ArrowUp&#x27;</span>, <span class="string">&#x27;ArrowDown&#x27;</span>, <span class="string">&#x27;Left&#x27;</span>, <span class="string">&#x27;Right&#x27;</span>, <span class="string">&#x27;Up&#x27;</span>, <span class="string">&#x27;Down&#x27;</span> <span class="comment">// IE11</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> escKeys = [<span class="string">&#x27;Escape&#x27;</span>, <span class="string">&#x27;Esc&#x27;</span> <span class="comment">// IE11</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> keydownHandler = <span class="keyword">function</span> <span class="title function_">keydownHandler</span>(<span class="params">instance, e, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">stopKeydownPropagation</span>) &#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125; <span class="comment">// ENTER</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">handleEnter</span>(instance, e, innerParams); <span class="comment">// TAB</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Tab&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">handleTab</span>(e, innerParams); <span class="comment">// ARROWS - switch focus between buttons</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrowKeys.<span class="title function_">indexOf</span>(e.<span class="property">key</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">handleArrows</span>(); <span class="comment">// ESC</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (escKeys.<span class="title function_">indexOf</span>(e.<span class="property">key</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">handleEsc</span>(e, innerParams, dismissWith);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleEnter = <span class="keyword">function</span> <span class="title function_">handleEnter</span>(<span class="params">instance, e, innerParams</span>) &#123;</span><br><span class="line">  <span class="comment">// #720 #721</span></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">isComposing</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span> &amp;&amp; instance.<span class="title function_">getInput</span>() &amp;&amp; e.<span class="property">target</span>.<span class="property">outerHTML</span> === instance.<span class="title function_">getInput</span>().<span class="property">outerHTML</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;textarea&#x27;</span>, <span class="string">&#x27;file&#x27;</span>].<span class="title function_">indexOf</span>(innerParams.<span class="property">input</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// do not submit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">clickConfirm</span>();</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleTab = <span class="keyword">function</span> <span class="title function_">handleTab</span>(<span class="params">e, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> targetElement = e.<span class="property">target</span>;</span><br><span class="line">  <span class="keyword">var</span> focusableElements = <span class="title function_">getFocusableElements</span>();</span><br><span class="line">  <span class="keyword">var</span> btnIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; focusableElements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (targetElement === focusableElements[i]) &#123;</span><br><span class="line">      btnIndex = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!e.<span class="property">shiftKey</span>) &#123;</span><br><span class="line">    <span class="comment">// Cycle to the next button</span></span><br><span class="line">    <span class="title function_">setFocus</span>(innerParams, btnIndex, <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Cycle to the prev button</span></span><br><span class="line">    <span class="title function_">setFocus</span>(innerParams, btnIndex, -<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleArrows = <span class="keyword">function</span> <span class="title function_">handleArrows</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> confirmButton = <span class="title function_">getConfirmButton</span>();</span><br><span class="line">  <span class="keyword">var</span> cancelButton = <span class="title function_">getCancelButton</span>(); <span class="comment">// focus Cancel button if Confirm button is currently focused</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">activeElement</span> === confirmButton &amp;&amp; <span class="title function_">isVisible</span>(cancelButton)) &#123;</span><br><span class="line">    cancelButton.<span class="title function_">focus</span>(); <span class="comment">// and vice versa</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">activeElement</span> === cancelButton &amp;&amp; <span class="title function_">isVisible</span>(confirmButton)) &#123;</span><br><span class="line">    confirmButton.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleEsc = <span class="keyword">function</span> <span class="title function_">handleEsc</span>(<span class="params">e, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">callIfFunction</span>(innerParams.<span class="property">allowEscapeKey</span>)) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">dismissWith</span>(<span class="title class_">DismissReason</span>.<span class="property">esc</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handlePopupClick = <span class="keyword">function</span> <span class="title function_">handlePopupClick</span>(<span class="params">domCache, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">toast</span>) &#123;</span><br><span class="line">    <span class="title function_">handleToastClick</span>(domCache, innerParams, dismissWith);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore click events that had mousedown on the popup but mouseup on the container</span></span><br><span class="line">    <span class="comment">// This can happen when the user drags a slider</span></span><br><span class="line">    <span class="title function_">handleModalMousedown</span>(domCache); <span class="comment">// Ignore click events that had mousedown on the container but mouseup on the popup</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleContainerMousedown</span>(domCache);</span><br><span class="line">    <span class="title function_">handleModalClick</span>(domCache, innerParams, dismissWith);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleToastClick = <span class="keyword">function</span> <span class="title function_">handleToastClick</span>(<span class="params">domCache, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="comment">// Closing toast by internal click</span></span><br><span class="line">  domCache.<span class="property">popup</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (innerParams.<span class="property">showConfirmButton</span> || innerParams.<span class="property">showCancelButton</span> || innerParams.<span class="property">showCloseButton</span> || innerParams.<span class="property">input</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">dismissWith</span>(<span class="title class_">DismissReason</span>.<span class="property">close</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ignoreOutsideClick = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleModalMousedown = <span class="keyword">function</span> <span class="title function_">handleModalMousedown</span>(<span class="params">domCache</span>) &#123;</span><br><span class="line">  domCache.<span class="property">popup</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    domCache.<span class="property">container</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      domCache.<span class="property">container</span>.<span class="property">onmouseup</span> = <span class="literal">undefined</span>; <span class="comment">// We only check if the mouseup target is the container because usually it doesn&#x27;t</span></span><br><span class="line">      <span class="comment">// have any other direct children aside of the popup</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">target</span> === domCache.<span class="property">container</span>) &#123;</span><br><span class="line">        ignoreOutsideClick = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleContainerMousedown = <span class="keyword">function</span> <span class="title function_">handleContainerMousedown</span>(<span class="params">domCache</span>) &#123;</span><br><span class="line">  domCache.<span class="property">container</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    domCache.<span class="property">popup</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      domCache.<span class="property">popup</span>.<span class="property">onmouseup</span> = <span class="literal">undefined</span>; <span class="comment">// We also need to check if the mouseup target is a child of the popup</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">target</span> === domCache.<span class="property">popup</span> || domCache.<span class="property">popup</span>.<span class="title function_">contains</span>(e.<span class="property">target</span>)) &#123;</span><br><span class="line">        ignoreOutsideClick = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleModalClick = <span class="keyword">function</span> <span class="title function_">handleModalClick</span>(<span class="params">domCache, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  domCache.<span class="property">container</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ignoreOutsideClick) &#123;</span><br><span class="line">      ignoreOutsideClick = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span> === domCache.<span class="property">container</span> &amp;&amp; <span class="title function_">callIfFunction</span>(innerParams.<span class="property">allowOutsideClick</span>)) &#123;</span><br><span class="line">      <span class="title function_">dismissWith</span>(<span class="title class_">DismissReason</span>.<span class="property">backdrop</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_main</span>(<span class="params">userParams</span>) &#123;</span><br><span class="line">  <span class="title function_">showWarningsForParams</span>(userParams); <span class="comment">// Check if there is another Swal closing</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getPopup</span>() &amp;&amp; globalState.<span class="property">swalCloseEventFinishedCallback</span>) &#123;</span><br><span class="line">    globalState.<span class="title function_">swalCloseEventFinishedCallback</span>();</span><br><span class="line">    <span class="keyword">delete</span> globalState.<span class="property">swalCloseEventFinishedCallback</span>;</span><br><span class="line">  &#125; <span class="comment">// Check if there is a swal disposal defer timer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (globalState.<span class="property">deferDisposalTimer</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(globalState.<span class="property">deferDisposalTimer</span>);</span><br><span class="line">    <span class="keyword">delete</span> globalState.<span class="property">deferDisposalTimer</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> innerParams = <span class="title function_">_extends</span>(&#123;&#125;, defaultParams, userParams);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setParameters</span>(innerParams);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">freeze</span>(innerParams); <span class="comment">// clear the previous timer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (globalState.<span class="property">timeout</span>) &#123;</span><br><span class="line">    globalState.<span class="property">timeout</span>.<span class="title function_">stop</span>();</span><br><span class="line">    <span class="keyword">delete</span> globalState.<span class="property">timeout</span>;</span><br><span class="line">  &#125; <span class="comment">// clear the restore focus timeout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">clearTimeout</span>(globalState.<span class="property">restoreFocusTimeout</span>);</span><br><span class="line">  <span class="keyword">var</span> domCache = <span class="title function_">populateDomCache</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="title function_">render</span>(<span class="variable language_">this</span>, innerParams);</span><br><span class="line">  privateProps.<span class="property">innerParams</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>, innerParams);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">swalPromise</span>(<span class="variable language_">this</span>, domCache, innerParams);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swalPromise = <span class="keyword">function</span> <span class="title function_">swalPromise</span>(<span class="params">instance, domCache, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="comment">// functions to handle all closings/dismissals</span></span><br><span class="line">    <span class="keyword">var</span> dismissWith = <span class="keyword">function</span> <span class="title function_">dismissWith</span>(<span class="params">dismiss</span>) &#123;</span><br><span class="line">      instance.<span class="title function_">closePopup</span>(&#123;</span><br><span class="line">        <span class="attr">dismiss</span>: dismiss</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    privateMethods.<span class="property">swalPromiseResolve</span>.<span class="title function_">set</span>(instance, resolve);</span><br><span class="line">    <span class="title function_">setupTimer</span>(globalState, innerParams, dismissWith);</span><br><span class="line"></span><br><span class="line">    domCache.<span class="property">confirmButton</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">handleConfirmButtonClick</span>(instance, innerParams);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    domCache.<span class="property">cancelButton</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">handleCancelButtonClick</span>(instance, dismissWith);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    domCache.<span class="property">closeButton</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">dismissWith</span>(<span class="title class_">DismissReason</span>.<span class="property">close</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handlePopupClick</span>(domCache, innerParams, dismissWith);</span><br><span class="line">    <span class="title function_">addKeydownHandler</span>(instance, globalState, innerParams, dismissWith);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (innerParams.<span class="property">toast</span> &amp;&amp; (innerParams.<span class="property">input</span> || innerParams.<span class="property">footer</span> || innerParams.<span class="property">showCloseButton</span>)) &#123;</span><br><span class="line">      <span class="title function_">addClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses[<span class="string">&#x27;toast-column&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">removeClass</span>(<span class="variable language_">document</span>.<span class="property">body</span>, swalClasses[<span class="string">&#x27;toast-column&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleInputOptionsAndValue</span>(instance, innerParams);</span><br><span class="line">    <span class="title function_">openPopup</span>(innerParams);</span><br><span class="line">    <span class="title function_">initFocus</span>(domCache, innerParams); <span class="comment">// Scroll container to top on open (#1247)</span></span><br><span class="line"></span><br><span class="line">    domCache.<span class="property">container</span>.<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> populateDomCache = <span class="keyword">function</span> <span class="title function_">populateDomCache</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> domCache = &#123;</span><br><span class="line">    <span class="attr">popup</span>: <span class="title function_">getPopup</span>(),</span><br><span class="line">    <span class="attr">container</span>: <span class="title function_">getContainer</span>(),</span><br><span class="line">    <span class="attr">content</span>: <span class="title function_">getContent</span>(),</span><br><span class="line">    <span class="attr">actions</span>: <span class="title function_">getActions</span>(),</span><br><span class="line">    <span class="attr">confirmButton</span>: <span class="title function_">getConfirmButton</span>(),</span><br><span class="line">    <span class="attr">cancelButton</span>: <span class="title function_">getCancelButton</span>(),</span><br><span class="line">    <span class="attr">closeButton</span>: <span class="title function_">getCloseButton</span>(),</span><br><span class="line">    <span class="attr">validationMessage</span>: <span class="title function_">getValidationMessage</span>(),</span><br><span class="line">    <span class="attr">progressSteps</span>: <span class="title function_">getProgressSteps</span>()</span><br><span class="line">  &#125;;</span><br><span class="line">  privateProps.<span class="property">domCache</span>.<span class="title function_">set</span>(instance, domCache);</span><br><span class="line">  <span class="keyword">return</span> domCache;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setupTimer = <span class="keyword">function</span> <span class="title function_">setupTimer</span>(<span class="params">globalState$$1, innerParams, dismissWith</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">timer</span>) &#123;</span><br><span class="line">    globalState$$1.<span class="property">timeout</span> = <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">dismissWith</span>(<span class="string">&#x27;timer&#x27;</span>);</span><br><span class="line">      <span class="keyword">delete</span> globalState$$1.<span class="property">timeout</span>;</span><br><span class="line">    &#125;, innerParams.<span class="property">timer</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initFocus = <span class="keyword">function</span> <span class="title function_">initFocus</span>(<span class="params">domCache, innerParams</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">toast</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">callIfFunction</span>(innerParams.<span class="property">allowEnterKey</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">blurActiveElement</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">focusCancel</span> &amp;&amp; <span class="title function_">isVisible</span>(domCache.<span class="property">cancelButton</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> domCache.<span class="property">cancelButton</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (innerParams.<span class="property">focusConfirm</span> &amp;&amp; <span class="title function_">isVisible</span>(domCache.<span class="property">confirmButton</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> domCache.<span class="property">confirmButton</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setFocus</span>(innerParams, -<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blurActiveElement = <span class="keyword">function</span> <span class="title function_">blurActiveElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">activeElement</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="property">blur</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">blur</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Updates popup parameters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> popup = <span class="title function_">getPopup</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!popup || <span class="title function_">hasClass</span>(popup, swalClasses.<span class="property">hide</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">warn</span>(<span class="string">&quot;You&#x27;re trying to update the closed or closing popup, that won&#x27;t work. Use the update() method in preConfirm parameter or show a new popup.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> validUpdatableParams = &#123;&#125;; <span class="comment">// assign valid params from `params` to `defaults`</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Swal</span>.<span class="title function_">isUpdatableParameter</span>(param)) &#123;</span><br><span class="line">      validUpdatableParams[param] = params[param];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">&quot;Invalid parameter to update: \&quot;&quot;</span>.<span class="title function_">concat</span>(param, <span class="string">&quot;\&quot;. Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> innerParams = privateProps.<span class="property">innerParams</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> updatedParams = <span class="title function_">_extends</span>(&#123;&#125;, innerParams, validUpdatableParams);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="variable language_">this</span>, updatedParams);</span><br><span class="line">  privateProps.<span class="property">innerParams</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>, updatedParams);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="title function_">_extends</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">params</span>, params),</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instanceMethods = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;</span><br><span class="line"><span class="attr">hideLoading</span>: hideLoading,</span><br><span class="line"><span class="attr">disableLoading</span>: hideLoading,</span><br><span class="line"><span class="attr">getInput</span>: getInput$1,</span><br><span class="line"><span class="attr">close</span>: close,</span><br><span class="line"><span class="attr">closePopup</span>: close,</span><br><span class="line"><span class="attr">closeModal</span>: close,</span><br><span class="line"><span class="attr">closeToast</span>: close,</span><br><span class="line"><span class="attr">enableButtons</span>: enableButtons,</span><br><span class="line"><span class="attr">disableButtons</span>: disableButtons,</span><br><span class="line"><span class="attr">enableConfirmButton</span>: enableConfirmButton,</span><br><span class="line"><span class="attr">disableConfirmButton</span>: disableConfirmButton,</span><br><span class="line"><span class="attr">enableInput</span>: enableInput,</span><br><span class="line"><span class="attr">disableInput</span>: disableInput,</span><br><span class="line"><span class="attr">showValidationMessage</span>: showValidationMessage,</span><br><span class="line"><span class="attr">resetValidationMessage</span>: resetValidationMessage$1,</span><br><span class="line"><span class="attr">getProgressSteps</span>: getProgressSteps$1,</span><br><span class="line"><span class="attr">setProgressSteps</span>: setProgressSteps,</span><br><span class="line"><span class="attr">showProgressSteps</span>: showProgressSteps,</span><br><span class="line"><span class="attr">hideProgressSteps</span>: hideProgressSteps,</span><br><span class="line"><span class="attr">_main</span>: _main,</span><br><span class="line"><span class="attr">update</span>: update</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentInstance; <span class="comment">// SweetAlert constructor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SweetAlert</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Prevent run in Node env</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="comment">// Check for the existence of Promise</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* istanbul ignore if */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">error</span>(<span class="string">&#x27;This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  currentInstance = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="variable language_">arguments</span>.<span class="property">length</span>, args = <span class="keyword">new</span> <span class="title class_">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    args[_key] = <span class="variable language_">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> outerParams = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="variable language_">this</span>.<span class="property">constructor</span>.<span class="title function_">argsToParams</span>(args));</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: outerParams,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> promise = <span class="variable language_">this</span>.<span class="title function_">_main</span>(<span class="variable language_">this</span>.<span class="property">params</span>);</span><br><span class="line"></span><br><span class="line">  privateProps.<span class="property">promise</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>, promise);</span><br><span class="line">&#125; <span class="comment">// `catch` cannot be the name of a module export, so we define our thenable methods here instead</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">SweetAlert</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> promise = privateProps.<span class="property">promise</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> promise.<span class="title function_">then</span>(onFulfilled);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SweetAlert</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="string">&quot;finally&quot;</span>] = <span class="keyword">function</span> (<span class="params">onFinally</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> promise = privateProps.<span class="property">promise</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> promise[<span class="string">&quot;finally&quot;</span>](onFinally);</span><br><span class="line">&#125;; <span class="comment">// Assign instance methods from src/instanceMethods/*.js to prototype</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">_extends</span>(<span class="title class_">SweetAlert</span>.<span class="property"><span class="keyword">prototype</span></span>, instanceMethods); <span class="comment">// Assign static methods from src/staticMethods/*.js to constructor</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">_extends</span>(<span class="title class_">SweetAlert</span>, staticMethods); <span class="comment">// Proxy to instance methods to constructor, for now, for backwards compatibility</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(instanceMethods).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="title class_">SweetAlert</span>[key] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentInstance) &#123;</span><br><span class="line">      <span class="keyword">var</span> _currentInstance;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (_currentInstance = currentInstance)[key].<span class="title function_">apply</span>(_currentInstance, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">SweetAlert</span>.<span class="property">DismissReason</span> = <span class="title class_">DismissReason</span>;</span><br><span class="line"><span class="title class_">SweetAlert</span>.<span class="property">version</span> = <span class="string">&#x27;8.19.0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Swal</span> = <span class="title class_">SweetAlert</span>;</span><br><span class="line"><span class="title class_">Swal</span>[<span class="string">&quot;default&quot;</span>] = <span class="title class_">Swal</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Swal</span>;</span><br><span class="line"></span><br><span class="line">&#125;)));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">Sweetalert2</span>)&#123;  <span class="variable language_">this</span>.<span class="property">swal</span> = <span class="variable language_">this</span>.<span class="property">sweetAlert</span> = <span class="variable language_">this</span>.<span class="property">Swal</span> = <span class="variable language_">this</span>.<span class="property">SweetAlert</span> = <span class="variable language_">this</span>.<span class="property">Sweetalert2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> <span class="variable language_">document</span>&amp;&amp;<span class="keyword">function</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> n=e.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);<span class="keyword">if</span>(e.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(n),n.<span class="property">styleSheet</span>)n.<span class="property">styleSheet</span>.<span class="property">disabled</span>||(n.<span class="property">styleSheet</span>.<span class="property">cssText</span>=t);<span class="keyword">else</span> <span class="keyword">try</span>&#123;n.<span class="property">innerHTML</span>=t&#125;<span class="keyword">catch</span>(e)&#123;n.<span class="property">innerText</span>=t&#125;&#125;(<span class="variable language_">document</span>,<span class="string">&quot;@charset \&quot;UTF-8\&quot;;.swal2-popup.swal2-toast&#123;flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;box-shadow:0 0 .625em #d9d9d9&#125;.swal2-popup.swal2-toast .swal2-header&#123;flex-direction:row&#125;.swal2-popup.swal2-toast .swal2-title&#123;flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em&#125;.swal2-popup.swal2-toast .swal2-footer&#123;margin:.5em 0 0;padding:.5em 0 0;font-size:.8em&#125;.swal2-popup.swal2-toast .swal2-close&#123;position:static;width:.8em;height:.8em;line-height:.8&#125;.swal2-popup.swal2-toast .swal2-content&#123;justify-content:flex-start;font-size:1em&#125;.swal2-popup.swal2-toast .swal2-icon&#123;width:2em;min-width:2em;height:2em;margin:0&#125;.swal2-popup.swal2-toast .swal2-icon::before&#123;display:flex;align-items:center;font-size:2em;font-weight:700&#125;@media all and (-ms-high-contrast:none),(-ms-high-contrast:active)&#123;.swal2-popup.swal2-toast .swal2-icon::before&#123;font-size:.25em&#125;&#125;.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring&#123;width:2em;height:2em&#125;.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]&#123;top:.875em;width:1.375em&#125;.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]&#123;left:.3125em&#125;.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]&#123;right:.3125em&#125;.swal2-popup.swal2-toast .swal2-actions&#123;flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em&#125;.swal2-popup.swal2-toast .swal2-styled&#123;margin:0 .3125em;padding:.3125em .625em;font-size:1em&#125;.swal2-popup.swal2-toast .swal2-styled:focus&#123;box-shadow:0 0 0 .0625em #fff,0 0 0 .125em rgba(50,100,150,.4)&#125;.swal2-popup.swal2-toast .swal2-success&#123;border-color:#a5dc86&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]&#123;position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]&#123;top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]&#123;top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0&#125;.swal2-popup.swal2-toast .swal2-success .swal2-success-ring&#123;width:2em;height:2em&#125;.swal2-popup.swal2-toast .swal2-success .swal2-success-fix&#123;top:0;left:.4375em;width:.4375em;height:2.6875em&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]&#123;height:.3125em&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]&#123;top:1.125em;left:.1875em;width:.75em&#125;.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]&#123;top:.9375em;right:.1875em;width:1.375em&#125;.swal2-popup.swal2-toast.swal2-show&#123;-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s&#125;.swal2-popup.swal2-toast.swal2-hide&#123;-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards&#125;.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-tip&#123;-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s&#125;.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-long&#123;-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s&#125;.swal2-container&#123;display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;background-color:transparent;-webkit-overflow-scrolling:touch&#125;.swal2-container.swal2-top&#123;align-items:flex-start&#125;.swal2-container.swal2-top-left,.swal2-container.swal2-top-start&#123;align-items:flex-start;justify-content:flex-start&#125;.swal2-container.swal2-top-end,.swal2-container.swal2-top-right&#123;align-items:flex-start;justify-content:flex-end&#125;.swal2-container.swal2-center&#123;align-items:center&#125;.swal2-container.swal2-center-left,.swal2-container.swal2-center-start&#123;align-items:center;justify-content:flex-start&#125;.swal2-container.swal2-center-end,.swal2-container.swal2-center-right&#123;align-items:center;justify-content:flex-end&#125;.swal2-container.swal2-bottom&#123;align-items:flex-end&#125;.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start&#123;align-items:flex-end;justify-content:flex-start&#125;.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right&#123;align-items:flex-end;justify-content:flex-end&#125;.swal2-container.swal2-bottom-end&gt;:first-child,.swal2-container.swal2-bottom-left&gt;:first-child,.swal2-container.swal2-bottom-right&gt;:first-child,.swal2-container.swal2-bottom-start&gt;:first-child,.swal2-container.swal2-bottom&gt;:first-child&#123;margin-top:auto&#125;.swal2-container.swal2-grow-fullscreen&gt;.swal2-modal&#123;display:flex!important;flex:1;align-self:stretch;justify-content:center&#125;.swal2-container.swal2-grow-row&gt;.swal2-modal&#123;display:flex!important;flex:1;align-content:center;justify-content:center&#125;.swal2-container.swal2-grow-column&#123;flex:1;flex-direction:column&#125;.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top&#123;align-items:center&#125;.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start&#123;align-items:flex-start&#125;.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right&#123;align-items:flex-end&#125;.swal2-container.swal2-grow-column&gt;.swal2-modal&#123;display:flex!important;flex:1;align-content:center;justify-content:center&#125;.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)&gt;.swal2-modal&#123;margin:auto&#125;@media all and (-ms-high-contrast:none),(-ms-high-contrast:active)&#123;.swal2-container .swal2-modal&#123;margin:0!important&#125;&#125;.swal2-container.swal2-shown&#123;background-color:rgba(0,0,0,.4)&#125;.swal2-popup&#123;display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem&#125;.swal2-popup:focus&#123;outline:0&#125;.swal2-popup.swal2-loading&#123;overflow-y:hidden&#125;.swal2-header&#123;display:flex;flex-direction:column;align-items:center&#125;.swal2-title&#123;position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word&#125;.swal2-actions&#123;display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0&#125;.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]&#123;opacity:.4&#125;.swal2-actions:not(.swal2-loading) .swal2-styled:hover&#123;background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))&#125;.swal2-actions:not(.swal2-loading) .swal2-styled:active&#123;background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))&#125;.swal2-actions.swal2-loading .swal2-styled.swal2-confirm&#123;box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none&#125;.swal2-actions.swal2-loading .swal2-styled.swal2-cancel&#123;margin-right:30px;margin-left:30px&#125;.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after&#123;content:\&quot;\&quot;;display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff&#125;.swal2-styled&#123;margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500&#125;.swal2-styled:not([disabled])&#123;cursor:pointer&#125;.swal2-styled.swal2-confirm&#123;border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em&#125;.swal2-styled.swal2-cancel&#123;border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em&#125;.swal2-styled:focus&#123;outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px rgba(50,100,150,.4)&#125;.swal2-styled::-moz-focus-inner&#123;border:0&#125;.swal2-footer&#123;justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em&#125;.swal2-image&#123;max-width:100%;margin:1.25em auto&#125;.swal2-close&#123;position:absolute;z-index:2;top:0;right:0;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer&#125;.swal2-close:hover&#123;transform:none;background:0 0;color:#f27474&#125;.swal2-content&#123;z-index:1;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word&#125;.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea&#123;margin:1em auto&#125;.swal2-file,.swal2-input,.swal2-textarea&#123;box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em&#125;.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror&#123;border-color:#f27474!important;box-shadow:0 0 2px #f27474!important&#125;.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus&#123;border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5&#125;.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder&#123;color:#ccc&#125;.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder&#123;color:#ccc&#125;.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder&#123;color:#ccc&#125;.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder&#123;color:#ccc&#125;.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder&#123;color:#ccc&#125;.swal2-range&#123;margin:1em auto;background:inherit&#125;.swal2-range input&#123;width:80%&#125;.swal2-range output&#123;width:20%;color:inherit;font-weight:600;text-align:center&#125;.swal2-range input,.swal2-range output&#123;height:2.625em;padding:0;font-size:1.125em;line-height:2.625em&#125;.swal2-input&#123;height:2.625em;padding:0 .75em&#125;.swal2-input[type=number]&#123;max-width:10em&#125;.swal2-file&#123;background:inherit;font-size:1.125em&#125;.swal2-textarea&#123;height:6.75em;padding:.75em&#125;.swal2-select&#123;min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em&#125;.swal2-checkbox,.swal2-radio&#123;align-items:center;justify-content:center;background:inherit;color:inherit&#125;.swal2-checkbox label,.swal2-radio label&#123;margin:0 .6em;font-size:1.125em&#125;.swal2-checkbox input,.swal2-radio input&#123;margin:0 .4em&#125;.swal2-validation-message&#123;display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300&#125;.swal2-validation-message::before&#123;content:\&quot;!\&quot;;display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center&#125;.swal2-icon&#123;position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none&#125;.swal2-icon::before&#123;display:flex;align-items:center;height:92%;font-size:3.75em&#125;.swal2-icon.swal2-error&#123;border-color:#f27474&#125;.swal2-icon.swal2-error .swal2-x-mark&#123;position:relative;flex-grow:1&#125;.swal2-icon.swal2-error [class^=swal2-x-mark-line]&#123;display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474&#125;.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]&#123;left:1.0625em;transform:rotate(45deg)&#125;.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]&#123;right:1em;transform:rotate(-45deg)&#125;.swal2-icon.swal2-warning&#123;border-color:#facea8;color:#f8bb86&#125;.swal2-icon.swal2-warning::before&#123;content:\&quot;!\&quot;&#125;.swal2-icon.swal2-info&#123;border-color:#9de0f6;color:#3fc3ee&#125;.swal2-icon.swal2-info::before&#123;content:\&quot;i\&quot;&#125;.swal2-icon.swal2-question&#123;border-color:#c9dae1;color:#87adbd&#125;.swal2-icon.swal2-question::before&#123;content:\&quot;?\&quot;&#125;.swal2-icon.swal2-question.swal2-arabic-question-mark::before&#123;content:\&quot;؟\&quot;&#125;.swal2-icon.swal2-success&#123;border-color:#a5dc86&#125;.swal2-icon.swal2-success [class^=swal2-success-circular-line]&#123;position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%&#125;.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]&#123;top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em&#125;.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]&#123;top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0&#125;.swal2-icon.swal2-success .swal2-success-ring&#123;position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%&#125;.swal2-icon.swal2-success .swal2-success-fix&#123;position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)&#125;.swal2-icon.swal2-success [class^=swal2-success-line]&#123;display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86&#125;.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]&#123;top:2.875em;left:.875em;width:1.5625em;transform:rotate(45deg)&#125;.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]&#123;top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)&#125;.swal2-progress-steps&#123;align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600&#125;.swal2-progress-steps li&#123;display:inline-block;position:relative&#125;.swal2-progress-steps .swal2-progress-step&#123;z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center&#125;.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step&#123;background:#3085d6&#125;.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step&#123;background:#add8e6;color:#fff&#125;.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line&#123;background:#add8e6&#125;.swal2-progress-steps .swal2-progress-step-line&#123;z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6&#125;[class^=swal2]&#123;-webkit-tap-highlight-color:transparent&#125;.swal2-show&#123;-webkit-animation:swal2-show .3s;animation:swal2-show .3s&#125;.swal2-show.swal2-noanimation&#123;-webkit-animation:none;animation:none&#125;.swal2-hide&#123;-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards&#125;.swal2-hide.swal2-noanimation&#123;-webkit-animation:none;animation:none&#125;.swal2-rtl .swal2-close&#123;right:auto;left:0&#125;.swal2-animate-success-icon .swal2-success-line-tip&#123;-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s&#125;.swal2-animate-success-icon .swal2-success-line-long&#123;-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s&#125;.swal2-animate-success-icon .swal2-success-circular-line-right&#123;-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in&#125;.swal2-animate-error-icon&#123;-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s&#125;.swal2-animate-error-icon .swal2-x-mark&#123;-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s&#125;@supports (-ms-accelerator:true)&#123;.swal2-range input&#123;width:100%!important&#125;.swal2-range output&#123;display:none&#125;&#125;@media all and (-ms-high-contrast:none),(-ms-high-contrast:active)&#123;.swal2-range input&#123;width:100%!important&#125;.swal2-range output&#123;display:none&#125;&#125;@-moz-document url-prefix()&#123;.swal2-close:focus&#123;outline:2px solid rgba(50,100,150,.4)&#125;&#125;@-webkit-keyframes swal2-toast-show&#123;0%&#123;transform:translateY(-.625em) rotateZ(2deg)&#125;33%&#123;transform:translateY(0) rotateZ(-2deg)&#125;66%&#123;transform:translateY(.3125em) rotateZ(2deg)&#125;100%&#123;transform:translateY(0) rotateZ(0)&#125;&#125;@keyframes swal2-toast-show&#123;0%&#123;transform:translateY(-.625em) rotateZ(2deg)&#125;33%&#123;transform:translateY(0) rotateZ(-2deg)&#125;66%&#123;transform:translateY(.3125em) rotateZ(2deg)&#125;100%&#123;transform:translateY(0) rotateZ(0)&#125;&#125;@-webkit-keyframes swal2-toast-hide&#123;100%&#123;transform:rotateZ(1deg);opacity:0&#125;&#125;@keyframes swal2-toast-hide&#123;100%&#123;transform:rotateZ(1deg);opacity:0&#125;&#125;@-webkit-keyframes swal2-toast-animate-success-line-tip&#123;0%&#123;top:.5625em;left:.0625em;width:0&#125;54%&#123;top:.125em;left:.125em;width:0&#125;70%&#123;top:.625em;left:-.25em;width:1.625em&#125;84%&#123;top:1.0625em;left:.75em;width:.5em&#125;100%&#123;top:1.125em;left:.1875em;width:.75em&#125;&#125;@keyframes swal2-toast-animate-success-line-tip&#123;0%&#123;top:.5625em;left:.0625em;width:0&#125;54%&#123;top:.125em;left:.125em;width:0&#125;70%&#123;top:.625em;left:-.25em;width:1.625em&#125;84%&#123;top:1.0625em;left:.75em;width:.5em&#125;100%&#123;top:1.125em;left:.1875em;width:.75em&#125;&#125;@-webkit-keyframes swal2-toast-animate-success-line-long&#123;0%&#123;top:1.625em;right:1.375em;width:0&#125;65%&#123;top:1.25em;right:.9375em;width:0&#125;84%&#123;top:.9375em;right:0;width:1.125em&#125;100%&#123;top:.9375em;right:.1875em;width:1.375em&#125;&#125;@keyframes swal2-toast-animate-success-line-long&#123;0%&#123;top:1.625em;right:1.375em;width:0&#125;65%&#123;top:1.25em;right:.9375em;width:0&#125;84%&#123;top:.9375em;right:0;width:1.125em&#125;100%&#123;top:.9375em;right:.1875em;width:1.375em&#125;&#125;@-webkit-keyframes swal2-show&#123;0%&#123;transform:scale(.7)&#125;45%&#123;transform:scale(1.05)&#125;80%&#123;transform:scale(.95)&#125;100%&#123;transform:scale(1)&#125;&#125;@keyframes swal2-show&#123;0%&#123;transform:scale(.7)&#125;45%&#123;transform:scale(1.05)&#125;80%&#123;transform:scale(.95)&#125;100%&#123;transform:scale(1)&#125;&#125;@-webkit-keyframes swal2-hide&#123;0%&#123;transform:scale(1);opacity:1&#125;100%&#123;transform:scale(.5);opacity:0&#125;&#125;@keyframes swal2-hide&#123;0%&#123;transform:scale(1);opacity:1&#125;100%&#123;transform:scale(.5);opacity:0&#125;&#125;@-webkit-keyframes swal2-animate-success-line-tip&#123;0%&#123;top:1.1875em;left:.0625em;width:0&#125;54%&#123;top:1.0625em;left:.125em;width:0&#125;70%&#123;top:2.1875em;left:-.375em;width:3.125em&#125;84%&#123;top:3em;left:1.3125em;width:1.0625em&#125;100%&#123;top:2.8125em;left:.875em;width:1.5625em&#125;&#125;@keyframes swal2-animate-success-line-tip&#123;0%&#123;top:1.1875em;left:.0625em;width:0&#125;54%&#123;top:1.0625em;left:.125em;width:0&#125;70%&#123;top:2.1875em;left:-.375em;width:3.125em&#125;84%&#123;top:3em;left:1.3125em;width:1.0625em&#125;100%&#123;top:2.8125em;left:.875em;width:1.5625em&#125;&#125;@-webkit-keyframes swal2-animate-success-line-long&#123;0%&#123;top:3.375em;right:2.875em;width:0&#125;65%&#123;top:3.375em;right:2.875em;width:0&#125;84%&#123;top:2.1875em;right:0;width:3.4375em&#125;100%&#123;top:2.375em;right:.5em;width:2.9375em&#125;&#125;@keyframes swal2-animate-success-line-long&#123;0%&#123;top:3.375em;right:2.875em;width:0&#125;65%&#123;top:3.375em;right:2.875em;width:0&#125;84%&#123;top:2.1875em;right:0;width:3.4375em&#125;100%&#123;top:2.375em;right:.5em;width:2.9375em&#125;&#125;@-webkit-keyframes swal2-rotate-success-circular-line&#123;0%&#123;transform:rotate(-45deg)&#125;5%&#123;transform:rotate(-45deg)&#125;12%&#123;transform:rotate(-405deg)&#125;100%&#123;transform:rotate(-405deg)&#125;&#125;@keyframes swal2-rotate-success-circular-line&#123;0%&#123;transform:rotate(-45deg)&#125;5%&#123;transform:rotate(-45deg)&#125;12%&#123;transform:rotate(-405deg)&#125;100%&#123;transform:rotate(-405deg)&#125;&#125;@-webkit-keyframes swal2-animate-error-x-mark&#123;0%&#123;margin-top:1.625em;transform:scale(.4);opacity:0&#125;50%&#123;margin-top:1.625em;transform:scale(.4);opacity:0&#125;80%&#123;margin-top:-.375em;transform:scale(1.15)&#125;100%&#123;margin-top:0;transform:scale(1);opacity:1&#125;&#125;@keyframes swal2-animate-error-x-mark&#123;0%&#123;margin-top:1.625em;transform:scale(.4);opacity:0&#125;50%&#123;margin-top:1.625em;transform:scale(.4);opacity:0&#125;80%&#123;margin-top:-.375em;transform:scale(1.15)&#125;100%&#123;margin-top:0;transform:scale(1);opacity:1&#125;&#125;@-webkit-keyframes swal2-animate-error-icon&#123;0%&#123;transform:rotateX(100deg);opacity:0&#125;100%&#123;transform:rotateX(0);opacity:1&#125;&#125;@keyframes swal2-animate-error-icon&#123;0%&#123;transform:rotateX(100deg);opacity:0&#125;100%&#123;transform:rotateX(0);opacity:1&#125;&#125;@-webkit-keyframes swal2-rotate-loading&#123;0%&#123;transform:rotate(0)&#125;100%&#123;transform:rotate(360deg)&#125;&#125;@keyframes swal2-rotate-loading&#123;0%&#123;transform:rotate(0)&#125;100%&#123;transform:rotate(360deg)&#125;&#125;body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)&#123;overflow:hidden&#125;body.swal2-height-auto&#123;height:auto!important&#125;body.swal2-no-backdrop .swal2-shown&#123;top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent&#125;body.swal2-no-backdrop .swal2-shown&gt;.swal2-modal&#123;box-shadow:0 0 10px rgba(0,0,0,.4)&#125;body.swal2-no-backdrop .swal2-shown.swal2-top&#123;top:0;left:50%;transform:translateX(-50%)&#125;body.swal2-no-backdrop .swal2-shown.swal2-top-left,body.swal2-no-backdrop .swal2-shown.swal2-top-start&#123;top:0;left:0&#125;body.swal2-no-backdrop .swal2-shown.swal2-top-end,body.swal2-no-backdrop .swal2-shown.swal2-top-right&#123;top:0;right:0&#125;body.swal2-no-backdrop .swal2-shown.swal2-center&#123;top:50%;left:50%;transform:translate(-50%,-50%)&#125;body.swal2-no-backdrop .swal2-shown.swal2-center-left,body.swal2-no-backdrop .swal2-shown.swal2-center-start&#123;top:50%;left:0;transform:translateY(-50%)&#125;body.swal2-no-backdrop .swal2-shown.swal2-center-end,body.swal2-no-backdrop .swal2-shown.swal2-center-right&#123;top:50%;right:0;transform:translateY(-50%)&#125;body.swal2-no-backdrop .swal2-shown.swal2-bottom&#123;bottom:0;left:50%;transform:translateX(-50%)&#125;body.swal2-no-backdrop .swal2-shown.swal2-bottom-left,body.swal2-no-backdrop .swal2-shown.swal2-bottom-start&#123;bottom:0;left:0&#125;body.swal2-no-backdrop .swal2-shown.swal2-bottom-end,body.swal2-no-backdrop .swal2-shown.swal2-bottom-right&#123;right:0;bottom:0&#125;@media print&#123;body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)&#123;overflow-y:scroll!important&#125;body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)&gt;[aria-hidden=true]&#123;display:none&#125;body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container&#123;position:static!important&#125;&#125;body.swal2-toast-shown .swal2-container&#123;background-color:transparent&#125;body.swal2-toast-shown .swal2-container.swal2-shown&#123;background-color:transparent&#125;body.swal2-toast-shown .swal2-container.swal2-top&#123;top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)&#125;body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right&#123;top:0;right:0;bottom:auto;left:auto&#125;body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start&#123;top:0;right:auto;bottom:auto;left:0&#125;body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start&#123;top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)&#125;body.swal2-toast-shown .swal2-container.swal2-center&#123;top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)&#125;body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right&#123;top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)&#125;body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start&#123;top:auto;right:auto;bottom:0;left:0&#125;body.swal2-toast-shown .swal2-container.swal2-bottom&#123;top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)&#125;body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right&#123;top:auto;right:0;bottom:0;left:auto&#125;body.swal2-toast-column .swal2-toast&#123;flex-direction:column;align-items:stretch&#125;body.swal2-toast-column .swal2-toast .swal2-actions&#123;flex:1;align-self:stretch;height:2.2em;margin-top:.3125em&#125;body.swal2-toast-column .swal2-toast .swal2-loading&#123;justify-content:center&#125;body.swal2-toast-column .swal2-toast .swal2-input&#123;height:2em;margin:.3125em auto;font-size:1em&#125;body.swal2-toast-column .swal2-toast .swal2-validation-message&#123;font-size:1em&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="主题配置文件的-inject里面引入"><a href="#主题配置文件的-inject里面引入" class="headerlink" title="主题配置文件的 inject里面引入"></a>主题配置文件的 inject里面引入</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/lunar.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/day.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">type=&quot;text/javascript&quot;</span> <span class="string">src=&quot;https://cdn1.tianli0.top/npm/sweetalert2@8.19.0/dist/sweetalert2.all.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">PublicSacrificeDay</span>()) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;html&quot;</span>)[<span class="number">0</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;filter:gray !important;filter:grayscale(100%);-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);-ms-filter:grayscale(100%);-o-filter:grayscale(100%);&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">PublicSacrificeDay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">PSFarr</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;0404&quot;</span>, <span class="string">&quot;0405&quot;</span>, <span class="string">&quot;0414&quot;</span>, <span class="string">&quot;0512&quot;</span>, <span class="string">&quot;0707&quot;</span>, <span class="string">&quot;0807&quot;</span>, <span class="string">&quot;0814&quot;</span>, <span class="string">&quot;0909&quot;</span>, <span class="string">&quot;0918&quot;</span>, <span class="string">&quot;0930&quot;</span>, <span class="string">&quot;1025&quot;</span>, <span class="string">&quot;1130&quot;</span>, <span class="string">&quot;1213&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> currentdate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> mm = currentdate.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (currentdate.<span class="title function_">getMonth</span>() &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      str += mm;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      str += <span class="string">&quot;0&quot;</span> + mm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentdate.<span class="title function_">getDate</span>() &gt; <span class="number">9</span>) &#123;</span><br><span class="line">      str += currentdate.<span class="title function_">getDate</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      str += <span class="string">&quot;0&quot;</span> + currentdate.<span class="title function_">getDate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">PSFarr</span>.<span class="title function_">indexOf</span>(str) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件的 inject里面引入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/2.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：方案二无弹框</strong></p><h2 id="评论表情包放大功能，超实用"><a href="#评论表情包放大功能，超实用" class="headerlink" title="评论表情包放大功能，超实用"></a>评论表情包放大功能，超实用</h2><blockquote><p>  本教程来自<a href="https://blog.leonus.cn/2022/owo-big.html">Leonus</a></p></blockquote><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果当前页有评论就执行函数</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;post-comment&#x27;</span>)) <span class="title function_">owoBig</span>();</span><br><span class="line"><span class="comment">// 表情放大</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">owoBig</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">1</span>, <span class="comment">// 设置节流阀</span></span><br><span class="line">        owo_time = <span class="string">&#x27;&#x27;</span>, <span class="comment">// 设置计时器</span></span><br><span class="line">        m = <span class="number">3</span>; <span class="comment">// 设置放大倍数</span></span><br><span class="line">    <span class="comment">// 创建盒子</span></span><br><span class="line">    <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">        body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置ID</span></span><br><span class="line">    div.<span class="property">id</span> = <span class="string">&#x27;owo-big&#x27;</span>;</span><br><span class="line">    <span class="comment">// 插入盒子</span></span><br><span class="line">    body.<span class="title function_">appendChild</span>(div)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造observer</span></span><br><span class="line">    <span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function"><span class="params">mutations</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mutations.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> dom = mutations[i].<span class="property">addedNodes</span>,</span><br><span class="line">                owo_body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (dom.<span class="property">length</span> == <span class="number">2</span> &amp;&amp; dom[<span class="number">1</span>].<span class="property">className</span> == <span class="string">&#x27;OwO-body&#x27;</span>) owo_body = dom[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 如果需要在评论内容中启用此功能请解除下面的注释</span></span><br><span class="line">            <span class="comment">// else if (dom.length == 1 &amp;&amp; dom[0].className == &#x27;tk-comment&#x27;) owo_body = dom[0];</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 禁用右键（手机端长按会出现右键菜单，为了体验给禁用掉）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span> &lt;= <span class="number">768</span>) owo_body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> e.<span class="title function_">preventDefault</span>());</span><br><span class="line">            <span class="comment">// 鼠标移入</span></span><br><span class="line">            owo_body.<span class="property">onmouseover</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (flag &amp;&amp; e.<span class="property">target</span>.<span class="property">tagName</span> == <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="comment">// 移入300毫秒后显示盒子</span></span><br><span class="line">                        owo_time = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">let</span> height = e.<span class="property">target</span>.<span class="property">clientHeight</span> * m, <span class="comment">// 盒子高 2023-02-16更新</span></span><br><span class="line">                                width = e.<span class="property">target</span>.<span class="property">clientWidth</span> * m, <span class="comment">// 盒子宽 2023-02-16更新</span></span><br><span class="line">                                left = (e.<span class="property">x</span> - e.<span class="property">offsetX</span>) - (width - e.<span class="property">target</span>.<span class="property">clientWidth</span>) / <span class="number">2</span>, <span class="comment">// 盒子与屏幕左边距离 2023-02-16更新</span></span><br><span class="line">                                top = e.<span class="property">y</span> - e.<span class="property">offsetY</span>; <span class="comment">// 盒子与屏幕顶部距离</span></span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> ((left + width) &gt; body.<span class="property">clientWidth</span>) left -= ((left + width) - body.<span class="property">clientWidth</span> + <span class="number">10</span>); <span class="comment">// 右边缘检测，防止超出屏幕</span></span><br><span class="line">                            <span class="keyword">if</span> (left &lt; <span class="number">0</span>) left = <span class="number">10</span>; <span class="comment">// 左边缘检测，防止超出屏幕</span></span><br><span class="line">                            <span class="comment">// 设置盒子样式</span></span><br><span class="line">                            div.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`display:flex; height:<span class="subst">$&#123;height&#125;</span>px; width:<span class="subst">$&#123;width&#125;</span>px; left:<span class="subst">$&#123;left&#125;</span>px; top:<span class="subst">$&#123;top&#125;</span>px;`</span>;</span><br><span class="line">                            <span class="comment">// 在盒子中插入图片</span></span><br><span class="line">                            div.<span class="property">innerHTML</span> = <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;e.target.src&#125;</span>&quot;&gt;`</span></span><br><span class="line">                        &#125;, <span class="number">300</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            <span class="comment">// 鼠标移出隐藏盒子</span></span><br><span class="line">            owo_body.<span class="property">onmouseout</span> = <span class="function">() =&gt;</span> &#123; div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>, flag = <span class="number">1</span>, <span class="built_in">clearTimeout</span>(owo_time); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;post-comment&#x27;</span>), &#123; <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="attr">childList</span>: <span class="literal">true</span> &#125;) <span class="comment">// 监听的 元素 和 配置项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#owo-big</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#aaa</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">105%</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">animation</span>: owoIn <span class="number">0.3s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.42</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">1.11</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-id">#owo-big</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4a4a4a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#owo-big</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 动画效果代码由 Heo：https://blog.zhheo.com/ 提供 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> owoIn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">95%</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">105%</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="twikoo评论区设置气泡"><a href="#twikoo评论区设置气泡" class="headerlink" title="twikoo评论区设置气泡"></a>twikoo评论区设置气泡</h2><h3 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tk-content</span> <span class="selector-pseudo">:not</span>(pre) &gt; <span class="selector-tag">code</span><span class="selector-attr">[class*=<span class="string">&quot;language-&quot;</span>]</span>,</span><br><span class="line"><span class="selector-class">.tk-content</span> pre<span class="selector-attr">[class*=<span class="string">&quot;language-&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-action-count</span>,</span><br><span class="line"><span class="selector-class">.tk-nick</span>,</span><br><span class="line"><span class="selector-class">.tk-nick-link</span>,</span><br><span class="line"><span class="selector-class">.tk-nick-link</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--cover-bg) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-action-icon</span> svg &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--cover-bg) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-comments-container</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-row</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3rem</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-avatar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">3rem</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-comment</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-class">.tk-content</span> pre &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-fancybox=<span class="string">&quot;gallery&quot;</span>]</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--second);</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="built_in">var</span>(--second);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-fancybox=<span class="string">&quot;gallery&quot;</span>]</span>)<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--main);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--second);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-fancybox=<span class="string">&quot;gallery&quot;</span>]</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="built_in">var</span>(--main);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-content</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-fancybox=<span class="string">&quot;gallery&quot;</span>]</span>)<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--second);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--main);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-comments-container</span> &gt; <span class="selector-class">.tk-comment</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--card-border);</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-comments-container</span> &gt; <span class="selector-class">.tk-comment</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--main);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--second);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--main);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">95%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">3rem</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: visible <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-replies</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">4rem</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--gjcloak-bg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-content</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">0</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">0</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">15px</span> solid <span class="built_in">var</span>(--main);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-content</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">15px</span> solid <span class="built_in">var</span>(--global-bg);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">0</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-content</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4rem</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-extras</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3.5rem</span> <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-master</span> <span class="selector-class">.tk-row</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4rem</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-expand</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5rem</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--global-bg) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tk-expand</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="built_in">var</span>(--border-radius);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--main);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">    transparent <span class="number">75%</span>,</span><br><span class="line">    transparent</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: overlay <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-class">.hidden-y</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--theme-color</span>: <span class="number">#1677b3</span>;</span><br><span class="line">  <span class="attr">--global-bg</span>: <span class="number">#f2f6fc</span>;</span><br><span class="line">  <span class="attr">--gjcloak-bg</span>: <span class="number">#f15a5a</span>;</span><br><span class="line">  <span class="attr">--r</span>: <span class="number">22</span>;</span><br><span class="line">  <span class="attr">--g</span>: <span class="number">119</span>;</span><br><span class="line">  <span class="attr">--b</span>: <span class="number">179</span>;</span><br><span class="line">  <span class="attr">--main</span>: <span class="built_in">rgb</span>(<span class="built_in">var</span>(--r), <span class="built_in">var</span>(--g), <span class="built_in">var</span>(--b));</span><br><span class="line">  <span class="attr">--second</span>: <span class="built_in">var</span>(--white);</span><br><span class="line">  <span class="attr">--main-light</span>: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--r), <span class="built_in">var</span>(--g), <span class="built_in">var</span>(--b), <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">--cover-bg</span>: <span class="built_in">rgb</span>(<span class="built_in">var</span>(--r), <span class="built_in">var</span>(--g), <span class="built_in">var</span>(--b));</span><br><span class="line">  <span class="attr">--main-light</span>: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--r), <span class="built_in">var</span>(--g), <span class="built_in">var</span>(--b), <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">--main-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="built_in">var</span>(--r), <span class="built_in">var</span>(--g), <span class="built_in">var</span>(--b), <span class="number">0.2</span>);</span><br><span class="line">  <span class="attr">--card-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--tab-botton-bg);</span><br><span class="line">  <span class="attr">--border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--light-text</span>: <span class="number">#ff7242</span>;</span><br><span class="line">  <span class="attr">--default-cursor</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/eurkon-cdn/hexo/images/user/default.cur</span>);</span><br><span class="line">  <span class="attr">--pointer-cursor</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/eurkon-cdn/hexo/images/user/pointer.cur</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.OwO</span> <span class="selector-class">.OwO-body</span>,</span><br><span class="line"><span class="selector-class">.OwO</span> <span class="selector-class">.OwO-body</span> <span class="selector-class">.OwO-bar</span> <span class="selector-class">.OwO-packages</span> <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-class">.OwO</span> <span class="selector-class">.OwO-body</span> <span class="selector-class">.OwO-items</span> <span class="selector-class">.OwO-item</span>,</span><br><span class="line"><span class="selector-class">.tk-action-icon</span>,</span><br><span class="line"><span class="selector-class">.tk-expand</span>,</span><br><span class="line"><span class="selector-class">.tk-pagination-pager</span>,</span><br><span class="line"><span class="selector-class">.tk-panel</span> <span class="selector-class">.tk-tab</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">var</span>(--pointer-cursor), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备份-config-anzhiyu-yml"><a href="#备份-config-anzhiyu-yml" class="headerlink" title="备份_config.anzhiyu.yml"></a><strong>备份_config.anzhiyu.yml</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  望四方:</span><br><span class="line">    归名档: /archives/ || anzhiyu-icon-box-archive</span><br><span class="line">    归四类: /categories/ || anzhiyu-icon-shapes</span><br><span class="line">    书中签: /tags/ || anzhiyu-icon-tags</span><br><span class="line">    统计 : /charts/ ||fa-fw fas fa-chart-bar</span><br><span class="line"></span><br><span class="line">  友链:</span><br><span class="line">    四方好友: /link/ || anzhiyu-icon-link</span><br><span class="line">    朋友圈: /fcircle/ || anzhiyu-icon-artstation</span><br><span class="line">    留言板: /comments/ || anzhiyu-icon-envelope</span><br><span class="line"></span><br><span class="line">  我的:</span><br><span class="line">    音乐馆: /music/ || anzhiyu-icon-music</span><br><span class="line">    # 音乐馆2: /music/?id=1708664797&amp;server=tencent/ || anzhiyu-icon-music</span><br><span class="line">    追番页: /bangumis/ || anzhiyu-icon-bilibili</span><br><span class="line">    刹那间: /album/ || anzhiyu-icon-images</span><br><span class="line">    小空调: /air-conditioner/ || anzhiyu-icon-fan</span><br><span class="line">    我的装备: /equipment/ ||  fas fa-heart</span><br><span class="line"></span><br><span class="line">  关于:</span><br><span class="line">    关于本人: /about/ || anzhiyu-icon-paper-plane</span><br><span class="line">    闲言碎语: /essay/ || anzhiyu-icon-lightbulb</span><br><span class="line">    随便逛逛: javascript:toRandomPost() || anzhiyu-icon-shoe-prints1</span><br><span class="line">    免责声明: /disclaimer/ || fas fa-heart</span><br><span class="line"></span><br><span class="line"># nav相关配置</span><br><span class="line">nav:</span><br><span class="line">  enable: true</span><br><span class="line">  travelling: true</span><br><span class="line">  clock: true</span><br><span class="line">  menu:</span><br><span class="line">    - title: 网页</span><br><span class="line">      item:</span><br><span class="line">        - name: 博客</span><br><span class="line">          link: https://blog.anheyu.com/</span><br><span class="line">          icon: /img/favicon.ico</span><br><span class="line">    - title: 项目</span><br><span class="line">      item:</span><br><span class="line">        - name: 安知鱼图床</span><br><span class="line">          link: https://image.anheyu.com/</span><br><span class="line">          icon: https://image.anheyu.com/favicon.ico</span><br><span class="line"></span><br><span class="line"># Code Blocks (代码相关)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">highlight_theme: mac #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # copy button</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: true # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span><br><span class="line">highlight_height_limit: 330 # unit: px</span><br><span class="line">code_word_wrap: true</span><br><span class="line"></span><br><span class="line"># copy settings</span><br><span class="line"># copyright: Add the copyright information after copied content (複制的内容后面加上版权信息)</span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: false</span><br><span class="line">    limit_count: 50</span><br><span class="line"></span><br><span class="line"># social settings (社交图标设置)</span><br><span class="line"># formal:</span><br><span class="line">#   name: link || icon</span><br><span class="line">social:</span><br><span class="line">  Github: https://github.com/it985 || anzhiyu-icon-github</span><br><span class="line">  Email: https://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=2071916845@qq.com || anzhiyu-icon-envelope</span><br><span class="line">  RSS: atom.xml || anzhiyu-icon-rss</span><br><span class="line">  BiliBili: https://space.bilibili.com/300767383 || anzhiyu-icon-bilibili</span><br><span class="line">  QQ: tencent://Message/?Uin=2071916845&amp;amp;websiteName=local.edu.com:8888=&amp;amp;Menu=yes || anzhiyu-icon-qq</span><br><span class="line"></span><br><span class="line">author_status:</span><br><span class="line">  enable: false</span><br><span class="line">  status: ✍️</span><br><span class="line">  alias: writing_hand</span><br><span class="line">  fallback_src: https://github.githubassets.com/images/icons/emoji/unicode/270d.png</span><br><span class="line">  text: on Studying</span><br><span class="line"></span><br><span class="line"># search (搜索)</span><br><span class="line"># see https://butterfly.js.org/posts/ceeb73f/#搜索系统</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Algolia search</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: true</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 6</span><br><span class="line"></span><br><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: false</span><br><span class="line">  preload: true</span><br><span class="line">  CDN:</span><br><span class="line"></span><br><span class="line"># Math (数学)</span><br><span class="line"># --------------------------------------</span><br><span class="line"># About the per_page</span><br><span class="line"># if you set it to true, it will load mathjax/katex script in each page (true 表示每一页都加载js)</span><br><span class="line"># if you set it to false, it will load mathjax/katex script according to your setting (add the &#x27;mathjax: true&#x27; in page&#x27;s front-matter)</span><br><span class="line"># (false 需要时加载，须在使用的 Markdown Front-matter 加上 mathjax: true)</span><br><span class="line"></span><br><span class="line"># MathJax</span><br><span class="line">mathjax:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: false</span><br><span class="line"></span><br><span class="line"># KaTeX</span><br><span class="line">katex:</span><br><span class="line">  enable: false</span><br><span class="line">  per_page: false</span><br><span class="line">  hide_scrollbar: true</span><br><span class="line"></span><br><span class="line"># Image (图片设置)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Favicon（网站图标）</span><br><span class="line">favicon: /img/favicon.ico</span><br><span class="line"></span><br><span class="line"># Avatar (头像)</span><br><span class="line">avatar:</span><br><span class="line">  img: https://q1.qlogo.cn/g?b=qq&amp;nk=2071916845&amp;s=640</span><br><span class="line">  effect: true # **头像会一直转圈**</span><br><span class="line"></span><br><span class="line"># Disable all banner image</span><br><span class="line">disable_top_img: false</span><br><span class="line"></span><br><span class="line"># The banner image of home page</span><br><span class="line">index_img: false</span><br><span class="line"></span><br><span class="line"># If the banner of page not setting, it will show the top_img</span><br><span class="line">default_top_img: false</span><br><span class="line"></span><br><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否显示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面显示的位置)</span><br><span class="line">  # left/right/both</span><br><span class="line">  position: left</span><br><span class="line">  # When cover is not set, the default cover is displayed (当没有设置cover时，默认的封面显示)</span><br><span class="line">  default_cover:</span><br><span class="line">    - https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Replace Broken Images (替换无法显示的图片)</span><br><span class="line">error_img:</span><br><span class="line">  flink: /img/friend_404.gif</span><br><span class="line">  post_page: /img/404.jpg</span><br><span class="line"></span><br><span class="line"># A simple 404 page</span><br><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &quot;请尝试站内搜索寻找文章&quot;</span><br><span class="line">  background: https://bu.dusays.com/2023/05/08/645907596997d.gif</span><br><span class="line"></span><br><span class="line">post_meta:</span><br><span class="line">  page: # Home Page</span><br><span class="line">    date_type: both # created or updated or both 主页文章日期是创建日或者更新日或都显示</span><br><span class="line">    date_format: relative # date/relative 显示日期还是相对日期</span><br><span class="line">    categories: true # true or false 主页是否显示分类</span><br><span class="line">    tags: true # true or false 主页是否显示标籤</span><br><span class="line">    label: true # true or false 显示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章页日期是创建日或者更新日或都显示</span><br><span class="line">    date_format: relative # date/relative 显示日期还是相对日期</span><br><span class="line">    categories: true # true or false 文章页是否显示分类</span><br><span class="line">    tags: true # true or false 文章页是否显示标籤</span><br><span class="line">    label: true # true or false 显示描述性文字</span><br><span class="line">    mainTone: false # true or false 文章顶部图片是否使用主色调</span><br><span class="line">    unread: false # true or false 文章未读功能</span><br><span class="line"></span><br><span class="line"># wordcount (字数统计)</span><br><span class="line"># see https://butterfly.js.org/posts/ceeb73f/#字数统计</span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br><span class="line"></span><br><span class="line"># Display the article introduction on homepage</span><br><span class="line"># 1: description</span><br><span class="line"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span><br><span class="line"># 3: auto_excerpt (default)</span><br><span class="line"># false: do not show the article introduction</span><br><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 500 # if you set method to 2 or 3, the length need to config</span><br><span class="line"></span><br><span class="line"># anchor</span><br><span class="line"># when you scroll in post, the URL will update according to header id.</span><br><span class="line">anchor: false</span><br><span class="line"></span><br><span class="line"># Post</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># toc (目录)</span><br><span class="line">toc:</span><br><span class="line">  post: true</span><br><span class="line">  page: true</span><br><span class="line">  number: true</span><br><span class="line">  expand: false</span><br><span class="line">  style_simple: false # for post</span><br><span class="line"></span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: false</span><br><span class="line">  author_href:</span><br><span class="line">  location: 湖北</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br><span class="line"></span><br><span class="line"># Sponsor/reward</span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/wxpay.webp</span><br><span class="line">      link:</span><br><span class="line">      text: wechat</span><br><span class="line">    - img: /img/alipay.webp</span><br><span class="line">      link:</span><br><span class="line">      text: alipay</span><br><span class="line"></span><br><span class="line"># Post edit</span><br><span class="line"># Easily browse and edit blog source code online.</span><br><span class="line">post_edit:</span><br><span class="line">  enable: false</span><br><span class="line">  # url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span><br><span class="line">  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span><br><span class="line">  url:</span><br><span class="line"></span><br><span class="line"># Related Articles</span><br><span class="line">related_post:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 6 # Number of posts displayed</span><br><span class="line">  date_type: created # or created or updated 文章日期显示创建日或者更新日</span><br><span class="line"></span><br><span class="line"># figcaption (图片描述文字)</span><br><span class="line">photofigcaption: false</span><br><span class="line"></span><br><span class="line"># post_pagination (分页)</span><br><span class="line"># value: 1 || 2 || false</span><br><span class="line"># 1: The &#x27;next post&#x27; will link to old post</span><br><span class="line"># 2: The &#x27;next post&#x27; will link to new post</span><br><span class="line"># false: disable pagination</span><br><span class="line">post_pagination: 1</span><br><span class="line"></span><br><span class="line"># Displays outdated notice for a post (文章过期提醒)</span><br><span class="line">noticeOutdate:</span><br><span class="line">  enable: false</span><br><span class="line">  style: flat # style: simple/flat</span><br><span class="line">  limit_day: 365 # When will it be shown</span><br><span class="line">  position: top # position: top/bottom</span><br><span class="line">  message_prev: It has been</span><br><span class="line">  message_next: days since the last update, the content of the article may be outdated.</span><br><span class="line"></span><br><span class="line"># Share System (分享功能)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># AddThis</span><br><span class="line"># https://www.addthis.com/</span><br><span class="line">addThis:</span><br><span class="line">  enable: false</span><br><span class="line">  pubid:</span><br><span class="line"></span><br><span class="line"># Share.js</span><br><span class="line"># https://github.com/overtrue/share.js</span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  sites: facebook,twitter,wechat,weibo,qq</span><br><span class="line"></span><br><span class="line"># AddToAny</span><br><span class="line"># https://www.addtoany.com/</span><br><span class="line">addtoany:</span><br><span class="line">  enable: false</span><br><span class="line">  item: facebook,twitter,wechat,sina_weibo,email,copy_link</span><br><span class="line"></span><br><span class="line"># Comments System</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">comments:</span><br><span class="line">  # Up to two comments system, the first will be shown as default</span><br><span class="line">  # Choose: Valine/Waline/Twikoo/Artalk</span><br><span class="line">  use:  Twikoo</span><br><span class="line">  text: true # Display the comment name next to the button</span><br><span class="line">  # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span><br><span class="line">  # If you set it to true, the comment count will be invalid</span><br><span class="line">  lazyload: false</span><br><span class="line">  count: false # Display comment count in post&#x27;s top_img</span><br><span class="line">  card_post_count: false # Display comment count in Home Page</span><br><span class="line"></span><br><span class="line"># valine</span><br><span class="line"># https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  appId: xxxxx # leancloud application app id</span><br><span class="line">  appKey: xxxxx # leancloud application app key</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: mp # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN/zh-TW/en/ja</span><br><span class="line">  placeholder: 填写QQ邮箱就会使用QQ头像喔~. # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail,link # valine comment header info (nick/mail/link)</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: /img/comment_bg.png # valine background</span><br><span class="line">  emojiCDN: //i0.hdslb.com/bfs/emote/ # emoji CDN</span><br><span class="line">  enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick/mail)</span><br><span class="line">  visitor: false</span><br><span class="line">  master:</span><br><span class="line">    - xxxxx</span><br><span class="line">  friends:</span><br><span class="line">    - xxxxxx</span><br><span class="line">  tagMeta: &quot;博主,小伙伴,访客&quot;</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># waline - A simple comment system with backend support fork from Valine</span><br><span class="line"># https://waline.js.org/</span><br><span class="line">waline:</span><br><span class="line">  serverURL: # Waline server address url</span><br><span class="line">  bg: # waline background</span><br><span class="line">  pageview: false</span><br><span class="line">  option:</span><br><span class="line">    meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;]</span><br><span class="line">    locale:</span><br><span class="line">      placeholder: 生活明朗，万物可爱</span><br><span class="line"></span><br><span class="line"># Twikoo</span><br><span class="line"># https://github.com/imaegoo/twikoo</span><br><span class="line">twikoo:</span><br><span class="line">  envId: https://twikoo.tryrun.top/</span><br><span class="line">  region:</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># Artalk</span><br><span class="line"># https://artalk.js.org/guide/frontend/config.html</span><br><span class="line">artalk:</span><br><span class="line">  server:</span><br><span class="line">  site:</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br><span class="line"></span><br><span class="line"># Chat Services</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Chat Button [recommend]</span><br><span class="line"># It will create a button in the bottom right corner of website, and hide the origin button</span><br><span class="line">chat_btn: false</span><br><span class="line"></span><br><span class="line"># The origin chat button is displayed when scrolling up, and the button is hidden when scrolling down</span><br><span class="line">chat_hide_show: false</span><br><span class="line"></span><br><span class="line"># chatra</span><br><span class="line"># https://chatra.io/</span><br><span class="line">chatra:</span><br><span class="line">  enable: false</span><br><span class="line">  id:</span><br><span class="line"></span><br><span class="line"># tidio</span><br><span class="line"># https://www.tidio.com/</span><br><span class="line">tidio:</span><br><span class="line">  enable: false</span><br><span class="line">  public_key:</span><br><span class="line"></span><br><span class="line"># daovoice</span><br><span class="line"># http://daovoice.io/</span><br><span class="line">daovoice:</span><br><span class="line">  enable: false</span><br><span class="line">  app_id:</span><br><span class="line"></span><br><span class="line"># gitter</span><br><span class="line"># https://gitter.im/</span><br><span class="line">gitter:</span><br><span class="line">  enable: false</span><br><span class="line">  room:</span><br><span class="line"></span><br><span class="line"># crisp</span><br><span class="line"># https://crisp.chat/en/</span><br><span class="line">crisp:</span><br><span class="line">  enable: false</span><br><span class="line">  website_id:</span><br><span class="line"></span><br><span class="line"># Footer Settings</span><br><span class="line"># --------------------------------------</span><br><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2018</span><br><span class="line">  custom_text:</span><br><span class="line">  runtime:</span><br><span class="line">    enable: true</span><br><span class="line">    launch_time: 09/01/2018 00:00:00 # 网站上线时间</span><br><span class="line">    work_img: https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-上班摸鱼中.svg</span><br><span class="line">    work_description: 距离月入25k也就还差一个大佬带我~</span><br><span class="line">    offduty_img: https://npm.elemecdn.com/anzhiyu-blog@2.0.4/img/badge/安知鱼-下班啦.svg</span><br><span class="line">    offduty_description: 下班了就该开开心心的玩耍，嘿嘿~</span><br><span class="line">  # 徽标部分配置项 https://shields.io/</span><br><span class="line">  # https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span><br><span class="line">  bdageitem:</span><br><span class="line">    enable: true</span><br><span class="line">    list:</span><br><span class="line">    - link: https://hexo.io/ #徽标指向网站链接</span><br><span class="line">      shields: https://npm.elemecdn.com/anzhiyu-blog@2.1.5/img/badge/Frame-Hexo.svg #徽标API</span><br><span class="line">      message: 博客框架为Hexo_v5.4.0 #徽标提示语</span><br><span class="line">    - link: https://blog.anheyu.com/</span><br><span class="line">      shields: https://npm.elemecdn.com/anzhiyu-theme-static@1.0.9/img/Theme-AnZhiYu-2E67D3.svg</span><br><span class="line">      message: 本站使用AnZhiYu主题</span><br><span class="line">    - link: https://www.dogecloud.com/</span><br><span class="line">      shields: https://npm.elemecdn.com/anzhiyu-blog@2.2.0/img/badge/CDN-多吉云-3693F3.svg</span><br><span class="line">      message: 本站使用多吉云为静态资源提供CDN加速</span><br><span class="line">    - link: https://github.com/</span><br><span class="line">      shields: https://npm.elemecdn.com/anzhiyu-blog@2.1.5/img/badge/Source-Github.svg</span><br><span class="line">      message: 本站项目由Github托管</span><br><span class="line">    - link: http://creativecommons.org/licenses/by-nc-sa/4.0/</span><br><span class="line">      shields: https://npm.elemecdn.com/anzhiyu-blog@2.2.0/img/badge/Copyright-BY-NC-SA.svg</span><br><span class="line">      message: 本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span><br><span class="line">  socialBar:</span><br><span class="line">    enable: true</span><br><span class="line">    centerImg:</span><br><span class="line">    left:</span><br><span class="line">      - title: email</span><br><span class="line">        link: mailto:2071916845@qq.com</span><br><span class="line">        icon: anzhiyufont anzhiyu-icon-envelope</span><br><span class="line">      # - title: 微博</span><br><span class="line">      #   link: https://weibo.com/u/6378063631</span><br><span class="line">      #   icon: anzhiyufont anzhiyu-icon-weibo</span><br><span class="line">      # - title: facebook</span><br><span class="line">      #   link: https://www.facebook.com/profile.php?id=100092208016287&amp;sk=about</span><br><span class="line">      #   icon: anzhiyufont anzhiyu-icon-facebook1</span><br><span class="line">    right:</span><br><span class="line">      - title: Github</span><br><span class="line">        link: https://github.com/it985</span><br><span class="line">        icon: anzhiyufont anzhiyu-icon-github</span><br><span class="line">      - title: Bilibili</span><br><span class="line">        link: https://space.bilibili.com/300767383</span><br><span class="line">        icon: anzhiyufont anzhiyu-icon-bilibili</span><br><span class="line">      # - title: 抖音</span><br><span class="line">      #   link: https://v.douyin.com/DwCpMEy/</span><br><span class="line">      #   icon: anzhiyufont anzhiyu-icon-tiktok</span><br><span class="line">  list:</span><br><span class="line">    enable: true</span><br><span class="line">    randomFriends: 3</span><br><span class="line">    project:</span><br><span class="line">      - title: 服务</span><br><span class="line">        links:</span><br><span class="line">          - title: 51la统计</span><br><span class="line">            link: https://v6.51.la/</span><br><span class="line">          - title: 十年之约</span><br><span class="line">            link: https://www.foreverblog.cn/</span><br><span class="line">          - title: 开往</span><br><span class="line">            link: https://github.com/travellings-link/travellings</span><br><span class="line">      # - title: 主题</span><br><span class="line">      #   links:</span><br><span class="line">      #     - title: 文档</span><br><span class="line">      #       link: /docs/</span><br><span class="line">      #     - title: 源码</span><br><span class="line">      #       link: https://github.com/anzhiyu-c/hexo-theme-anzhiyu</span><br><span class="line">      #     - title: 更新日志</span><br><span class="line">      #       link: /update/</span><br><span class="line">      - title: 导航</span><br><span class="line">        links:</span><br><span class="line">          - title: 即刻短文</span><br><span class="line">            link: /essay/</span><br><span class="line">          - title: 友链文章</span><br><span class="line">            link: /fcircle/</span><br><span class="line">          - title: 留言板</span><br><span class="line">            link: /comments/</span><br><span class="line">      - title: 协议</span><br><span class="line">        links: </span><br><span class="line">          - title: 免责声明</span><br><span class="line">            link: /disclaimer/</span><br><span class="line">          - title: 隐私协议</span><br><span class="line">            link: /privacy/</span><br><span class="line">          - title: Cookies</span><br><span class="line">            link: /cookies/</span><br><span class="line">          - title: 版权协议</span><br><span class="line">            link: /copyright/</span><br><span class="line"></span><br><span class="line"># Analysis</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Baidu Analytics</span><br><span class="line"># https://tongji.baidu.com/web/welcome/login</span><br><span class="line">baidu_analytics:</span><br><span class="line"></span><br><span class="line"># Google Analytics</span><br><span class="line"># https://analytics.google.com/analytics/web/</span><br><span class="line">google_analytics:</span><br><span class="line"></span><br><span class="line"># CNZZ Analytics</span><br><span class="line"># https://www.umeng.com/</span><br><span class="line">cnzz_analytics:</span><br><span class="line"></span><br><span class="line"># Cloudflare Analytics</span><br><span class="line"># https://www.cloudflare.com/zh-tw/web-analytics/</span><br><span class="line">cloudflare_analytics:</span><br><span class="line"></span><br><span class="line"># Microsoft Clarity</span><br><span class="line"># https://clarity.microsoft.com/</span><br><span class="line">microsoft_clarity:</span><br><span class="line"></span><br><span class="line"># Advertisement</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Google Adsense (谷歌广告)</span><br><span class="line">google_adsense:</span><br><span class="line">  enable: false</span><br><span class="line">  auto_ads: true</span><br><span class="line">  js: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js</span><br><span class="line">  client:</span><br><span class="line">  enable_page_level_ads: true</span><br><span class="line"></span><br><span class="line"># Insert ads manually (手动插入广告)</span><br><span class="line"># ad:</span><br><span class="line">#   index:</span><br><span class="line">#   aside:</span><br><span class="line">#   post:</span><br><span class="line"></span><br><span class="line"># Verification (站长验证)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">site_verification:</span><br><span class="line">  - name: google-site-verification</span><br><span class="line">    content: xxx</span><br><span class="line">  - name: baidu-site-verification</span><br><span class="line">    content: code-xxx</span><br><span class="line">  - name: msvalidate.01</span><br><span class="line">    content: xxx</span><br><span class="line"></span><br><span class="line"># Beautify/Effect (美化/效果)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Theme color for customize</span><br><span class="line"># Notice: color value must in double quotes like &quot;#000&quot; or may cause error!</span><br><span class="line"></span><br><span class="line">theme_color:</span><br><span class="line">  enable: false</span><br><span class="line">  cover_change: false # 整篇文章跟随cover修改主色调</span><br><span class="line">  main: &quot;#3b70fc&quot;</span><br><span class="line">  dark_main: &quot;#0084ff&quot;</span><br><span class="line">  paginator: &quot;#3b70fc&quot;</span><br><span class="line">  #   button_hover: &quot;#FF7242&quot;</span><br><span class="line">  text_selection: &quot;#2128bd&quot;</span><br><span class="line">  link_color: &quot;var(--anzhiyu-fontcolor)&quot;</span><br><span class="line">  meta_color: &quot;var(--anzhiyu-fontcolor)&quot;</span><br><span class="line">  hr_color: &quot;#4259ef23&quot;</span><br><span class="line">  code_foreground: &quot;#fff&quot;</span><br><span class="line">  code_background: &quot;var(--anzhiyu-code-stress)&quot;</span><br><span class="line">  toc_color: &quot;#3b70fc&quot;</span><br><span class="line">  #   blockquote_padding_color: &quot;#3b70fc&quot;</span><br><span class="line">  #   blockquote_background_color: &quot;#3b70fc&quot;</span><br><span class="line">  scrollbar_color: &quot;var(--anzhiyu-scrollbar)&quot;</span><br><span class="line">  meta_theme_color_light: &quot;#f7f9fe&quot;</span><br><span class="line">  meta_theme_color_dark: &quot;#18171d&quot;</span><br><span class="line"></span><br><span class="line"># 表格隔行变色</span><br><span class="line">table_interlaced_discoloration: true</span><br><span class="line"></span><br><span class="line"># 首页双栏显示</span><br><span class="line">article_double_row: true</span><br><span class="line"></span><br><span class="line"># The top_img settings of home page</span><br><span class="line"># default: top img - full screen, site info - middle (默认top_img全屏，site_info在中间)</span><br><span class="line"># The position of site info, eg: 300px/300em/300rem/10% (主页标题距离顶部距离)</span><br><span class="line">index_site_info_top:</span><br><span class="line"># The height of top_img, eg: 300px/300em/300rem (主页top_img高度)</span><br><span class="line">index_top_img_height:</span><br><span class="line"></span><br><span class="line"># The user interface setting of category and tag page (category和tag页的UI设置)</span><br><span class="line"># index - same as Homepage UI (index 值代表 UI将与首页的UI一样)</span><br><span class="line"># default - same as archives UI 默认跟archives页面UI一样</span><br><span class="line">category_ui: # 留空或 index</span><br><span class="line">tag_ui: # 留空或 index</span><br><span class="line"></span><br><span class="line"># Footer Background</span><br><span class="line">footer_bg: false</span><br><span class="line"></span><br><span class="line"># the position of bottom right button/default unit: px (右下角按钮距离底部的距离/默认单位为px)</span><br><span class="line">rightside-bottom: 100px</span><br><span class="line"></span><br><span class="line"># Background effects (背景特效)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># canvas_ribbon (静止彩带背景)</span><br><span class="line"># See: https://github.com/hustcc/ribbon.js</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: false</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Fluttering Ribbon (动态彩带)</span><br><span class="line">canvas_fluttering_ribbon:</span><br><span class="line">  enable: false</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># canvas_nest</span><br><span class="line"># https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: false</span><br><span class="line">  color: &quot;0,0,255&quot; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 99 # the number of lines, default: 99.</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Typewriter Effect (打字效果)</span><br><span class="line"># https://github.com/disjukr/activate-power-mode</span><br><span class="line">activate_power_mode:</span><br><span class="line">  enable: false</span><br><span class="line">  colorful: true # open particle animation (冒光特效)</span><br><span class="line">  shake: false #  open shake (抖动特效)</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Mouse click effects: fireworks (鼠标点击效果: 烟火特效)</span><br><span class="line">fireworks:</span><br><span class="line">  enable: false</span><br><span class="line">  zIndex: 9999 # -1 or 9999</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Mouse click effects: Heart symbol (鼠标点击效果: 爱心)</span><br><span class="line">click_heart:</span><br><span class="line">  enable: false</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Mouse click effects: words (鼠标点击效果: 文字)</span><br><span class="line">ClickShowText:</span><br><span class="line">  enable: false</span><br><span class="line">  text:</span><br><span class="line">    # - I</span><br><span class="line">    # - LOVE</span><br><span class="line">    # - YOU</span><br><span class="line">  fontSize: 15px</span><br><span class="line">  random: false</span><br><span class="line">  mobile: false</span><br><span class="line"></span><br><span class="line"># Default display mode (网站默认的显示模式)</span><br><span class="line"># light (default) / dark</span><br><span class="line">display_mode: light</span><br><span class="line"></span><br><span class="line"># Beautify (美化页面显示)</span><br><span class="line">beautify:</span><br><span class="line">  enable: false</span><br><span class="line">  field: post # site/post</span><br><span class="line">  title-prefix-icon: &#x27;\f0c1&#x27;</span><br><span class="line">  title-prefix-icon-color: &quot;#F47466&quot;</span><br><span class="line"></span><br><span class="line"># Global font settings</span><br><span class="line"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span><br><span class="line">font:</span><br><span class="line">  global-font-size: 17px</span><br><span class="line">  code-font-size:</span><br><span class="line">  font-family:</span><br><span class="line">  code-font-family: consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft JhengHei&quot;, &quot;Microsoft YaHei&quot;, sans-serif</span><br><span class="line"></span><br><span class="line"># Font settings for the site title and site subtitle</span><br><span class="line"># 左上角网站名字 主页居中网站名字</span><br><span class="line">blog_title_font:</span><br><span class="line">  font_link:</span><br><span class="line">  font-family: PingFang SC, &#x27;Hiragino Sans GB&#x27;, &#x27;Microsoft JhengHei&#x27;, &#x27;Microsoft YaHei&#x27;, sans-serif</span><br><span class="line"></span><br><span class="line"># The setting of divider icon (水平分隔线图标设置)</span><br><span class="line">hr_icon:</span><br><span class="line">  enable: true</span><br><span class="line">  icon: \f0c4 # the unicode value of Font Awesome icon, such as &#x27;\f0c4&#x27;</span><br><span class="line">  icon-top:</span><br><span class="line"></span><br><span class="line"># the subtitle on homepage (主页subtitle)</span><br><span class="line">subtitle:</span><br><span class="line">  enable: false</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # Effect Speed Options (打字效果速度参数)</span><br><span class="line">  startDelay: 300 # time before typing starts in milliseconds</span><br><span class="line">  typeSpeed: 150 # type speed in milliseconds</span><br><span class="line">  backSpeed: 50 # backspacing speed in milliseconds</span><br><span class="line">  # loop (循环打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source 调用第三方服务</span><br><span class="line">  # source: false 关闭调用</span><br><span class="line">  # source: 1  调用一言网的一句话（简体） https://hitokoto.cn/</span><br><span class="line">  # source: 2  调用一句网（简体） http://yijuzhan.com/</span><br><span class="line">  # source: 3  调用今日诗词（简体） https://www.jinrishici.com/</span><br><span class="line">  # subtitle 会先显示 source , 再显示 sub 的内容</span><br><span class="line">  source: 1</span><br><span class="line">  # 如果关闭打字效果，subtitle 只会显示 sub 的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 生活明朗&amp;#44;万物可爱&amp;#44;人间值得&amp;#44;未来可期.</span><br><span class="line"></span><br><span class="line"># Loading Animation (加载动画)</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  # else all</span><br><span class="line">  source: 3</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url:</span><br><span class="line">  avatar: # 自定义头像</span><br><span class="line"></span><br><span class="line"># aside (侧边栏)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # left or right</span><br><span class="line">  display:</span><br><span class="line">    archive: true</span><br><span class="line">    tag: true</span><br><span class="line">    category: false</span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    type: 2 # 1为使用头像card 2为不使用头像card</span><br><span class="line">    description: # 默认为站点描述</span><br><span class="line">    info_background: https://bu.dusays.com/2023/04/23/6444b2b59a295.webp # type为1时有效</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: anzhiyu-icon-arrow-circle-right</span><br><span class="line">      text: 了解更多</span><br><span class="line">      link: /about/</span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: &lt;div id=&quot;welcome-info&quot;&gt;&lt;/div&gt;</span><br><span class="line">  card_weixin:</span><br><span class="line">    enable: true</span><br><span class="line">    face: https://bu.dusays.com/2023/01/13/63c02edf44033.png</span><br><span class="line">    backFace: https://bu.dusays.com/2023/05/13/645fa415e8694.png</span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_categories:</span><br><span class="line">    enable: false</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">    highlightTags:</span><br><span class="line">      # - Hexo</span><br><span class="line">      # - 前端</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: true</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"></span><br><span class="line"># busuanzi count for PV / UV in site</span><br><span class="line"># 访问人数</span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Time difference between publish date and now (网页运行时间)</span><br><span class="line"># Formal: Month/Day/Year Time or Year/Month/Day Time</span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 09/01/2018 00:00:00</span><br><span class="line"></span><br><span class="line"># Aside widget - Newest Comments</span><br><span class="line">newest_comments:</span><br><span class="line">  enable: true</span><br><span class="line">  sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  limit: 6</span><br><span class="line">  storage: 10 # unit: mins, save data to localStorage</span><br><span class="line">  avatar: true</span><br><span class="line"></span><br><span class="line"># Bottom right button (右下角按钮)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Conversion between Traditional and Simplified Chinese (简繁转换)</span><br><span class="line">translate:</span><br><span class="line">  enable: true</span><br><span class="line">  # The text of a button</span><br><span class="line">  default: 繁</span><br><span class="line">  # Right-click menu default text</span><br><span class="line">  rightMenuMsgDefault: &quot;轉為繁體&quot;</span><br><span class="line">  # the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span><br><span class="line">  defaultEncoding: 2</span><br><span class="line">  # Time delay</span><br><span class="line">  translateDelay: 0</span><br><span class="line">  # The text of the button when the language is Simplified Chinese</span><br><span class="line">  msgToTraditionalChinese: &quot;繁&quot;</span><br><span class="line">  # The text of the button when the language is Traditional Chinese</span><br><span class="line">  msgToSimplifiedChinese: &quot;简&quot;</span><br><span class="line">  # Right-click the menu to traditional Chinese</span><br><span class="line">  rightMenuMsgToTraditionalChinese: &quot;转为繁体&quot;</span><br><span class="line">  # Right-click menu to simplified Chinese</span><br><span class="line">  rightMenuMsgToSimplifiedChinese: &quot;转为简体&quot;</span><br><span class="line"></span><br><span class="line"># Read Mode (閲读模式)</span><br><span class="line">readmode: true</span><br><span class="line"></span><br><span class="line"># 中控台</span><br><span class="line">centerConsole: true</span><br><span class="line"></span><br><span class="line"># dark mode</span><br><span class="line">darkmode:</span><br><span class="line">  enable: true</span><br><span class="line">  # Toggle Button to switch dark/light mode</span><br><span class="line">  button: true</span><br><span class="line">  # Switch dark/light mode automatically (自动切换 dark mode和 light mode)</span><br><span class="line">  # autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span><br><span class="line">  # autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span><br><span class="line">  # autoChangeMode: false</span><br><span class="line">  autoChangeMode: 1</span><br><span class="line">  start: # 8</span><br><span class="line">  end: # 22</span><br><span class="line"></span><br><span class="line"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span><br><span class="line"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span><br><span class="line"># Don&#x27;t repeat 不要重複</span><br><span class="line">rightside_item_order:</span><br><span class="line">  enable: false</span><br><span class="line">  hide: # readmode,translate,darkmode,hideAside</span><br><span class="line">  show: # toc,chat,comment</span><br><span class="line"></span><br><span class="line"># Lightbox (图片大图查看模式)</span><br><span class="line"># --------------------------------------</span><br><span class="line"># You can only choose one, or neither (只能选择一个 或者 两个都不选)</span><br><span class="line"></span><br><span class="line"># medium-zoom</span><br><span class="line"># https://github.com/francoischalifour/medium-zoom</span><br><span class="line">medium_zoom: false</span><br><span class="line"></span><br><span class="line"># fancybox</span><br><span class="line"># http://fancyapps.com/fancybox/3/</span><br><span class="line">fancybox: true</span><br><span class="line"></span><br><span class="line"># Tag Plugins settings (标籤外挂)</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># mermaid</span><br><span class="line"># see https://github.com/mermaid-js/mermaid</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # built-in themes: default/forest/dark/neutral</span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: dark</span><br><span class="line"></span><br><span class="line"># Note (Bootstrap Callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br><span class="line"></span><br><span class="line">icons:</span><br><span class="line">  ali_iconfont_js: # 阿里图标symbol 引用链接，主题会进行加载 symbol 引用</span><br><span class="line">  fontawesome: true #是否启用fontawesome6图标</span><br><span class="line">  fontawesome_animation_css: #fontawesome_animation 如果有就会加载，示例值：https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@1.0.17/lib/assets/font-awesome-animation.min.css</span><br><span class="line"></span><br><span class="line"># other</span><br><span class="line"># --------------------------------------</span><br><span class="line"></span><br><span class="line"># Pjax</span><br><span class="line"># It may contain bugs and unstable, give feedback when you find the bugs.</span><br><span class="line"># https://github.com/MoOx/pjax</span><br><span class="line">pjax:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    # - xxxx</span><br><span class="line">    # - xxxx</span><br><span class="line"></span><br><span class="line"># Inject the css and script (aplayer/meting)</span><br><span class="line">aplayerInject:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line"># Snackbar (Toast Notification 弹窗)</span><br><span class="line"># https://github.com/polonel/SnackBar</span><br><span class="line"># position 弹窗位置</span><br><span class="line"># 可选 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span><br><span class="line">snackbar:</span><br><span class="line">  enable: true</span><br><span class="line">  position: top-center</span><br><span class="line">  bg_light: &quot;#3b70fc&quot; # The background color of Toast Notification in light mode</span><br><span class="line">  bg_dark: &quot;#1f1f1f&quot; # The background color of Toast Notification in dark mode</span><br><span class="line"></span><br><span class="line"># https://instant.page/</span><br><span class="line"># prefetch (预加载)</span><br><span class="line">instantpage: true</span><br><span class="line"></span><br><span class="line"># https://github.com/vinta/pangu.js</span><br><span class="line"># Insert a space between Chinese character and English character (中英文之间添加空格)</span><br><span class="line">pangu:</span><br><span class="line">  enable: false</span><br><span class="line">  field: site # site/post</span><br><span class="line"></span><br><span class="line"># Lazyload (图片懒加载)</span><br><span class="line"># https://github.com/verlok/vanilla-lazyload</span><br><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  field: site # site/post</span><br><span class="line">  placeholder:</span><br><span class="line">  blur: true</span><br><span class="line">  progressive: true</span><br><span class="line"></span><br><span class="line"># PWA</span><br><span class="line"># See https://github.com/JLHwung/hexo-offline</span><br><span class="line"># ---------------</span><br><span class="line">pwa:</span><br><span class="line">  enable: false</span><br><span class="line">  startup_image_enable: true</span><br><span class="line">  manifest: /manifest.json</span><br><span class="line">  theme_color: var(--anzhiyu-main)</span><br><span class="line">  mask_icon: /img/siteicon/apple-icon-180.png</span><br><span class="line">  apple_touch_icon: /img/siteicon/apple-icon-180.png</span><br><span class="line">  bookmark_icon: /img/siteicon/apple-icon-180.png</span><br><span class="line">  favicon_32_32: /img/siteicon/32.png</span><br><span class="line">  favicon_16_16: /img/siteicon/16.png</span><br><span class="line"></span><br><span class="line"># Open graph meta tags</span><br><span class="line"># https://developers.facebook.com/docs/sharing/webmasters/</span><br><span class="line">Open_Graph_meta: true</span><br><span class="line"></span><br><span class="line"># Add the vendor prefixes to ensure compatibility</span><br><span class="line">css_prefix: true</span><br><span class="line"></span><br><span class="line"># 首页顶部相关配置</span><br><span class="line">home_top:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  timemode: date #date/updated</span><br><span class="line">  title: 生活明朗</span><br><span class="line">  subTitle: 万物可爱。</span><br><span class="line">  siteText: tryrun.top</span><br><span class="line">  category:</span><br><span class="line">    - name: 前端</span><br><span class="line">      path: /categories/前端开发/</span><br><span class="line">      shadow: var(--anzhiyu-shadow-blue)</span><br><span class="line">      class: blue</span><br><span class="line">      icon: anzhiyu-icon-dove</span><br><span class="line">    - name: 大学</span><br><span class="line">      path: /categories/大学生涯/</span><br><span class="line">      shadow: var(--anzhiyu-shadow-red)</span><br><span class="line">      class: red</span><br><span class="line">      icon: anzhiyu-icon-fire</span><br><span class="line">    - name: 生活</span><br><span class="line">      path: /categories/生活日常/</span><br><span class="line">      shadow: var(--anzhiyu-shadow-green)</span><br><span class="line">      class: green</span><br><span class="line">      icon: anzhiyu-icon-book</span><br><span class="line">  default_descr: 再怎么看我也不知道怎么描述它的啦！</span><br><span class="line">  swiper:</span><br><span class="line">    enable: false</span><br><span class="line">    swiper_css: https://npm.elemecdn.com/anzhiyu-theme-static@1.0.0/swiper/swiper.min.css #swiper css依赖</span><br><span class="line">    swiper_js: https://npm.elemecdn.com/anzhiyu-theme-static@1.0.0/swiper/swiper.min.js #swiper js依赖</span><br><span class="line">  banner:</span><br><span class="line">    tips: 新品主题</span><br><span class="line">    title: Theme-AnZhiYu</span><br><span class="line">    image: https://bu.dusays.com/2023/05/13/645fa3cf90d70.webp</span><br><span class="line">    link: https://blog.anheyu.com/docs</span><br><span class="line"></span><br><span class="line"># 朋友圈配置</span><br><span class="line"># friends_vue:</span><br><span class="line">#   enable: false</span><br><span class="line">#   vue_js: https://npm.elemecdn.com/anzhiyu-theme-static@1.1.1/friends/index.4f887d95.js</span><br><span class="line">#   apiurl: # 朋友圈后端地址</span><br><span class="line">#   top_background:</span><br><span class="line">friends_vue:</span><br><span class="line">  enable: true</span><br><span class="line">  vue_js: https://npm.elemecdn.com/@it985/docsimages/js/friends_vue.js</span><br><span class="line">  apiurl: https://friends.tryrun.top/ # 朋友圈后端地址</span><br><span class="line">  top_background: https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 黑色模式粒子效果canvas</span><br><span class="line">universe:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># 页面卡片顶部气泡升起效果</span><br><span class="line">bubble:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">#  控制台打印信息</span><br><span class="line">console:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line"># 51a统计配置</span><br><span class="line">LA:</span><br><span class="line">  enable: false</span><br><span class="line">  ck:</span><br><span class="line">  LingQueMonitorID:</span><br><span class="line"></span><br><span class="line"># 标签卖萌</span><br><span class="line">diytitle:</span><br><span class="line">  enable: true</span><br><span class="line">  leaveTitle: w(ﾟДﾟ)w 不要走！再看看嘛！</span><br><span class="line">  backTitle: ♪(^∇^*)欢迎肥来！</span><br><span class="line"></span><br><span class="line"># 留言弹幕配置</span><br><span class="line">comment_barrage_config:</span><br><span class="line">  enable: false</span><br><span class="line">  # 同时最多显示弹幕数</span><br><span class="line">  maxBarrage: 1</span><br><span class="line">  # 弹幕显示间隔时间ms</span><br><span class="line">  barrageTime: 4000</span><br><span class="line">  # token，在控制台中获取</span><br><span class="line">  accessToken: &quot;&quot;</span><br><span class="line">  # 博主邮箱md5值</span><br><span class="line">  mailMd5: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 左下角音乐配置项</span><br><span class="line"># https://github.com/metowolf/MetingJS</span><br><span class="line">nav_music:</span><br><span class="line">  enable: true</span><br><span class="line">  console_widescreen_music: true # 宽屏状态控制台显示音乐而不是标签 enable为true 控制台依然会显示</span><br><span class="line">  # id: 8152976493</span><br><span class="line">  id: 60198</span><br><span class="line">  server: netease</span><br><span class="line">  # all_playlist: https://y.qq.com/n/ryqq/playlist/8802438608</span><br><span class="line">  all_playlist: https://music.163.com/#/playlist?id=60198</span><br><span class="line"></span><br><span class="line"># 评论匿名邮箱</span><br><span class="line">visitorMail:</span><br><span class="line">  enable: true</span><br><span class="line">  mail: visitor@anheyu.com</span><br><span class="line"></span><br><span class="line"># ptool 文章底部工具</span><br><span class="line">ptool:</span><br><span class="line">  enable: true</span><br><span class="line">  share_mobile: true</span><br><span class="line">  share_weibo: true</span><br><span class="line">  share_copyurl: true</span><br><span class="line">  categories: true # 是否显示分类</span><br><span class="line">  mode: # 运营模式与责任，不配置不显示</span><br><span class="line"></span><br><span class="line"># 欢迎语配置</span><br><span class="line">greetingBox:</span><br><span class="line">  enable: true</span><br><span class="line">  default: 晚上好👋</span><br><span class="line">  list:</span><br><span class="line">    - greeting: 晚安😴</span><br><span class="line">      startTime: 0</span><br><span class="line">      endTime: 5</span><br><span class="line">    - greeting: 早上好鸭👋, 祝你一天好心情！</span><br><span class="line">      startTime: 6</span><br><span class="line">      endTime: 9</span><br><span class="line">    - greeting: 上午好👋, 状态很好，鼓励一下～</span><br><span class="line">      startTime: 10</span><br><span class="line">      endTime: 10</span><br><span class="line">    - greeting: 11点多啦, 在坚持一下就吃饭啦～</span><br><span class="line">      startTime: 11</span><br><span class="line">      endTime: 11</span><br><span class="line">    - greeting: 午安👋, 宝贝</span><br><span class="line">      startTime: 12</span><br><span class="line">      endTime: 14</span><br><span class="line">    - greeting: 🌈充实的一天辛苦啦！</span><br><span class="line">      startTime: 14</span><br><span class="line">      endTime: 18</span><br><span class="line">    - greeting: 19点喽, 奖励一顿丰盛的大餐吧🍔。</span><br><span class="line">      startTime: 19</span><br><span class="line">      endTime: 19</span><br><span class="line">    - greeting: 晚上好👋, 在属于自己的时间好好放松😌~</span><br><span class="line">      startTime: 20</span><br><span class="line">      endTime: 24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 文章顶部ai摘要</span><br><span class="line">post_head_ai_description:</span><br><span class="line">  enable: false</span><br><span class="line">  gptName: AnZhiYu</span><br><span class="line">  mode: local # 默认模式 可选值: tianli/local</span><br><span class="line">  switchBtn: false # 可以配置是否显示切换按钮 以切换tianli/local</span><br><span class="line">  btnLink: https://afdian.net/item/886a79d4db6711eda42a52540025c377</span><br><span class="line">  randomNum: 3 # 按钮最大的随机次数，也就是一篇文章最大随机出来几种</span><br><span class="line">  basicWordCount: 1000 # 最低获取字符数, 最小1000, 最大1999</span><br><span class="line">  key: xxxx</span><br><span class="line">  Referer: https://xx.xx/</span><br><span class="line"></span><br><span class="line"># envelope_comment留言板页面</span><br><span class="line"># see https://akilar.top/posts/e2d3c450/</span><br><span class="line">envelope_comment:</span><br><span class="line">  enable: true #控制开关</span><br><span class="line">  custom_pic:</span><br><span class="line">    cover: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/violet.jpg #信笺头部图片</span><br><span class="line">    line: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/line.png #信笺底部图片</span><br><span class="line">    beforeimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/before.png # 信封前半部分</span><br><span class="line">    afterimg: https://npm.elemecdn.com/hexo-butterfly-envelope/lib/after.png # 信封后半部分</span><br><span class="line">  message: #信笺正文，多行文本，写法如下</span><br><span class="line">    - 有什么想问的？</span><br><span class="line">    - 有什么想说的？</span><br><span class="line">    - 有什么想吐槽的？</span><br><span class="line">    - 哪怕是有什么想吃的，都可以告诉我哦~</span><br><span class="line">  bottom: 自动书记人偶竭诚为您服务！ #仅支持单行文本</span><br><span class="line">  height: #1024px，信封划出的高度</span><br><span class="line">  path: #【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span><br><span class="line">  front_matter: #【可选】comments页面的 front_matter 配置</span><br><span class="line">    title: 留言板</span><br><span class="line">    comments: true</span><br><span class="line">    top_img: false</span><br><span class="line">    type: envelope</span><br><span class="line"> </span><br><span class="line"># 快捷键配置</span><br><span class="line">shortcutKey:</span><br><span class="line">  enable: false</span><br><span class="line">  delay: 300 # shift按下延时多久开启</span><br><span class="line"></span><br><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # 自定义css</span><br><span class="line">    # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/1.css?1&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # 自定义js</span><br><span class="line">    # - &lt;script src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/winbox.bundle.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script  type=&quot;text/javascript&quot; src=&quot;/js/1.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script  type=&quot;text/javascript&quot; src=&quot;/js/2.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script  type=&quot;text/javascript&quot; src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/2.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script  type=&quot;text/javascript&quot; src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/1.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn1.tianli0.top/npm/sweetalert2@8.19.0/dist/sweetalert2.all.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script src=&quot;/js/lunar.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    - &lt;script src=&quot;/js/day.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script  type=&quot;text/javascript&quot; src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/2.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script  type=&quot;text/javascript&quot; src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/1.min.js?1&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/lunar.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/day.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    # - &lt;script src=&quot;https://npm.elemecdn.com/@it985/docsimages/js/sweetalert2.all.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"># CDN</span><br><span class="line"># Don&#x27;t modify the following settings unless you know how they work</span><br><span class="line"># 非必要请不要修改</span><br><span class="line">CDN:</span><br><span class="line">  # The CDN provider of internal scripts (主题内部 js 的 cdn 配置)</span><br><span class="line">  # option: local/elemecdn/jsdelivr/unpkg/cdnjs/custom</span><br><span class="line">  # Dev version can only choose. ( dev版的主题只能设置为 local )</span><br><span class="line">  internal_provider: elemecdn</span><br><span class="line"></span><br><span class="line">  # The CDN provider of third party scripts (第三方 js 的 cdn 配置)</span><br><span class="line">  # option: elemecdn/jsdelivr/unpkg/cdnjs/custom</span><br><span class="line">  third_party_provider: elemecdn</span><br><span class="line"></span><br><span class="line">  # Add version number to CDN, true or false</span><br><span class="line">  version: true</span><br><span class="line"></span><br><span class="line">  # Custom format</span><br><span class="line">  # For example: https://cdn.staticfile.org/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;min_cdnjs_file&#125;</span><br><span class="line">  custom_format: https://npm.elemecdn.com/$&#123;name&#125;@latest/$&#123;file&#125;</span><br><span class="line"></span><br><span class="line">  option:</span><br><span class="line">    # main_css:</span><br><span class="line">    # main:</span><br><span class="line">    # utils:</span><br><span class="line">    # translate:</span><br><span class="line">    translate: https://cdn1.tianli0.top/npm/js-heo@1.0.6/translate/tw_cn.js</span><br><span class="line">    # local_search:</span><br><span class="line">    # algolia_js:</span><br><span class="line">    # algolia_search_v4:</span><br><span class="line">    # instantsearch_v4:</span><br><span class="line">    # algolia_js: https://cdn1.tianli0.top/npm/js-heo@1.0.11/algolia/algolia.js</span><br><span class="line">    # algolia_search: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/instantsearch.js/2.10.5/instantsearch.min.js</span><br><span class="line">    # algolia_search_css: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/instantsearch.js/2.10.5/instantsearch.min.css</span><br><span class="line">    # pjax:</span><br><span class="line">    pjax: https://lib.baomitu.com/pjax/0.2.8/pjax.min.js</span><br><span class="line">    gitalk: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/gitalk/1.7.2/gitalk.min.js</span><br><span class="line">    gitalk_css: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/gitalk/1.7.2/gitalk.min.css</span><br><span class="line">    # blueimp_md5:</span><br><span class="line">    # valine:</span><br><span class="line">    # twikoo:</span><br><span class="line">    # waline_js:</span><br><span class="line">    # waline_css:</span><br><span class="line">    valine: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/valine/1.4.16/Valine.min.js</span><br><span class="line">    disqusjs: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/disqusjs/1.3.0/disqus.js</span><br><span class="line">    disqusjs_css: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/disqusjs/1.3.0/disqusjs.css</span><br><span class="line">    twikoo: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/twikoo/1.4.18/twikoo.all.min.js</span><br><span class="line">    waline_js: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/waline/1.5.4/Waline.min.js</span><br><span class="line">    sharejs: https://lib.baomitu.com/social-share.js/1.0.16/js/social-share.min.js</span><br><span class="line">    sharejs_css: https://lib.baomitu.com/social-share.js/1.0.16/css/share.min.css</span><br><span class="line">    # mathjax:</span><br><span class="line">    # katex:</span><br><span class="line">    # katex_copytex:</span><br><span class="line">    # mermaid:</span><br><span class="line">    # canvas_ribbon:</span><br><span class="line">    # canvas_fluttering_ribbon:</span><br><span class="line">    # canvas_nest:</span><br><span class="line">    # lazyload:</span><br><span class="line">    # instantpage:</span><br><span class="line">    # typed:</span><br><span class="line">    lazyload: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vanilla-lazyload/17.3.1/lazyload.iife.min.js</span><br><span class="line">    instantpage: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/instant.page/5.1.0/instantpage.min.js</span><br><span class="line">    typed: https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/typed.js/2.0.12/typed.min.js</span><br><span class="line">    # pangu:</span><br><span class="line">    # fancybox_css_v4:</span><br><span class="line">    # fancybox_v4:</span><br><span class="line">    fancybox_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/fancybox/3.5.7/jquery.fancybox.min.css</span><br><span class="line">    fancybox: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/fancybox/3.5.7/jquery.fancybox.min.js</span><br><span class="line">    # medium_zoom:</span><br><span class="line">    medium_zoom: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/medium-zoom/1.0.6/medium-zoom.min.js</span><br><span class="line">    # snackbar_css:</span><br><span class="line">    # snackbar:</span><br><span class="line">    snackbar_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.css</span><br><span class="line">    snackbar: https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.js</span><br><span class="line">    # activate_power_mode:</span><br><span class="line">    # fireworks:</span><br><span class="line">    # click_heart:</span><br><span class="line">    # ClickShowText:</span><br><span class="line">    # fontawesome:</span><br><span class="line">    # flickr_justified_gallery_js:</span><br><span class="line">    # flickr_justified_gallery_css:</span><br><span class="line">    # aplayer_css:</span><br><span class="line">    # aplayer_js:</span><br><span class="line">    # meting_js:</span><br><span class="line">    meting_api: https://api.injahow.cn/meting/?server=:server&amp;type=:type&amp;id=:id&amp;auth=:auth&amp;r=:r</span><br><span class="line">    # prismjs_js:</span><br><span class="line">    # prismjs_lineNumber_js:</span><br><span class="line">    # prismjs_autoloader:</span><br><span class="line">    # artalk_js:</span><br><span class="line">    # artalk_css:</span><br><span class="line">    # pace_js:</span><br><span class="line">    # pace_default_css:</span><br><span class="line">    # countup_js:</span><br><span class="line">    # gsap_js:</span><br><span class="line">    # busuanzi:</span><br><span class="line">    # rightmenu:</span><br><span class="line">    # waterfall:</span><br><span class="line">    # ali_iconfont_css:</span><br></pre></td></tr></table></figure><h2 id="备份essay-yml"><a href="#备份essay-yml" class="headerlink" title="备份essay.yml"></a><strong>备份essay.yml</strong></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">title:</span> <span class="string">即刻短文</span></span><br><span class="line">  <span class="attr">subTitle:</span> <span class="string">咸鱼的日常生活。</span></span><br><span class="line">  <span class="attr">tips:</span> <span class="string">随时随地，分享生活</span></span><br><span class="line">  <span class="attr">buttonText:</span> <span class="string">关于我</span></span><br><span class="line">  <span class="attr">buttonLink:</span> <span class="string">/about/</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">home_essay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">top_background:</span> <span class="string">https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span></span><br><span class="line">  <span class="attr">essay_list:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">“老板是来渡劫的吧”，00后工作的状态火了，90后笑而不语</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/07/08</span> <span class="number">18</span><span class="string">:47</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/1.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/2.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/3.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/4.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/5.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/6.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/7.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/8.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/9.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/10.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/11.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/12.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/13.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/essay/14.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">生如野草</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/07/08</span> <span class="number">17</span><span class="string">:47</span></span><br><span class="line">      <span class="comment"># https://github.com/metowolf/MetingJS</span></span><br><span class="line">      <span class="comment"># netease-网易云 tencent-qq音乐 ytmusic-youtube music spotify-spotify</span></span><br><span class="line">      <span class="attr">aplayer:</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">netease</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2061923944</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">你玩过打水漂吗？不管石头漂多远，最后都会沉入水里，这就是我的命。</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/07/08</span> <span class="number">17</span><span class="string">:47</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">格斗是我们这辈子唯一的出路</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/07/08</span> <span class="number">17</span><span class="string">:47</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">R.I.P.歌手李玟去世，她是唯一一位登上世界杯开幕式的亚洲歌后</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/07/05</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">如果睁眼便是十年后”犹在耳边，不曾想未来已至。十年之约一起“奔赴”！</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/06/18</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">音乐支持了参数设置自定义歌单</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2023</span><span class="string">/01/02</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.tryrun.top/music/?id=1708664797&amp;server=tencent/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">content:</span> <span class="string">歌曲推荐</span></span><br><span class="line">      <span class="attr">date:</span> <span class="number">2022</span><span class="string">/09/25</span></span><br><span class="line">      <span class="attr">aplayer:</span></span><br><span class="line">        <span class="attr">server:</span> <span class="string">tencent</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">001FGQba3i10mw</span></span><br></pre></td></tr></table></figure><h2 id="备份album-yml"><a href="#备份album-yml" class="headerlink" title="备份album.yml"></a><strong>备份album.yml</strong></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">世界各地夕阳与风景</span></span><br><span class="line">  <span class="attr">path_name:</span> <span class="string">/album/wordScenery</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">因为到不了世界各地，所以请网友们发来了各地的夕阳与风景🌇。</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://bu.dusays.com/2023/04/09/64329399d1175.jpg</span></span><br><span class="line">  <span class="attr">top_background:</span> <span class="string">https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span>  <span class="comment">#顶部图</span></span><br><span class="line">  <span class="attr">rowHeight:</span> <span class="number">220</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">btnLazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">/img/hzw.webp</span></span><br><span class="line">  <span class="attr">url:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">album_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">date:</span> <span class="number">2022</span><span class="string">/10/26</span> <span class="number">01</span><span class="string">:00:00</span></span><br><span class="line">      <span class="attr">content:</span> <span class="string">湘潭的一角。</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">湖南湘潭</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">再吃一口就减肥</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">https://bu.dusays.com/2023/04/09/64329399db122.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">date:</span> <span class="number">2022-10-25</span></span><br><span class="line">      <span class="attr">content:</span> <span class="string">洛阳暴雨后的天空。</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">河南洛阳</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">紫菜卷</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">https://bu.dusays.com/2023/04/09/64329399db122.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">https://bu.dusays.com/2023/04/09/64329399db2e1.webp</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">我的日常</span></span><br><span class="line">  <span class="attr">path_name:</span> <span class="string">/album/dailyPhoto</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">这里存放的是有关我自己的一些沙雕生活与有趣的事情。</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://bu.dusays.com/2023/04/09/64329399cea5a.webp</span></span><br><span class="line">  <span class="attr">top_background:</span> <span class="string">https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span>  <span class="comment">#顶部图</span></span><br><span class="line">  <span class="attr">album_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">date:</span> <span class="number">2022-10-24</span></span><br><span class="line">      <span class="attr">content:</span> <span class="string">老妹的画</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">https://bu.dusays.com/2023/04/09/643293997b92b.jpeg</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">动漫精美图1</span></span><br><span class="line">  <span class="attr">path_name:</span> <span class="string">/album/Anime1</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">top_background:</span> <span class="string">https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302</span>  <span class="comment">#顶部图</span></span><br><span class="line">  <span class="attr">rowHeight:</span> <span class="number">100</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">btnLazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">动漫精美图1</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">/img/Anime1/0.webp</span></span><br><span class="line">  <span class="attr">album_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">date:</span> <span class="number">2023-06-24</span></span><br><span class="line">      <span class="attr">content:</span> <span class="string">动漫精美图1</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/0.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/1.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/2.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/3.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/4.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/5.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/6.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/7.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/8.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/9.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/10.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/11.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/12.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/13.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/14.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/15.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/16.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/17.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/18.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/19.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/20.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/21.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/22.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/23.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/24.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/25.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/26.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/27.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/28.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/29.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/30.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/31.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/32.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/33.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/34.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/35.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/36.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/37.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/38.webp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/img/Anime1/39.webp</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo主题魔改备忘录&quot;&gt;&lt;a href=&quot;#hexo主题魔改备忘录&quot; class=&quot;headerlink&quot; title=&quot;hexo主题魔改备忘录&quot;&gt;&lt;/a&gt;hexo主题魔改备忘录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  本文记录博主的魔改&lt;code&gt;hexo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>专栏汇总：Java并发</title>
    <link href="https://hexo.tryrun.top/posts/718bea50.html"/>
    <id>https://hexo.tryrun.top/posts/718bea50.html</id>
    <published>2021-05-18T09:43:42.000Z</published>
    <updated>2021-05-18T09:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="专栏汇总：Java并发"><a href="#专栏汇总：Java并发" class="headerlink" title="专栏汇总：Java并发"></a><a href="/posts/718bea50.html">专栏汇总：Java并发</a></h1><p>整个系列文章为Java并发专题，一是自己的兴趣，二是，这部分在实际理解上很有难度，另外在面试过程中也是经常被问到。所以在学习过程中，记录了Java并发相关的基础知识，一是自己对知识能够建立体系，同时也希望有幸能够对其他人有用。</p><ul><li><a href="/posts/2b1d309b.html">十九、Java并发 Java wait() 和 notify() 方法</a>  </li><li><a href="/posts/c969ad4b.html">十八、Java并发 Java 之 Runnable 还是 Thread ?</a>  </li><li><a href="/posts/9c8c1a2d.html">十七、Java并发 Java Thread 生命周期</a>  </li><li><a href="/posts/9c264667.html">十六、Java并发 Java ThreadLocalRandom</a>  </li><li><a href="/posts/50778af3.html">十五、Java并发 Java java.util.concurrent.Future</a>  </li><li><a href="/posts/a36784de.html">十四、Java并发 Java 守护线程 ( Daemon Thread )</a>  </li><li><a href="/posts/e2353faf.html">十三、Java并发 Java java.util.concurrent.Locks</a>  </li><li><a href="/posts/deede7ad.html">十二、Java并发 Java BlockingQueue</a>  </li><li><a href="/posts/92030527.html">十一、Java并发 Java CountDownLatch</a>  </li><li><a href="/posts/774c589b.html">十、Java并发系列之 Java 并发编程面试题</a>  </li><li><a href="/posts/47722b62.html">九、Java并发 Java CompletableFuture ( 下 )</a>  </li><li><a href="/posts/1e640cc2.html">八、Java并发 Java CompletableFuture</a>  </li><li><a href="/posts/cb5d7b3f.html">七、Java并发 Java Google Guava 实现</a>  </li><li><a href="/posts/b57a6e2b.html">六、Java并发 Java ForkJoinPool</a>  </li><li><a href="/posts/5975178e.html">五、Java并发 ScheduledThreadPoolExecutor</a>  </li><li><a href="/posts/f6cd6d86.html">四、Java并发 Java 线程池之 ThreadPoolExecutor</a>  </li><li><a href="/posts/bd483eb7.html">三、Java并发 Java 线程池 ( Thread Pool )</a>  </li><li><a href="/posts/4a515c30.html">二、Java并发 Java Fork-Join</a>  </li><li><a href="/posts/d5817b6f.html">一、Java并发 Java ExecutorService</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;专栏汇总：Java并发&quot;&gt;&lt;a href=&quot;#专栏汇总：Java并发&quot; class=&quot;headerlink&quot; title=&quot;专栏汇总：Java并发&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/posts/718bea50.html&quot;&gt;专栏汇总：Java并发&lt;/a&gt;&lt;/h1&gt;&lt;p</summary>
      
    
    
    
    <category term="Java" scheme="https://hexo.tryrun.top/categories/Java/"/>
    
    
    <category term="专栏" scheme="https://hexo.tryrun.top/tags/%E4%B8%93%E6%A0%8F/"/>
    
    <category term="Java并发" scheme="https://hexo.tryrun.top/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 服务调用过程</title>
    <link href="https://hexo.tryrun.top/posts/2ad0f5ed.html"/>
    <id>https://hexo.tryrun.top/posts/2ad0f5ed.html</id>
    <published>2020-09-27T14:29:54.000Z</published>
    <updated>2020-09-27T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九、Dubbo-源码分析-–-服务调用过程"><a href="#九、Dubbo-源码分析-–-服务调用过程" class="headerlink" title="九、Dubbo 源码分析 – 服务调用过程"></a>九、Dubbo 源码分析 – 服务调用过程</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在前面的文章中，我们分析了 Dubbo SPI、服务导出与引入、以及集群容错方面的代码。经过前文的铺垫，本篇文章我们终于可以分析服务调用过程了。Dubbo 服务调用过程比较复杂，包含众多步骤。比如发送请求、编解码、服务降级、过滤器链处理、序列化、线程派发以及响应请求等步骤。限于篇幅原因，本篇文章无法对所有的步骤一一进行分析。本篇文章将会重点分析请求的发送与接收、编解码、线程派发以及响应的发送与接收等过程，至于服务降级、过滤器链和序列化大家自行进行分析，也可以将其当成一个黑盒，暂时忽略也没关系。介绍完本篇文章要分析的内容，接下来我们进入正题吧。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><p>在进行源码分析之前，我们先来了解 Dubbo 服务调用过程。</p><p>首先服务消费者通过代理对象 Proxy 发起远程调用，接着通过网络客户端 Client 将编码后的请求发送给服务提供方的网络层上，也就是 Server。Server 在收到请求后，首先要做的事情是对数据包进行解码。然后将解码后的请求发送至分发器 Dispatcher，再由分发器将请求派发到指定的线程池上，最后由线程池调用具体的服务。这就是一个远程调用请求的发送与接收过程。至于响应的发送与接收过程，这张图中没有表现出来。对于这两个过程，我们也会进行详细分析。</p><h3 id="2-1-服务调用方式"><a href="#2-1-服务调用方式" class="headerlink" title="2.1 服务调用方式"></a>2.1 服务调用方式</h3><p>Dubbo 支持同步和异步两种调用方式，其中异步调用还可细分为“有返回值”的异步调用和“无返回值”的异步调用。所谓“无返回值”异步调用是指服务消费方只管调用，但不关心调用结果，此时 Dubbo 会直接返回一个空的 RpcResult。若要使用异步特性，需要服务消费方手动进行配置。默认情况下，Dubbo 使用同步调用方式。</p><p>本节以及其他章节将会使用 Dubbo 官方提供的 Demo 分析整个调用过程，下面我们从 DemoService 接口的代理类开始进行分析。Dubbo 默认使用 Javassist 框架为服务接口生成动态代理类，因此我们需要先将代理类进行反编译才能看到源码。这里使用阿里开源 Java 应用诊断工具 <a href="https://github.com/alibaba/arthas">Arthas</a> 反编译代理类，结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Arthas 反编译步骤：</span></span><br><span class="line"><span class="comment"> * 1. 启动 Arthas</span></span><br><span class="line"><span class="comment"> *    java -jar arthas-boot.jar</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 输入编号选择进程</span></span><br><span class="line"><span class="comment"> *    Arthas 启动后，会打印 Java 应用进程列表，比如：</span></span><br><span class="line"><span class="comment"> *    [1]: 11232 org.jetbrains.jps.cmdline.Launcher</span></span><br><span class="line"><span class="comment"> *    [2]: 22370 org.jetbrains.jps.cmdline.Launcher</span></span><br><span class="line"><span class="comment"> *    [3]: 22371 com.alibaba.dubbo.demo.consumer.Consumer</span></span><br><span class="line"><span class="comment"> *    [4]: 22362 com.alibaba.dubbo.demo.provider.Provider</span></span><br><span class="line"><span class="comment"> *    [5]: 2074 org.apache.zookeeper.server.quorum.QuorumPeerMain</span></span><br><span class="line"><span class="comment"> * 这里输入编号 3，让 Arthas 关联到启动类为 com.....Consumer 的 Java 进程上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 由于 Demo 项目中只有一个服务接口，因此此接口的代理类类名为 proxy0，此时使用 sc 命令搜索这个类名。</span></span><br><span class="line"><span class="comment"> *    $ sc *.proxy0</span></span><br><span class="line"><span class="comment"> *    com.alibaba.dubbo.common.bytecode.proxy0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. 使用 jad 命令反编译 com.alibaba.dubbo.common.bytecode.proxy0</span></span><br><span class="line"><span class="comment"> *    $ jad com.alibaba.dubbo.common.bytecode.proxy0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 更多使用方法请参考 Arthas 官方文档：</span></span><br><span class="line"><span class="comment"> *   https://alibaba.github.io/arthas/quick-start.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">proxy0</span> <span class="keyword">implements</span> <span class="title class_">ClassGenerator</span>.DC, EchoService, DemoService &#123;</span><br><span class="line">    <span class="comment">// 方法数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Method[] methods;</span><br><span class="line">    <span class="keyword">private</span> InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">proxy0</span><span class="params">(InvocationHandler invocationHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handler = invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">proxy0</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="comment">// 将参数存储到 Object 数组中</span></span><br><span class="line">        Object[] arrobject = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;string&#125;;</span><br><span class="line">        <span class="comment">// 调用 InvocationHandler 实现类的 invoke 方法得到调用结果</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="built_in">this</span>.handler.invoke(<span class="built_in">this</span>, methods[<span class="number">0</span>], arrobject);</span><br><span class="line">        <span class="comment">// 返回调用结果</span></span><br><span class="line">        <span class="keyword">return</span> (String)object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 回声测试方法 */</span></span><br><span class="line">    <span class="keyword">public</span> Object $echo(Object object) &#123;</span><br><span class="line">        Object[] arrobject = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> <span class="built_in">this</span>.handler.invoke(<span class="built_in">this</span>, methods[<span class="number">1</span>], arrobject);</span><br><span class="line">        <span class="keyword">return</span> object2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，代理类的逻辑比较简单。首先将运行时参数存储到数组中，然后调用 InvocationHandler 接口实现类的 invoke 方法，得到调用结果，最后将结果转型并返回给调用方。关于代理类的逻辑就说这么多，继续向下分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerInvocationHandler</span><span class="params">(Invoker&lt;?&gt; handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.invoker = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截定义在 Object 类中的方法（未被子类重写），比如 wait/notify</span></span><br><span class="line">        <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(invoker, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 toString、hashCode 和 equals 等方法被子类重写了，这里也直接调用</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;hashCode&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;equals&quot;</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 method 和 args 封装到 RpcInvocation 中，并执行后续的调用</span></span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> <span class="title class_">RpcInvocation</span>(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InvokerInvocationHandler 中的 invoker 成员变量类型为 MockClusterInvoker，MockClusterInvoker 内部封装了服务降级逻辑。下面简单看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockClusterInvoker</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Invoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;T&gt; invoker;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 mock 配置值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> directory.getUrl().getMethodParameter(invocation.getMethodName(), Constants.MOCK_KEY, Boolean.FALSE.toString()).trim();</span><br><span class="line">        <span class="keyword">if</span> (value.length() == <span class="number">0</span> || value.equalsIgnoreCase(<span class="string">&quot;false&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 无 mock 逻辑，直接调用其他 Invoker 对象的 invoke 方法，</span></span><br><span class="line">            <span class="comment">// 比如 FailoverClusterInvoker</span></span><br><span class="line">            result = <span class="built_in">this</span>.invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.startsWith(<span class="string">&quot;force&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// force:xxx 直接执行 mock 逻辑，不发起远程调用</span></span><br><span class="line">            result = doMockInvoke(invocation, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// fail:xxx 表示消费方对调用服务失败后，再执行 mock 逻辑，不抛出异常</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用其他 Invoker 对象的 invoke 方法</span></span><br><span class="line">                result = <span class="built_in">this</span>.invoker.invoke(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isBiz()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 调用失败，执行 mock 逻辑</span></span><br><span class="line">                    result = doMockInvoke(invocation, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务降级不是本文重点，因此这里就不分析 doMockInvoke 方法了。考虑到前文已经详细分析过 FailoverClusterInvoker，因此本节略过 FailoverClusterInvoker，直接分析 DubboInvoker。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractInvoker</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Invoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">invoke</span><span class="params">(Invocation inv)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">if</span> (destroyed.get()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Rpc invoker for service ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">RpcInvocation</span> <span class="variable">invocation</span> <span class="operator">=</span> (RpcInvocation) inv;</span><br><span class="line">        <span class="comment">// 设置 Invoker</span></span><br><span class="line">        invocation.setInvoker(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (attachment != <span class="literal">null</span> &amp;&amp; attachment.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置 attachment</span></span><br><span class="line">            invocation.addAttachmentsIfAbsent(attachment);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();</span><br><span class="line">        <span class="keyword">if</span> (contextAttachments != <span class="literal">null</span> &amp;&amp; contextAttachments.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加 contextAttachments 到 RpcInvocation#attachment 变量中</span></span><br><span class="line">            invocation.addAttachments(contextAttachments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getUrl().getMethodParameter(invocation.getMethodName(), Constants.ASYNC_KEY, <span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="comment">// 设置异步信息到 RpcInvocation#attachment 中</span></span><br><span class="line">            invocation.setAttachment(Constants.ASYNC_KEY, Boolean.TRUE.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 抽象方法，由子类实现</span></span><br><span class="line">            <span class="keyword">return</span> doInvoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码来自 AbstractInvoker 类，其中大部分代码用于添加信息到 RpcInvocation#attachment 变量中，添加完毕后，调用 doInvoke 执行后续的调用。doInvoke 是一个抽象方法，需要由子类实现，下面到 DubboInvoker 中看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExchangeClient[] clients;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Result <span class="title function_">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">RpcInvocation</span> <span class="variable">inv</span> <span class="operator">=</span> (RpcInvocation) invocation;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> RpcUtils.getMethodName(invocation);</span><br><span class="line">        <span class="comment">// 设置 path 和 version 到 attachment 中</span></span><br><span class="line">        inv.setAttachment(Constants.PATH_KEY, getUrl().getPath());</span><br><span class="line">        inv.setAttachment(Constants.VERSION_KEY, version);</span><br><span class="line"></span><br><span class="line">        ExchangeClient currentClient;</span><br><span class="line">        <span class="keyword">if</span> (clients.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 从 clients 数组中获取 ExchangeClient</span></span><br><span class="line">            currentClient = clients[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentClient = clients[index.getAndIncrement() % clients.length];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取异步配置</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isAsync</span> <span class="operator">=</span> RpcUtils.isAsync(getUrl(), invocation);</span><br><span class="line">            <span class="comment">// isOneway 为 true，表示“单向”通信</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isOneway</span> <span class="operator">=</span> RpcUtils.isOneway(getUrl(), invocation);</span><br><span class="line">            <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> getUrl().getMethodParameter(methodName, Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步无返回值</span></span><br><span class="line">            <span class="keyword">if</span> (isOneway) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isSent</span> <span class="operator">=</span> getUrl().getMethodParameter(methodName, Constants.SENT_KEY, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 发送请求</span></span><br><span class="line">                currentClient.send(inv, isSent);</span><br><span class="line">                <span class="comment">// 设置上下文中的 future 为 null</span></span><br><span class="line">                RpcContext.getContext().setFuture(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 返回一个空的 RpcResult</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>();</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步有返回值</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">                <span class="comment">// 发送请求，获得 ResponseFuture 实例</span></span><br><span class="line">                <span class="type">ResponseFuture</span> <span class="variable">future</span> <span class="operator">=</span> currentClient.request(inv, timeout);</span><br><span class="line">                <span class="comment">// 设置 future 到上下文中</span></span><br><span class="line">                RpcContext.getContext().setFuture(<span class="keyword">new</span> <span class="title class_">FutureAdapter</span>&lt;Object&gt;(future));</span><br><span class="line">                <span class="comment">// 暂时返回一个空结果</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>();</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步调用</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                RpcContext.getContext().setFuture(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 发送请求，得到一个 ResponseFuture 实例，并调用该实例的 get 方法进行等待</span></span><br><span class="line">                <span class="keyword">return</span> (Result) currentClient.request(inv, timeout).get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(..., <span class="string">&quot;Invoke remote method timeout....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(..., <span class="string">&quot;Failed to invoke remote method: ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码包含了 Dubbo 对同步和异步调用的处理逻辑，搞懂了上面的代码，会对 Dubbo 的同步和异步调用方式有更深入的了解。Dubbo 实现同步和异步调用比较关键的一点就在于由谁调用 ResponseFuture 的 get 方法。同步调用模式下，由框架自身调用 ResponseFuture 的 get 方法。异步调用模式下，则由用户调用该方法。ResponseFuture 是一个接口，下面我们来看一下它的默认实现类 DefaultFuture 的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFuture</span> <span class="keyword">implements</span> <span class="title class_">ResponseFuture</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, Channel&gt; CHANNELS = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Long, Channel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, DefaultFuture&gt; FUTURES = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Long, DefaultFuture&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Request request;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> timeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">done</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Response response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultFuture</span><span class="params">(Channel channel, Request request, <span class="type">int</span> timeout)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求 id，这个 id 很重要，后面还会见到</span></span><br><span class="line">        <span class="built_in">this</span>.id = request.getId();</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout &gt; <span class="number">0</span> ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        <span class="comment">// 存储 &lt;requestId, DefaultFuture&gt; 映射关系到 FUTURES 中</span></span><br><span class="line">        FUTURES.put(id, <span class="built_in">this</span>);</span><br><span class="line">        CHANNELS.put(id, channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">return</span> get(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            timeout = Constants.DEFAULT_TIMEOUT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isDone()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 循环检测服务提供方是否成功返回了调用结果</span></span><br><span class="line">                <span class="keyword">while</span> (!isDone()) &#123;</span><br><span class="line">                    <span class="comment">// 如果调用结果尚未返回，这里等待一段时间</span></span><br><span class="line">                    done.await(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">                    <span class="comment">// 如果调用结果成功返回，或等待超时，此时跳出 while 循环，执行后续的逻辑</span></span><br><span class="line">                    <span class="keyword">if</span> (isDone() || System.currentTimeMillis() - start &gt; timeout) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果调用结果仍未返回，则抛出超时异常</span></span><br><span class="line">            <span class="keyword">if</span> (!isDone()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(sent &gt; <span class="number">0</span>, channel, getTimeoutMessage(<span class="literal">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回调用结果</span></span><br><span class="line">        <span class="keyword">return</span> returnFromResponse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过检测 response 字段为空与否，判断是否收到了调用结果</span></span><br><span class="line">        <span class="keyword">return</span> response != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">returnFromResponse</span><span class="params">()</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> response;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;response cannot be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果调用结果的状态为 Response.OK，则表示调用过程正常，服务提供方成功返回了调用结果</span></span><br><span class="line">        <span class="keyword">if</span> (res.getStatus() == Response.OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.getResult();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(channel, res.getErrorMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，当服务消费者还未接收到调用结果时，用户线程调用 get 方法会被阻塞住。同步调用模式下，框架获得 DefaultFuture 对象后，会立即调用 get 方法进行等待。而异步模式下则是将该对象封装到 FutureAdapter 实例中，并将 FutureAdapter 实例设置到 RpcContext 中，供用户使用。FutureAdapter 是一个适配器，用于将 Dubbo 中的 ResponseFuture 与 JDK 中的 Future 进行适配。这样当用户线程调用 Future 的 get 方法时，经过 FutureAdapter 适配，最终会调用 ResponseFuture 实现类对象的 get 方法，也就是 DefaultFuture 的 get 方法。</p><p>到这里关于 Dubbo 几种调用方式的代码逻辑就分析完了，下面来分析请求数据的发送与接收，以及响应数据的发送与接收过程。</p><h3 id="2-2-服务消费方发送请求"><a href="#2-2-服务消费方发送请求" class="headerlink" title="2.2 服务消费方发送请求"></a>2.2 服务消费方发送请求</h3><h4 id="2-2-1-发送请求"><a href="#2-2-1-发送请求" class="headerlink" title="2.2.1 发送请求"></a>2.2.1 发送请求</h4><p>本节我们来看一下同步调用模式下，服务消费方是如何发送调用请求的。</p><p>服务消费方发送请求过程的部分调用栈，略为复杂。可以看出，经过多次调用后，才将请求数据送至 Netty NioClientSocketChannel。这样做的原因是通过 Exchange 层为框架引入 Request 和 Response 语义，这一点会在接下来的源码分析过程中会看到。其他的就不多说了，下面开始进行分析。首先分析 ReferenceCountExchangeClient 的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ReferenceCountExchangeClient</span> <span class="keyword">implements</span> <span class="title class_">ExchangeClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">referenceCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReferenceCountExchangeClient</span><span class="params">(ExchangeClient client, ConcurrentMap&lt;String, LazyConnectExchangeClient&gt; ghostClientMap)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = client;</span><br><span class="line">        <span class="comment">// 引用计数自增</span></span><br><span class="line">        referenceCount.incrementAndGet();</span><br><span class="line">        <span class="built_in">this</span>.url = client.getUrl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 直接调用被装饰对象的同签名方法</span></span><br><span class="line">        <span class="keyword">return</span> client.request(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request, <span class="type">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 直接调用被装饰对象的同签名方法</span></span><br><span class="line">        <span class="keyword">return</span> client.request(request, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 引用计数自增，该方法由外部调用 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementAndGetCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// referenceCount 自增</span></span><br><span class="line">        referenceCount.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> timeout)</span> &#123;</span><br><span class="line">        <span class="comment">// referenceCount 自减</span></span><br><span class="line">        <span class="keyword">if</span> (referenceCount.decrementAndGet() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout == <span class="number">0</span>) &#123;</span><br><span class="line">                client.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                client.close(timeout);</span><br><span class="line">            &#125;</span><br><span class="line">            client = replaceWithLazyClient();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReferenceCountExchangeClient 内部定义了一个引用计数变量 referenceCount，每当该对象被引用一次 referenceCount 都会进行自增。每当 close 方法被调用时，referenceCount 进行自减。ReferenceCountExchangeClient 内部仅实现了一个引用计数的功能，其他方法并无复杂逻辑，均是直接调用被装饰对象的相关方法。所以这里就不多说了，继续向下分析，这次是 HeaderExchangeClient。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderExchangeClient</span> <span class="keyword">implements</span> <span class="title class_">ExchangeClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledThreadPoolExecutor</span> <span class="variable">scheduled</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;dubbo-remoting-client-heartbeat&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Client client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExchangeChannel channel;</span><br><span class="line">    <span class="keyword">private</span> ScheduledFuture&lt;?&gt; heartbeatTimer;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> heartbeat;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> heartbeatTimeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderExchangeClient</span><span class="params">(Client client, <span class="type">boolean</span> needHeartbeat)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;client == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.client = client;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 HeaderExchangeChannel 对象</span></span><br><span class="line">        <span class="built_in">this</span>.channel = <span class="keyword">new</span> <span class="title class_">HeaderExchangeChannel</span>(client);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下代码均与心跳检测逻辑有关</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dubbo</span> <span class="operator">=</span> client.getUrl().getParameter(Constants.DUBBO_VERSION_KEY);</span><br><span class="line">        <span class="built_in">this</span>.heartbeat = client.getUrl().getParameter(Constants.HEARTBEAT_KEY, dubbo != <span class="literal">null</span> &amp;&amp; dubbo.startsWith(<span class="string">&quot;1.0.&quot;</span>) ? Constants.DEFAULT_HEARTBEAT : <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.heartbeatTimeout = client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (heartbeatTimeout &lt; heartbeat * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;heartbeatTimeout &lt; heartbeatInterval * 2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (needHeartbeat) &#123;</span><br><span class="line">            <span class="comment">// 开启心跳检测定时器</span></span><br><span class="line">            startHeartbeatTimer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 直接 HeaderExchangeChannel 对象的同签名方法</span></span><br><span class="line">        <span class="keyword">return</span> channel.request(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request, <span class="type">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 直接 HeaderExchangeChannel 对象的同签名方法</span></span><br><span class="line">        <span class="keyword">return</span> channel.request(request, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        doClose();</span><br><span class="line">        channel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doClose</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 停止心跳检测定时器</span></span><br><span class="line">        stopHeartbeatTimer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startHeartbeatTimer</span><span class="params">()</span> &#123;</span><br><span class="line">        stopHeartbeatTimer();</span><br><span class="line">        <span class="keyword">if</span> (heartbeat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            heartbeatTimer = scheduled.scheduleWithFixedDelay(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">HeartBeatTask</span>(<span class="keyword">new</span> <span class="title class_">HeartBeatTask</span>.ChannelProvider() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> Collection&lt;Channel&gt; <span class="title function_">getChannels</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> Collections.&lt;Channel&gt;singletonList(HeaderExchangeClient.<span class="built_in">this</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, heartbeat, heartbeatTimeout),</span><br><span class="line">                    heartbeat, heartbeat, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">stopHeartbeatTimer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (heartbeatTimer != <span class="literal">null</span> &amp;&amp; !heartbeatTimer.isCancelled()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                heartbeatTimer.cancel(<span class="literal">true</span>);</span><br><span class="line">                scheduled.purge();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        heartbeatTimer = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeaderExchangeClient 中很多方法只有一行代码，即调用 HeaderExchangeChannel 对象的同签名方法。那 HeaderExchangeClient 有什么用处呢？答案是封装了一些关于心跳检测的逻辑。心跳检测并非本文所关注的点，因此就不多说了，继续向下看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HeaderExchangeChannel</span> <span class="keyword">implements</span> <span class="title class_">ExchangeChannel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    HeaderExchangeChannel(Channel channel) &#123;</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;channel == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的 channel 指向的是 NettyClient</span></span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">return</span> request(request, channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseFuture <span class="title function_">request</span><span class="params">(Object request, <span class="type">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(..., <span class="string">&quot;Failed to send request ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建 Request 对象</span></span><br><span class="line">        <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>();</span><br><span class="line">        req.setVersion(Version.getProtocolVersion());</span><br><span class="line">        <span class="comment">// 设置双向通信标志为 true</span></span><br><span class="line">        req.setTwoWay(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 这里的 request 变量类型为 RpcInvocation</span></span><br><span class="line">        req.setData(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 DefaultFuture 对象</span></span><br><span class="line">        <span class="type">DefaultFuture</span> <span class="variable">future</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFuture</span>(channel, req, timeout);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用 NettyClient 的 send 方法发送请求</span></span><br><span class="line">            channel.send(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            future.cancel();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 DefaultFuture 对象</span></span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里大家终于看到了 Request 语义了，上面的方法首先定义了一个 Request 对象，然后再将该对象传给 NettyClient 的 send 方法，进行后续的调用。需要说明的是，NettyClient 中并未实现 send 方法，该方法继承自父类 AbstractPeer，下面直接分析 AbstractPeer 的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractPeer</span> <span class="keyword">implements</span> <span class="title class_">Endpoint</span>, ChannelHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 该方法由 AbstractClient 类实现</span></span><br><span class="line">        send(message, url.getParameter(Constants.SENT_KEY, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClient</span> <span class="keyword">extends</span> <span class="title class_">AbstractEndpoint</span> <span class="keyword">implements</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object message, <span class="type">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (send_reconnect &amp;&amp; !isConnected()) &#123;</span><br><span class="line">            connect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Channel，getChannel 是一个抽象方法，具体由子类实现</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> getChannel();</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="literal">null</span> || !channel.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(<span class="built_in">this</span>, <span class="string">&quot;message can not send ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续向下调用</span></span><br><span class="line">        channel.send(message, sent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Channel <span class="title function_">getChannel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，Dubbo 使用 Netty 作为底层的通信框架，因此下面我们到 NettyClient 类中看一下 getChannel 方法的实现逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClient</span> <span class="keyword">extends</span> <span class="title class_">AbstractClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里的 Channel 全限定名称为 org.jboss.netty.channel.Channel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> com.alibaba.dubbo.remoting.Channel <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">c</span> <span class="operator">=</span> channel;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span> || !c.isConnected())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取一个 NettyChannel 类型对象</span></span><br><span class="line">        <span class="keyword">return</span> NettyChannel.getOrAddChannel(c, getUrl(), <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NettyChannel</span> <span class="keyword">extends</span> <span class="title class_">AbstractChannel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;org.jboss.netty.channel.Channel, NettyChannel&gt; channelMap = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;org.jboss.netty.channel.Channel, NettyChannel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> org.jboss.netty.channel.Channel channel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 私有构造方法 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">NettyChannel</span><span class="params">(org.jboss.netty.channel.Channel channel, URL url, ChannelHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(url, handler);</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;netty channel == null;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> NettyChannel <span class="title function_">getOrAddChannel</span><span class="params">(org.jboss.netty.channel.Channel ch, URL url, ChannelHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试从集合中获取 NettyChannel 实例</span></span><br><span class="line">        <span class="type">NettyChannel</span> <span class="variable">ret</span> <span class="operator">=</span> channelMap.get(ch);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 ret = null，则创建一个新的 NettyChannel 实例</span></span><br><span class="line">            <span class="type">NettyChannel</span> <span class="variable">nc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyChannel</span>(ch, url, handler);</span><br><span class="line">            <span class="keyword">if</span> (ch.isConnected()) &#123;</span><br><span class="line">                <span class="comment">// 将 &lt;Channel, NettyChannel&gt; 键值对存入 channelMap 集合中</span></span><br><span class="line">                ret = channelMap.putIfAbsent(ch, nc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">                ret = nc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到 NettyChannel 实例后，即可进行后续的调用。下面看一下 NettyChannel 的 send 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(Object message, <span class="type">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="built_in">super</span>.send(message, sent);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发送消息(包含请求和响应消息)</span></span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> channel.write(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sent 的值源于 &lt;dubbo:method sent=&quot;true/false&quot; /&gt; 中 sent 的配置值，有两种配置值：</span></span><br><span class="line">        <span class="comment">//   1. true: 等待消息发出，消息发送失败将抛出异常</span></span><br><span class="line">        <span class="comment">//   2. false: 不等待消息发出，将消息放入 IO 队列，即刻返回</span></span><br><span class="line">        <span class="comment">// 默认情况下 sent = false；</span></span><br><span class="line">        <span class="keyword">if</span> (sent) &#123;</span><br><span class="line">            timeout = getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">            <span class="comment">// 等待消息发出，若在规定时间没能发出，success 会被置为 false</span></span><br><span class="line">            success = future.await(timeout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> future.getCause();</span><br><span class="line">        <span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(<span class="built_in">this</span>, <span class="string">&quot;Failed to send message ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若 success 为 false，这里抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(<span class="built_in">this</span>, <span class="string">&quot;Failed to send message ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经历多次调用，到这里请求数据的发送过程就结束了，过程漫长。为了便于大家阅读代码，这里以 DemoService 为例，将 sayHello 方法的整个调用路径贴出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">proxy0#sayHello(String)</span><br><span class="line">  —&gt; InvokerInvocationHandler#invoke(Object, Method, Object[])</span><br><span class="line">    —&gt; MockClusterInvoker#invoke(Invocation)</span><br><span class="line">      —&gt; AbstractClusterInvoker#invoke(Invocation)</span><br><span class="line">        —&gt; FailoverClusterInvoker#doInvoke(Invocation, List&lt;Invoker&lt;T&gt;&gt;, LoadBalance)</span><br><span class="line">          —&gt; Filter#invoke(Invoker, Invocation)  // 包含多个 Filter 调用</span><br><span class="line">            —&gt; ListenerInvokerWrapper#invoke(Invocation) </span><br><span class="line">              —&gt; AbstractInvoker#invoke(Invocation) </span><br><span class="line">                —&gt; DubboInvoker#doInvoke(Invocation)</span><br><span class="line">                  —&gt; ReferenceCountExchangeClient#request(Object, int)</span><br><span class="line">                    —&gt; HeaderExchangeClient#request(Object, int)</span><br><span class="line">                      —&gt; HeaderExchangeChannel#request(Object, int)</span><br><span class="line">                        —&gt; AbstractPeer#send(Object)</span><br><span class="line">                          —&gt; AbstractClient#send(Object, boolean)</span><br><span class="line">                            —&gt; NettyChannel#send(Object, boolean)</span><br><span class="line">                              —&gt; NioClientSocketChannel#write(Object)</span><br></pre></td></tr></table></figure><p>在 Netty 中，出站数据在发出之前还需要进行编码操作，接下来我们来分析一下请求数据的编码逻辑。</p><h4 id="2-2-2-请求编码"><a href="#2-2-2-请求编码" class="headerlink" title="2.2.2 请求编码"></a>2.2.2 请求编码</h4><p>在分析请求编码逻辑之前，我们先来看一下 Dubbo 数据包结构。</p><p>Dubbo 数据包分为消息头和消息体，消息头用于存储一些元信息，比如魔数（Magic），数据包类型（Request&#x2F;Response），消息体长度（Data Length）等。消息体中用于存储具体的调用消息，比如方法名称，参数列表等。下面简单列举一下消息头的内容。</p><table><thead><tr><th align="center">偏移量(Bit)</th><th align="center">字段</th><th align="center">取值</th></tr></thead><tbody><tr><td align="center">0 ~ 7</td><td align="center">魔数高位</td><td align="center">0xda00</td></tr><tr><td align="center">8 ~ 15</td><td align="center">魔数低位</td><td align="center">0xbb</td></tr><tr><td align="center">16</td><td align="center">数据包类型</td><td align="center">0 – Response, 1 – Request</td></tr><tr><td align="center">17</td><td align="center">调用方式</td><td align="center">仅在第16位被设为1的情况下有效，0 – 单向调用，1 – 双向调用</td></tr><tr><td align="center">18</td><td align="center">事件标识</td><td align="center">0 – 当前数据包是请求或响应包，1 – 当前数据包是心跳包</td></tr><tr><td align="center">19 ~ 23</td><td align="center">序列化器编号</td><td align="center">2 – Hessian2Serialization 3 – JavaSerialization 4 – CompactedJavaSerialization 6 – FastJsonSerialization 7 – NativeJavaSerialization 8 – KryoSerialization 9 – FstSerialization</td></tr><tr><td align="center">24 ~ 31</td><td align="center">状态</td><td align="center">20 – OK 30 – CLIENT_TIMEOUT 31 – SERVER_TIMEOUT 40 – BAD_REQUEST 50 – BAD_RESPONSE …</td></tr><tr><td align="center">32 ~ 95</td><td align="center">请求编号</td><td align="center">共8字节，运行时生成</td></tr><tr><td align="center">96 ~ 127</td><td align="center">消息体长度</td><td align="center">运行时计算</td></tr></tbody></table><p>了解了 Dubbo 数据包格式，接下来我们就可以探索编码过程了。这次我们开门见山，直接分析编码逻辑所在类。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">extends</span> <span class="title class_">TelnetCodec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息头长度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HEADER_LENGTH</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 魔数内容</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">short</span> <span class="variable">MAGIC</span> <span class="operator">=</span> (<span class="type">short</span>) <span class="number">0xdabb</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">MAGIC_HIGH</span> <span class="operator">=</span> Bytes.short2bytes(MAGIC)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">MAGIC_LOW</span> <span class="operator">=</span> Bytes.short2bytes(MAGIC)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FLAG_REQUEST</span> <span class="operator">=</span> (<span class="type">byte</span>) <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FLAG_TWOWAY</span> <span class="operator">=</span> (<span class="type">byte</span>) <span class="number">0x40</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">FLAG_EVENT</span> <span class="operator">=</span> (<span class="type">byte</span>) <span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERIALIZATION_MASK</span> <span class="operator">=</span> <span class="number">0x1f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ExchangeCodec.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Short <span class="title function_">getMagicCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MAGIC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="comment">// 对 Request 对象进行编码</span></span><br><span class="line">            encodeRequest(channel, buffer, (Request) msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="comment">// 对 Response 对象进行编码，后面分析</span></span><br><span class="line">            encodeResponse(channel, buffer, (Response) msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.encode(channel, buffer, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encodeRequest</span><span class="params">(Channel channel, ChannelBuffer buffer, Request req)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Serialization</span> <span class="variable">serialization</span> <span class="operator">=</span> getSerialization(channel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消息头字节数组，长度为 16</span></span><br><span class="line">        <span class="type">byte</span>[] header = <span class="keyword">new</span> <span class="title class_">byte</span>[HEADER_LENGTH];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置魔数</span></span><br><span class="line">        Bytes.short2bytes(MAGIC, header);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据包类型（Request/Response）和序列化器编号</span></span><br><span class="line">        header[<span class="number">2</span>] = (<span class="type">byte</span>) (FLAG_REQUEST | serialization.getContentTypeId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置通信方式(单向/双向)</span></span><br><span class="line">        <span class="keyword">if</span> (req.isTwoWay()) &#123;</span><br><span class="line">            header[<span class="number">2</span>] |= FLAG_TWOWAY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置事件标识</span></span><br><span class="line">        <span class="keyword">if</span> (req.isEvent()) &#123;</span><br><span class="line">            header[<span class="number">2</span>] |= FLAG_EVENT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求编号，8个字节，从第4个字节开始设置</span></span><br><span class="line">        Bytes.long2bytes(req.getId(), header, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 buffer 当前的写位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">savedWriteIndex</span> <span class="operator">=</span> buffer.writerIndex();</span><br><span class="line">        <span class="comment">// 更新 writerIndex，为消息头预留 16 个字节的空间</span></span><br><span class="line">        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class="line">        <span class="type">ChannelBufferOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelBufferOutputStream</span>(buffer);</span><br><span class="line">        <span class="comment">// 创建序列化器，比如 Hessian2ObjectOutput</span></span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">out</span> <span class="operator">=</span> serialization.serialize(channel.getUrl(), bos);</span><br><span class="line">        <span class="keyword">if</span> (req.isEvent()) &#123;</span><br><span class="line">            <span class="comment">// 对事件数据进行序列化操作</span></span><br><span class="line">            encodeEventData(channel, out, req.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对请求数据进行序列化操作</span></span><br><span class="line">            encodeRequestData(channel, out, req.getData(), req.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">        out.flushBuffer();</span><br><span class="line">        <span class="keyword">if</span> (out <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">            ((Cleanable) out).cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        bos.flush();</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取写入的字节数，也就是消息体长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bos.writtenBytes();</span><br><span class="line">        checkPayload(channel, len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将消息体长度写入到消息头中</span></span><br><span class="line">        Bytes.int2bytes(len, header, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 buffer 指针移动到 savedWriteIndex，为写消息头做准备</span></span><br><span class="line">        buffer.writerIndex(savedWriteIndex);</span><br><span class="line">        <span class="comment">// 从 savedWriteIndex 下标处写入消息头</span></span><br><span class="line">        buffer.writeBytes(header);</span><br><span class="line">        <span class="comment">// 设置新的 writerIndex，writerIndex = 原写下标 + 消息头长度 + 消息体长度</span></span><br><span class="line">        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是请求对象的编码过程，该过程首先会通过位运算将消息头写入到 header 数组中。然后对 Request 对象的 data 字段执行序列化操作，序列化后的数据最终会存储到 ChannelBuffer 中。序列化操作执行完后，可得到数据序列化后的长度 len，紧接着将 len 写入到 header 指定位置处。最后再将消息头字节数组 header 写入到 ChannelBuffer 中，整个编码过程就结束了。本节的最后，我们再来看一下 Request 对象的 data 字段序列化过程，也就是 encodeRequestData 方法的逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboCodec</span> <span class="keyword">extends</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encodeRequestData</span><span class="params">(Channel channel, ObjectOutput out, Object data, String version)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RpcInvocation</span> <span class="variable">inv</span> <span class="operator">=</span> (RpcInvocation) data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依次序列化 dubbo version、path、version</span></span><br><span class="line">        out.writeUTF(version);</span><br><span class="line">        out.writeUTF(inv.getAttachment(Constants.PATH_KEY));</span><br><span class="line">        out.writeUTF(inv.getAttachment(Constants.VERSION_KEY));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化调用方法名</span></span><br><span class="line">        out.writeUTF(inv.getMethodName());</span><br><span class="line">        <span class="comment">// 将参数类型转换为字符串，并进行序列化</span></span><br><span class="line">        out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));</span><br><span class="line">        Object[] args = inv.getArguments();</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 对运行时参数进行序列化</span></span><br><span class="line">                out.writeObject(encodeInvocationArgument(channel, inv, i));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化 attachments</span></span><br><span class="line">        out.writeObject(inv.getAttachments());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，关于服务消费方发送请求的过程就分析完了，接下来我们来看一下服务提供方是如何接收请求的。</p><h3 id="2-3-服务提供方接收请求"><a href="#2-3-服务提供方接收请求" class="headerlink" title="2.3 服务提供方接收请求"></a>2.3 服务提供方接收请求</h3><p>前面说过，默认情况下 Dubbo 使用 Netty 作为底层的通信框架。Netty 检测到有数据入站后，首先会通过解码器对数据进行解码，并将解码后的数据传递给下一个入站处理器的指定方法。所以在进行后续的分析之前，我们先来看一下数据解码过程。</p><h4 id="2-3-1-请求解码"><a href="#2-3-1-请求解码" class="headerlink" title="2.3.1 请求解码"></a>2.3.1 请求解码</h4><p>这里直接分析请求数据的解码逻辑，忽略中间过程，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">extends</span> <span class="title class_">TelnetCodec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">decode</span><span class="params">(Channel channel, ChannelBuffer buffer)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readable</span> <span class="operator">=</span> buffer.readableBytes();</span><br><span class="line">        <span class="comment">// 创建消息头字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] header = <span class="keyword">new</span> <span class="title class_">byte</span>[Math.min(readable, HEADER_LENGTH)];</span><br><span class="line">        <span class="comment">// 读取消息头数据</span></span><br><span class="line">        buffer.readBytes(header);</span><br><span class="line">        <span class="comment">// 调用重载方法进行后续解码工作</span></span><br><span class="line">        <span class="keyword">return</span> decode(channel, buffer, readable, header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">decode</span><span class="params">(Channel channel, ChannelBuffer buffer, <span class="type">int</span> readable, <span class="type">byte</span>[] header)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 检查魔数是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (readable &gt; <span class="number">0</span> &amp;&amp; header[<span class="number">0</span>] != MAGIC_HIGH</span><br><span class="line">                || readable &gt; <span class="number">1</span> &amp;&amp; header[<span class="number">1</span>] != MAGIC_LOW) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> header.length;</span><br><span class="line">            <span class="keyword">if</span> (header.length &lt; readable) &#123;</span><br><span class="line">                header = Bytes.copyOf(header, readable);</span><br><span class="line">                buffer.readBytes(header, length, readable - length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; header.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (header[i] == MAGIC_HIGH &amp;&amp; header[i + <span class="number">1</span>] == MAGIC_LOW) &#123;</span><br><span class="line">                    buffer.readerIndex(buffer.readerIndex() - header.length + i);</span><br><span class="line">                    header = Bytes.copyOf(header, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过 telnet 命令行发送的数据包不包含消息头，所以这里</span></span><br><span class="line">            <span class="comment">// 调用 TelnetCodec 的 decode 方法对数据包进行解码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.decode(channel, buffer, readable, header);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测可读数据量是否少于消息头长度，若小于则立即返回 DecodeResult.NEED_MORE_INPUT</span></span><br><span class="line">        <span class="keyword">if</span> (readable &lt; HEADER_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从消息头中获取消息体长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Bytes.bytes2int(header, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">// 检测消息体长度是否超出限制，超出则抛出异常</span></span><br><span class="line">        checkPayload(channel, len);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">tt</span> <span class="operator">=</span> len + HEADER_LENGTH;</span><br><span class="line">        <span class="comment">// 检测可读的字节数是否小于实际的字节数</span></span><br><span class="line">        <span class="keyword">if</span> (readable &lt; tt) &#123;</span><br><span class="line">            <span class="keyword">return</span> DecodeResult.NEED_MORE_INPUT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChannelBufferInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelBufferInputStream</span>(buffer, len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 继续进行解码工作</span></span><br><span class="line">            <span class="keyword">return</span> decodeBody(channel, is, header);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    StreamUtils.skipUnusedStream(is);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法通过检测消息头中的魔数是否与规定的魔数相等，提前拦截掉非常规数据包，比如通过 telnet 命令行发出的数据包。接着再对消息体长度，以及可读字节数进行检测。最后调用 decodeBody 方法进行后续的解码工作，ExchangeCodec 中实现了 decodeBody 方法，但因其子类 DubboCodec 覆写了该方法，所以在运行时 DubboCodec 中的 decodeBody 方法会被调用。下面我们来看一下该方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboCodec</span> <span class="keyword">extends</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">decodeBody</span><span class="params">(Channel channel, InputStream is, <span class="type">byte</span>[] header)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取消息头中的第三个字节，并通过逻辑与运算得到序列化器编号</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">flag</span> <span class="operator">=</span> header[<span class="number">2</span>], proto = (<span class="type">byte</span>) (flag &amp; SERIALIZATION_MASK);</span><br><span class="line">        <span class="type">Serialization</span> <span class="variable">s</span> <span class="operator">=</span> CodecSupport.getSerialization(channel.getUrl(), proto);</span><br><span class="line">        <span class="comment">// 获取调用编号</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Bytes.bytes2long(header, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 通过逻辑与运算得到调用类型，0 - Response，1 - Request</span></span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; FLAG_REQUEST) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 对响应结果进行解码，得到 Response 对象。这个非本节内容，后面再分析</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 Request 对象</span></span><br><span class="line">            <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(id);</span><br><span class="line">            req.setVersion(Version.getProtocolVersion());</span><br><span class="line">            <span class="comment">// 通过逻辑与运算得到通信方式，并设置到 Request 对象中</span></span><br><span class="line">            req.setTwoWay((flag &amp; FLAG_TWOWAY) != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过位运算检测数据包是否为事件类型</span></span><br><span class="line">            <span class="keyword">if</span> ((flag &amp; FLAG_EVENT) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 设置心跳事件到 Request 对象中</span></span><br><span class="line">                req.setEvent(Request.HEARTBEAT_EVENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object data;</span><br><span class="line">                <span class="keyword">if</span> (req.isHeartbeat()) &#123;</span><br><span class="line">                    <span class="comment">// 对心跳包进行解码，该方法已被标注为废弃</span></span><br><span class="line">                    data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.isEvent()) &#123;</span><br><span class="line">                    <span class="comment">// 对事件数据进行解码</span></span><br><span class="line">                    data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    DecodeableRpcInvocation inv;</span><br><span class="line">                    <span class="comment">// 根据 url 参数判断是否在 IO 线程上对消息体进行解码</span></span><br><span class="line">                    <span class="keyword">if</span> (channel.getUrl().getParameter(</span><br><span class="line">                            Constants.DECODE_IN_IO_THREAD_KEY,</span><br><span class="line">                            Constants.DEFAULT_DECODE_IN_IO_THREAD)) &#123;</span><br><span class="line">                        inv = <span class="keyword">new</span> <span class="title class_">DecodeableRpcInvocation</span>(channel, req, is, proto);</span><br><span class="line">                        <span class="comment">// 在当前线程，也就是 IO 线程上进行后续的解码工作。此工作完成后，可将</span></span><br><span class="line">                        <span class="comment">// 调用方法名、attachment、以及调用参数解析出来</span></span><br><span class="line">                        inv.decode();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 仅创建 DecodeableRpcInvocation 对象，但不在当前线程上执行解码逻辑</span></span><br><span class="line">                        inv = <span class="keyword">new</span> <span class="title class_">DecodeableRpcInvocation</span>(channel, req,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">UnsafeByteArrayInputStream</span>(readMessageData(is)), proto);</span><br><span class="line">                    &#125;</span><br><span class="line">                    data = inv;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置 data 到 Request 对象中</span></span><br><span class="line">                req.setData(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="comment">// 若解码过程中出现异常，则将 broken 字段设为 true，</span></span><br><span class="line">                <span class="comment">// 并将异常对象设置到 Reqeust 对象中</span></span><br><span class="line">                req.setBroken(<span class="literal">true</span>);</span><br><span class="line">                req.setData(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> req;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，decodeBody 对部分字段进行了解码，并将解码得到的字段封装到 Request 中。随后会调用 DecodeableRpcInvocation 的 decode 方法进行后续的解码工作。此工作完成后，可将调用方法名、attachment、以及运行时调用参数解析出来。下面我们来看一下 DecodeableRpcInvocation 的 decode 方法逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeableRpcInvocation</span> <span class="keyword">extends</span> <span class="title class_">RpcInvocation</span> <span class="keyword">implements</span> <span class="title class_">Codec</span>, Decodeable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">decode</span><span class="params">(Channel channel, InputStream input)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectInput</span> <span class="variable">in</span> <span class="operator">=</span> CodecSupport.getSerialization(channel.getUrl(), serializationType)</span><br><span class="line">                .deserialize(channel.getUrl(), input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化得到 dubbo version，并保存到 attachments 变量中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dubboVersion</span> <span class="operator">=</span> in.readUTF();</span><br><span class="line">        request.setVersion(dubboVersion);</span><br><span class="line">        setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化得到 path，version，并保存到 attachments 变量中</span></span><br><span class="line">        setAttachment(Constants.PATH_KEY, in.readUTF());</span><br><span class="line">        setAttachment(Constants.VERSION_KEY, in.readUTF());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反序列化得到调用方法名</span></span><br><span class="line">        setMethodName(in.readUTF());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] args;</span><br><span class="line">            Class&lt;?&gt;[] pts;</span><br><span class="line">            <span class="comment">// 通过反序列化得到参数类型字符串，比如 Ljava/lang/String;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> in.readUTF();</span><br><span class="line">            <span class="keyword">if</span> (desc.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                pts = DubboCodec.EMPTY_CLASS_ARRAY;</span><br><span class="line">                args = DubboCodec.EMPTY_OBJECT_ARRAY;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 将 desc 解析为参数类型数组</span></span><br><span class="line">                pts = ReflectUtils.desc2classArray(desc);</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">Object</span>[pts.length];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 解析运行时参数</span></span><br><span class="line">                        args[i] = in.readObject(pts[i]);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;Decode argument failed: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置参数类型数组</span></span><br><span class="line">            setParameterTypes(pts);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反序列化得到原 attachments 的内容</span></span><br><span class="line">            Map&lt;String, String&gt; map = (Map&lt;String, String&gt;) in.readObject(Map.class);</span><br><span class="line">            <span class="keyword">if</span> (map != <span class="literal">null</span> &amp;&amp; map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Map&lt;String, String&gt; attachment = getAttachments();</span><br><span class="line">                <span class="keyword">if</span> (attachment == <span class="literal">null</span>) &#123;</span><br><span class="line">                    attachment = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 map 与当前对象中的 attachment 集合进行融合</span></span><br><span class="line">                attachment.putAll(map);</span><br><span class="line">                setAttachments(attachment);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对 callback 类型的参数进行处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                args[i] = decodeInvocationArgument(channel, <span class="built_in">this</span>, pts, i, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置参数列表</span></span><br><span class="line">            setArguments(args);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(StringUtils.toString(<span class="string">&quot;Read invocation data failed.&quot;</span>, e));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">                ((Cleanable) in).cleanup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法通过反序列化将诸如 path、version、调用方法名、参数列表等信息依次解析出来，并设置到相应的字段中，最终得到一个具有完整调用信息的 DecodeableRpcInvocation 对象。</p><p>到这里，请求数据解码的过程就分析完了。此时我们得到了一个 Request 对象，这个对象会被传送到下一个入站处理器中，我们继续往下看。</p><h4 id="2-3-2-调用服务"><a href="#2-3-2-调用服务" class="headerlink" title="2.3.2 调用服务"></a>2.3.2 调用服务</h4><p>解码器将数据包解析成 Request 对象后，NettyHandler 的 messageReceived 方法紧接着会收到这个对象，并将这个对象继续向下传递。这期间该对象会被依次传递给 NettyServer、MultiMessageHandler、HeartbeatHandler 以及 AllChannelHandler。最后由 AllChannelHandler 将该对象封装到 Runnable 实现类对象中，并将 Runnable 放入线程池中执行后续的调用逻辑。整个调用栈如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)</span><br><span class="line">  —&gt; AbstractPeer#received(Channel, Object)</span><br><span class="line">    —&gt; MultiMessageHandler#received(Channel, Object)</span><br><span class="line">      —&gt; HeartbeatHandler#received(Channel, Object)</span><br><span class="line">        —&gt; AllChannelHandler#received(Channel, Object)</span><br><span class="line">          —&gt; ExecutorService#execute(Runnable)    // 由线程池执行后续的调用逻辑</span><br></pre></td></tr></table></figure><p>考虑到篇幅，以及很多中间调用的逻辑并非十分重要，所以这里就不对调用栈中的每个方法都进行分析了。这里我们直接分析调用栈中的分析第一个和最后一个调用方法逻辑。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Channel&gt; channels = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Channel&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyHandler</span><span class="params">(URL url, ChannelHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里的 handler 类型为 NettyServer</span></span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageReceived</span><span class="params">(ChannelHandlerContext ctx, MessageEvent e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取 NettyChannel</span></span><br><span class="line">        <span class="type">NettyChannel</span> <span class="variable">channel</span> <span class="operator">=</span> NettyChannel.getOrAddChannel(ctx.getChannel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 继续向下调用</span></span><br><span class="line">            handler.received(channel, e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.getChannel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，NettyHandler 中的 messageReceived 逻辑比较简单。首先根据一些信息获取 NettyChannel 实例，然后将 NettyChannel 实例以及 Request 对象向下传递。下面再来看看 AllChannelHandler 的逻辑，在详细分析代码之前，我们先来了解一下 Dubbo 中的线程派发模型。</p><h5 id="2-3-2-1-线程派发模型"><a href="#2-3-2-1-线程派发模型" class="headerlink" title="2.3.2.1 线程派发模型"></a>2.3.2.1 线程派发模型</h5><p>Dubbo 将底层通信框架中接收请求的线程称为 IO 线程。如果一些事件处理逻辑可以很快执行完，比如只在内存打一个标记，此时直接在 IO 线程上执行该段逻辑即可。但如果事件的处理逻辑比较耗时，比如该段逻辑会发起数据库查询或者 HTTP 请求。此时我们就不应该让事件处理逻辑在 IO 线程上执行，而是应该派发到线程池中去执行。原因也很简单，IO 线程主要用于接收请求，如果 IO 线程被占满，将导致它不能接收新的请求。</p><p> Dispatcher 就是线程派发器。需要说明的是，Dispatcher 真实的职责创建具有线程派发能力的 ChannelHandler，比如 AllChannelHandler、MessageOnlyChannelHandler 和 ExecutionChannelHandler 等，其本身并不具备线程派发能力。Dubbo 支持 5 种不同的线程派发策略，下面通过一个表格列举一下。</p><table><thead><tr><th align="center">策略</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">all</td><td align="center">所有消息都派发到线程池，包括请求，响应，连接事件，断开事件等</td></tr><tr><td align="center">direct</td><td align="center">所有消息都不派发到线程池，全部在 IO 线程上直接执行</td></tr><tr><td align="center">message</td><td align="center">只有<strong>请求</strong>和<strong>响应</strong>消息派发到线程池，其它消息均在 IO 线程上执行</td></tr><tr><td align="center">execution</td><td align="center">只有<strong>请求</strong>消息派发到线程池，不含响应。其它消息均在 IO 线程上执行</td></tr><tr><td align="center">connection</td><td align="center">在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池</td></tr></tbody></table><p>默认配置下，Dubbo 使用 <code>all</code> 派发策略，即将所有的消息都派发到线程池中。下面我们来分析一下 AllChannelHandler 的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AllChannelHandler</span> <span class="keyword">extends</span> <span class="title class_">WrappedChannelHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AllChannelHandler</span><span class="params">(ChannelHandler handler, URL url)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理连接事件 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 获取线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">cexecutor</span> <span class="operator">=</span> getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将连接事件派发到线程池中处理</span></span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> <span class="title class_">ChannelEventRunnable</span>(channel, handler, ChannelState.CONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutionException</span>(..., <span class="string">&quot; error when process connected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理断开事件 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">cexecutor</span> <span class="operator">=</span> getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> <span class="title class_">ChannelEventRunnable</span>(channel, handler, ChannelState.DISCONNECTED));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutionException</span>(..., <span class="string">&quot;error when process disconnected event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理请求和响应消息，这里的 message 变量类型可能是 Request，也可能是 Response */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">cexecutor</span> <span class="operator">=</span> getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将请求和响应消息派发到线程池中处理</span></span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> <span class="title class_">ChannelEventRunnable</span>(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(message <span class="keyword">instanceof</span> Request &amp;&amp; t <span class="keyword">instanceof</span> RejectedExecutionException)&#123;</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)message;</span><br><span class="line">                <span class="comment">// 如果通信方式为双向通信，此时将 Server side ... threadpool is exhausted </span></span><br><span class="line">                <span class="comment">// 错误信息封装到 Response 中，并返回给服务消费方。</span></span><br><span class="line">                <span class="keyword">if</span>(request.isTwoWay())&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Server side(&quot;</span> + url.getIp() + <span class="string">&quot;,&quot;</span> + url.getPort() </span><br><span class="line">                        + <span class="string">&quot;) threadpool is exhausted ,detail msg:&quot;</span> + t.getMessage();</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(request.getId(), request.getVersion());</span><br><span class="line">                    response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);</span><br><span class="line">                    response.setErrorMessage(msg);</span><br><span class="line">                    <span class="comment">// 返回包含错误信息的 Response 对象</span></span><br><span class="line">                    channel.send(response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutionException</span>(..., <span class="string">&quot; error when process received event .&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理异常信息 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caught</span><span class="params">(Channel channel, Throwable exception)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">cexecutor</span> <span class="operator">=</span> getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cexecutor.execute(<span class="keyword">new</span> <span class="title class_">ChannelEventRunnable</span>(channel, handler, ChannelState.CAUGHT, exception));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutionException</span>(..., <span class="string">&quot;error when process caught event ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，请求对象会被封装 ChannelEventRunnable 中，ChannelEventRunnable 将会是服务调用过程的新起点。所以接下来我们以 ChannelEventRunnable 为起点向下探索。</p><h5 id="2-3-2-2-调用服务"><a href="#2-3-2-2-调用服务" class="headerlink" title="2.3.2.2 调用服务"></a>2.3.2.2 调用服务</h5><p>本小节，我们从 ChannelEventRunnable 开始分析，该类的主要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelEventRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler handler;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelState state;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Throwable exception;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 检测通道状态，对于请求或响应消息，此时 state = RECEIVED</span></span><br><span class="line">        <span class="keyword">if</span> (state == ChannelState.RECEIVED) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将 channel 和 message 传给 ChannelHandler 对象，进行后续的调用</span></span><br><span class="line">                handler.received(channel, message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;... operation error, channel is ... message is ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他消息类型通过 switch 进行处理</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> CONNECTED:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    handler.connected(channel);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;... operation error, channel is ...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DISCONNECTED:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">case</span> SENT:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">case</span> CAUGHT:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                logger.warn(<span class="string">&quot;unknown state: &quot;</span> + state + <span class="string">&quot;, message is &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，请求和响应消息出现频率明显比其他类型消息高，所以这里对该类型的消息进行了针对性判断。ChannelEventRunnable 仅是一个中转站，它的 run 方法中并不包含具体的调用逻辑，仅用于将参数传给其他 ChannelHandler 对象进行处理，该对象类型为 DecodeHandler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractChannelHandlerDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecodeHandler</span><span class="params">(ChannelHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="comment">// 对 Decodeable 接口实现类对象进行解码</span></span><br><span class="line">            decode(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            <span class="comment">// 对 Request 的 data 字段进行解码</span></span><br><span class="line">            decode(((Request) message).getData());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="comment">// 对 Request 的 result 字段进行解码</span></span><br><span class="line">            decode(((Response) message).getResult());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行后续逻辑</span></span><br><span class="line">        handler.received(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(Object message)</span> &#123;</span><br><span class="line">        <span class="comment">// Decodeable 接口目前有两个实现类，</span></span><br><span class="line">        <span class="comment">// 分别为 DecodeableRpcInvocation 和 DecodeableRpcResult</span></span><br><span class="line">        <span class="keyword">if</span> (message != <span class="literal">null</span> &amp;&amp; message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行解码逻辑</span></span><br><span class="line">                ((Decodeable) message).decode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;Call Decodeable.decode failed: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DecodeHandler 主要是包含了一些解码逻辑。2.2.1 节分析请求解码时说过，请求解码可在 IO 线程上执行，也可在线程池中执行，这个取决于运行时配置。DecodeHandler 存在的意义就是保证请求或响应对象可在线程池中被解码。解码完毕后，完全解码后的 Request 对象会继续向后传递，下一站是 HeaderExchangeHandler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderExchangeHandler</span> <span class="keyword">implements</span> <span class="title class_">ChannelHandlerDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExchangeHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderExchangeHandler</span><span class="params">(ExchangeHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());</span><br><span class="line">        <span class="type">ExchangeChannel</span> <span class="variable">exchangeChannel</span> <span class="operator">=</span> HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理请求对象</span></span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) message;</span><br><span class="line">                <span class="keyword">if</span> (request.isEvent()) &#123;</span><br><span class="line">                    <span class="comment">// 处理事件</span></span><br><span class="line">                    handlerEvent(channel, request);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">// 处理普通的请求</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 双向通信</span></span><br><span class="line">                    <span class="keyword">if</span> (request.isTwoWay()) &#123;</span><br><span class="line">                        <span class="comment">// 向后调用服务，并得到调用结果</span></span><br><span class="line">                        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> handleRequest(exchangeChannel, request);</span><br><span class="line">                        <span class="comment">// 将调用结果返回给服务消费端</span></span><br><span class="line">                        channel.send(response);</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="comment">// 如果是单向通信，仅向后调用指定服务即可，无需返回调用结果</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        handler.received(exchangeChannel, request.getData());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;      </span><br><span class="line">            <span class="comment">// 处理响应对象，服务消费方会执行此处逻辑，后面分析</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">                handleResponse(channel, (Response) message);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                <span class="comment">// telnet 相关，忽略</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handler.received(exchangeChannel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            HeaderExchangeChannel.removeChannelIfDisconnected(channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Response <span class="title function_">handleRequest</span><span class="params">(ExchangeChannel channel, Request req)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(req.getId(), req.getVersion());</span><br><span class="line">        <span class="comment">// 检测请求是否合法，不合法则返回状态码为 BAD_REQUEST 的响应</span></span><br><span class="line">        <span class="keyword">if</span> (req.isBroken()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> req.getData();</span><br><span class="line"></span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="literal">null</span>)</span><br><span class="line">                msg = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">                (data <span class="keyword">instanceof</span> Throwable) msg = StringUtils.toString((Throwable) data);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                msg = data.toString();</span><br><span class="line">            res.setErrorMessage(<span class="string">&quot;Fail to decode request due to: &quot;</span> + msg);</span><br><span class="line">            <span class="comment">// 设置 BAD_REQUEST 状态</span></span><br><span class="line">            res.setStatus(Response.BAD_REQUEST);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 data 字段值，也就是 RpcInvocation 对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> req.getData();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 继续向下调用</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> handler.reply(channel, msg);</span><br><span class="line">            <span class="comment">// 设置 OK 状态码</span></span><br><span class="line">            res.setStatus(Response.OK);</span><br><span class="line">            <span class="comment">// 设置调用结果</span></span><br><span class="line">            res.setResult(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// 若调用过程出现异常，则设置 SERVICE_ERROR，表示服务端异常</span></span><br><span class="line">            res.setStatus(Response.SERVICE_ERROR);</span><br><span class="line">            res.setErrorMessage(StringUtils.toString(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，我们看到了比较清晰的请求和响应逻辑。对于双向通信，HeaderExchangeHandler 首先向后进行调用，得到调用结果。然后将调用结果封装到 Response 对象中，最后再将该对象返回给服务消费方。如果请求不合法，或者调用失败，则将错误信息封装到 Response 对象中，并返回给服务消费方。接下来我们继续向后分析，把剩余的调用过程分析完。下面分析定义在 DubboProtocol 类中的匿名类对象逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboProtocol</span> <span class="keyword">extends</span> <span class="title class_">AbstractProtocol</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;dubbo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExchangeHandler</span> <span class="variable">requestHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExchangeHandlerAdapter</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">reply</span><span class="params">(ExchangeChannel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">                <span class="type">Invocation</span> <span class="variable">inv</span> <span class="operator">=</span> (Invocation) message;</span><br><span class="line">                <span class="comment">// 获取 Invoker 实例</span></span><br><span class="line">                Invoker&lt;?&gt; invoker = getInvoker(channel, inv);</span><br><span class="line">                <span class="keyword">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class="line">                    <span class="comment">// 回调相关，忽略</span></span><br><span class="line">                &#125;</span><br><span class="line">                RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());</span><br><span class="line">                <span class="comment">// 通过 Invoker 调用具体的服务</span></span><br><span class="line">                <span class="keyword">return</span> invoker.invoke(inv);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(channel, <span class="string">&quot;Unsupported request: ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略其他方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 忽略回调和本地存根相关逻辑</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> channel.getLocalAddress().getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算 service key，格式为 groupName/serviceName:serviceVersion:port。比如：</span></span><br><span class="line">        <span class="comment">//   dubbo/com.alibaba.dubbo.demo.DemoService:1.0.0:20880</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceKey</span> <span class="operator">=</span> serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 exporterMap 查找与 serviceKey 相对应的 DubboExporter 对象，</span></span><br><span class="line">        <span class="comment">// 服务导出过程中会将 &lt;serviceKey, DubboExporter&gt; 映射关系存储到 exporterMap 集合中</span></span><br><span class="line">        DubboExporter&lt;?&gt; exporter = (DubboExporter&lt;?&gt;) exporterMap.get(serviceKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(channel, <span class="string">&quot;Not found exported service ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Invoker 对象，并返回</span></span><br><span class="line">        <span class="keyword">return</span> exporter.getInvoker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上逻辑用于获取与指定服务对应的 Invoker 实例，并通过 Invoker 的 invoke 方法调用服务逻辑。invoke 方法定义在 AbstractProxyInvoker 中，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractProxyInvoker</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Invoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用 doInvoke 执行后续的调用，并将调用结果封装到 RpcResult 中，并</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>(e.getTargetException());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Failed to invoke remote proxy method ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title function_">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，doInvoke 是一个抽象方法，这个需要由具体的 Invoker 实例实现。Invoker 实例是在运行时通过 JavassistProxyFactory 创建的，创建逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">&#x27;$&#x27;</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">        <span class="comment">// 创建匿名类对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractProxyInvoker</span>&lt;T&gt;(proxy, type, url) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Object <span class="title function_">doInvoke</span><span class="params">(T proxy, String methodName,</span></span><br><span class="line"><span class="params">                                      Class&lt;?&gt;[] parameterTypes,</span></span><br><span class="line"><span class="params">                                      Object[] arguments)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">// 调用 invokeMethod 方法进行后续的调用</span></span><br><span class="line">                <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Wrapper 是一个抽象类，其中 invokeMethod 是一个抽象方法。Dubbo 会在运行时通过 Javassist 框架为 Wrapper 生成实现类，并实现 invokeMethod 方法，该方法最终会根据调用信息调用具体的服务。以 DemoServiceImpl 为例，Javassist 为其生成的代理类如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Wrapper0 是在运行时生成的，大家可使用 Arthas 进行反编译 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper0</span> <span class="keyword">extends</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">ClassGenerator</span>.DC &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] pns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map pts;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] mns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] dmns;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class[] mts0;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invokeMethod</span><span class="params">(Object object, String string, Class[] arrclass, Object[] arrobject)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        DemoService demoService;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 类型转换</span></span><br><span class="line">            demoService = (DemoService)object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据方法名调用指定的方法</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;sayHello&quot;</span>.equals(string) &amp;&amp; arrclass.length == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> demoService.sayHello((String)arrobject[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvocationTargetException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>().append(<span class="string">&quot;Not found method \&quot;&quot;</span>).append(string).append(<span class="string">&quot;\&quot; in class com.alibaba.dubbo.demo.DemoService.&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，整个服务调用过程就分析完了。最后把调用过程贴出来，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ChannelEventRunnable#run()</span><br><span class="line">  —&gt; DecodeHandler#received(Channel, Object)</span><br><span class="line">    —&gt; HeaderExchangeHandler#received(Channel, Object)</span><br><span class="line">      —&gt; HeaderExchangeHandler#handleRequest(ExchangeChannel, Request)</span><br><span class="line">        —&gt; DubboProtocol.requestHandler#reply(ExchangeChannel, Object)</span><br><span class="line">          —&gt; Filter#invoke(Invoker, Invocation)</span><br><span class="line">            —&gt; AbstractProxyInvoker#invoke(Invocation)</span><br><span class="line">              —&gt; Wrapper#invokeMethod(Object, String, Class[], Object[])</span><br><span class="line">                —&gt; DemoServiceImpl#sayHello(String)</span><br></pre></td></tr></table></figure><h3 id="2-4-服务提供方响应请求"><a href="#2-4-服务提供方响应请求" class="headerlink" title="2.4 服务提供方响应请求"></a>2.4 服务提供方响应请求</h3><p>服务提供方调用指定服务后，会将调用结果封装到 Response 对象中，并将该对象返回给服务消费方。服务提供方也是通过 NettyChannel 的 send 方法将 Response 对象返回，这个方法在 2.2.1 节分析过，这里就不在重复分析了。本节我们仅需关注 Response 对象的编码过程即可，这里仍然省略一些中间调用，直接分析具体的编码逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">extends</span> <span class="title class_">TelnetCodec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(Channel channel, ChannelBuffer buffer, Object msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            encodeRequest(channel, buffer, (Request) msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            <span class="comment">// 对响应对象进行编码</span></span><br><span class="line">            encodeResponse(channel, buffer, (Response) msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.encode(channel, buffer, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encodeResponse</span><span class="params">(Channel channel, ChannelBuffer buffer, Response res)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">savedWriteIndex</span> <span class="operator">=</span> buffer.writerIndex();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Serialization</span> <span class="variable">serialization</span> <span class="operator">=</span> getSerialization(channel);</span><br><span class="line">            <span class="comment">// 创建消息头字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] header = <span class="keyword">new</span> <span class="title class_">byte</span>[HEADER_LENGTH];</span><br><span class="line">            <span class="comment">// 设置魔数</span></span><br><span class="line">            Bytes.short2bytes(MAGIC, header);</span><br><span class="line">            <span class="comment">// 设置序列化器编号</span></span><br><span class="line">            header[<span class="number">2</span>] = serialization.getContentTypeId();</span><br><span class="line">            <span class="keyword">if</span> (res.isHeartbeat()) header[<span class="number">2</span>] |= FLAG_EVENT;</span><br><span class="line">            <span class="comment">// 获取响应状态</span></span><br><span class="line">            <span class="type">byte</span> <span class="variable">status</span> <span class="operator">=</span> res.getStatus();</span><br><span class="line">            <span class="comment">// 设置响应状态</span></span><br><span class="line">            header[<span class="number">3</span>] = status;</span><br><span class="line">            <span class="comment">// 设置请求编号</span></span><br><span class="line">            Bytes.long2bytes(res.getId(), header, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 writerIndex，为消息头预留 16 个字节的空间</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class="line">            <span class="type">ChannelBufferOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelBufferOutputStream</span>(buffer);</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">out</span> <span class="operator">=</span> serialization.serialize(channel.getUrl(), bos);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (status == Response.OK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.isHeartbeat()) &#123;</span><br><span class="line">                    <span class="comment">// 对心跳响应结果进行序列化，已废弃</span></span><br><span class="line">                    encodeHeartbeatData(channel, out, res.getResult());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 对调用结果进行序列化</span></span><br><span class="line">                    encodeResponseData(channel, out, res.getResult(), res.getVersion());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="comment">// 对错误信息进行序列化</span></span><br><span class="line">                out.writeUTF(res.getErrorMessage())</span><br><span class="line">            &#125;;</span><br><span class="line">            out.flushBuffer();</span><br><span class="line">            <span class="keyword">if</span> (out <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">                ((Cleanable) out).cleanup();</span><br><span class="line">            &#125;</span><br><span class="line">            bos.flush();</span><br><span class="line">            bos.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取写入的字节数，也就是消息体长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bos.writtenBytes();</span><br><span class="line">            checkPayload(channel, len);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将消息体长度写入到消息头中</span></span><br><span class="line">            Bytes.int2bytes(len, header, <span class="number">12</span>);</span><br><span class="line">            <span class="comment">// 将 buffer 指针移动到 savedWriteIndex，为写消息头做准备</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex);</span><br><span class="line">            <span class="comment">// 从 savedWriteIndex 下标处写入消息头</span></span><br><span class="line">            buffer.writeBytes(header); </span><br><span class="line">            <span class="comment">// 设置新的 writerIndex，writerIndex = 原写下标 + 消息头长度 + 消息体长度</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// 异常处理逻辑不是很难理解，但是代码略多，这里忽略了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboCodec</span> <span class="keyword">extends</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encodeResponseData</span><span class="params">(Channel channel, ObjectOutput out, Object data, String version)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> (Result) data;</span><br><span class="line">        <span class="comment">// 检测当前协议版本是否支持带有 attachments 集合的 Response 对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">attach</span> <span class="operator">=</span> Version.isSupportResponseAttachment(version);</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">th</span> <span class="operator">=</span> result.getException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异常信息为空</span></span><br><span class="line">        <span class="keyword">if</span> (th == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> result.getValue();</span><br><span class="line">            <span class="comment">// 调用结果为空</span></span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 序列化响应类型</span></span><br><span class="line">                out.writeByte(attach ? RESPONSE_NULL_VALUE_WITH_ATTACHMENTS : RESPONSE_NULL_VALUE);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 调用结果非空</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 序列化响应类型</span></span><br><span class="line">                out.writeByte(attach ? RESPONSE_VALUE_WITH_ATTACHMENTS : RESPONSE_VALUE);</span><br><span class="line">                <span class="comment">// 序列化调用结果</span></span><br><span class="line">                out.writeObject(ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 异常信息非空</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化响应类型</span></span><br><span class="line">            out.writeByte(attach ? RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS : RESPONSE_WITH_EXCEPTION);</span><br><span class="line">            <span class="comment">// 序列化异常对象</span></span><br><span class="line">            out.writeObject(th);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (attach) &#123;</span><br><span class="line">            <span class="comment">// 记录 Dubbo 协议版本</span></span><br><span class="line">            result.getAttachments().put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());</span><br><span class="line">            <span class="comment">// 序列化 attachments 集合</span></span><br><span class="line">            out.writeObject(result.getAttachments());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 Response 对象编码的过程，和前面分析的 Request 对象编码过程很相似。如果大家能看 Request 对象的编码逻辑，那么这里的 Response 对象的编码逻辑也不难理解，就不多说了。接下来我们再来分析双向通信的最后一环 —— 服务消费方接收调用结果。</p><h3 id="2-5-服务消费方接收调用结果"><a href="#2-5-服务消费方接收调用结果" class="headerlink" title="2.5 服务消费方接收调用结果"></a>2.5 服务消费方接收调用结果</h3><p>服务消费方在收到响应数据后，首先要做的事情是对响应数据进行解码，得到 Response 对象。然后再将该对象传给下一个入站处理器，这个入站处理器就是 NettyHandler。接下来 NettyHandler 会将这个对象继续向下传递，最后 AllChannelHandler 的 received 方法会收到这个对象，并将这个对象派发到线程池中。这个过程和服务提供方接收请求的过程是一样的，因此这里就不重复分析了。本节我们重点分析两个方面的内容，一是响应数据的解码过程，二是 Dubbo 如何将调用结果传递给用户线程的。下面先来分析响应数据的解码过程。</p><h4 id="2-5-1-响应数据解码"><a href="#2-5-1-响应数据解码" class="headerlink" title="2.5.1 响应数据解码"></a>2.5.1 响应数据解码</h4><p>响应数据解码逻辑主要的逻辑封装在 DubboCodec 中，我们直接分析这个类的代码。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboCodec</span> <span class="keyword">extends</span> <span class="title class_">ExchangeCodec</span> <span class="keyword">implements</span> <span class="title class_">Codec2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">decodeBody</span><span class="params">(Channel channel, InputStream is, <span class="type">byte</span>[] header)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">flag</span> <span class="operator">=</span> header[<span class="number">2</span>], proto = (<span class="type">byte</span>) (flag &amp; SERIALIZATION_MASK);</span><br><span class="line">        <span class="type">Serialization</span> <span class="variable">s</span> <span class="operator">=</span> CodecSupport.getSerialization(channel.getUrl(), proto);</span><br><span class="line">        <span class="comment">// 获取请求编号</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Bytes.bytes2long(header, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 检测消息类型，若下面的条件成立，表明消息类型为 Response</span></span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; FLAG_REQUEST) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建 Response 对象</span></span><br><span class="line">            <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(id);</span><br><span class="line">            <span class="comment">// 检测事件标志位</span></span><br><span class="line">            <span class="keyword">if</span> ((flag &amp; FLAG_EVENT) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 设置心跳事件</span></span><br><span class="line">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取响应状态</span></span><br><span class="line">            <span class="type">byte</span> <span class="variable">status</span> <span class="operator">=</span> header[<span class="number">3</span>];</span><br><span class="line">            <span class="comment">// 设置响应状态</span></span><br><span class="line">            res.setStatus(status);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果响应状态为 OK，表明调用过程正常</span></span><br><span class="line">            <span class="keyword">if</span> (status == Response.OK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object data;</span><br><span class="line">                    <span class="keyword">if</span> (res.isHeartbeat()) &#123;</span><br><span class="line">                        <span class="comment">// 反序列化心跳数据，已废弃</span></span><br><span class="line">                        data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.isEvent()) &#123;</span><br><span class="line">                        <span class="comment">// 反序列化事件数据</span></span><br><span class="line">                        data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        DecodeableRpcResult result;</span><br><span class="line">                        <span class="comment">// 根据 url 参数决定是否在 IO 线程上执行解码逻辑</span></span><br><span class="line">                        <span class="keyword">if</span> (channel.getUrl().getParameter(</span><br><span class="line">                                Constants.DECODE_IN_IO_THREAD_KEY,</span><br><span class="line">                                Constants.DEFAULT_DECODE_IN_IO_THREAD)) &#123;</span><br><span class="line">                            <span class="comment">// 创建 DecodeableRpcResult 对象</span></span><br><span class="line">                            result = <span class="keyword">new</span> <span class="title class_">DecodeableRpcResult</span>(channel, res, is,</span><br><span class="line">                                    (Invocation) getRequestData(id), proto);</span><br><span class="line">                            <span class="comment">// 进行后续的解码工作</span></span><br><span class="line">                            result.decode();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 创建 DecodeableRpcResult 对象</span></span><br><span class="line">                            result = <span class="keyword">new</span> <span class="title class_">DecodeableRpcResult</span>(channel, res,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">UnsafeByteArrayInputStream</span>(readMessageData(is)),</span><br><span class="line">                                    (Invocation) getRequestData(id), proto);</span><br><span class="line">                        &#125;</span><br><span class="line">                        data = result;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置 DecodeableRpcResult 对象到 Response 对象中</span></span><br><span class="line">                    res.setResult(data);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    <span class="comment">// 解码过程中出现了错误，此时设置 CLIENT_ERROR 状态码到 Response 对象中</span></span><br><span class="line">                    res.setStatus(Response.CLIENT_ERROR);</span><br><span class="line">                    res.setErrorMessage(StringUtils.toString(t));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 响应状态非 OK，表明调用过程出现了异常</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 反序列化异常信息，并设置到 Response 对象中</span></span><br><span class="line">                res.setErrorMessage(deserialize(s, channel.getUrl(), is).readUTF());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对请求数据进行解码，前面已分析过，此处忽略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是响应数据的解码过程，上面逻辑看起来是不是似曾相识。对的，我们在前面章节分析过 DubboCodec 的 decodeBody 方法中关于请求数据的解码过程，该过程和响应数据的解码过程很相似。下面，我们继续分析调用结果的反序列化过程，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecodeableRpcResult</span> <span class="keyword">extends</span> <span class="title class_">RpcResult</span> <span class="keyword">implements</span> <span class="title class_">Codec</span>, Decodeable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Invocation invocation;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasDecoded &amp;&amp; channel != <span class="literal">null</span> &amp;&amp; inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行反序列化操作</span></span><br><span class="line">                decode(channel, inputStream);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// 反序列化失败，设置 CLIENT_ERROR 状态到 Response 对象中</span></span><br><span class="line">                response.setStatus(Response.CLIENT_ERROR);</span><br><span class="line">                <span class="comment">// 设置异常信息</span></span><br><span class="line">                response.setErrorMessage(StringUtils.toString(e));</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                hasDecoded = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">decode</span><span class="params">(Channel channel, InputStream input)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectInput</span> <span class="variable">in</span> <span class="operator">=</span> CodecSupport.getSerialization(channel.getUrl(), serializationType)</span><br><span class="line">                .deserialize(channel.getUrl(), input);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化响应类型</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">flag</span> <span class="operator">=</span> in.readByte();</span><br><span class="line">        <span class="keyword">switch</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_NULL_VALUE:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_VALUE:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_WITH_EXCEPTION:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回值为空，且携带了 attachments 集合</span></span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_NULL_VALUE_WITH_ATTACHMENTS:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 反序列化 attachments 集合，并存储起来 </span></span><br><span class="line">                    setAttachments((Map&lt;String, String&gt;) in.readObject(Map.class));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(StringUtils.toString(<span class="string">&quot;Read response data failed.&quot;</span>, e));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回值不为空，且携带了 attachments 集合</span></span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_VALUE_WITH_ATTACHMENTS:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取返回值类型</span></span><br><span class="line">                    Type[] returnType = RpcUtils.getReturnTypes(invocation);</span><br><span class="line">                    <span class="comment">// 反序列化调用结果，并保存起来</span></span><br><span class="line">                    setValue(returnType == <span class="literal">null</span> || returnType.length == <span class="number">0</span> ? in.readObject() :</span><br><span class="line">                            (returnType.length == <span class="number">1</span> ? in.readObject((Class&lt;?&gt;) returnType[<span class="number">0</span>])</span><br><span class="line">                                    : in.readObject((Class&lt;?&gt;) returnType[<span class="number">0</span>], returnType[<span class="number">1</span>])));</span><br><span class="line">                    <span class="comment">// 反序列化 attachments 集合，并存储起来</span></span><br><span class="line">                    setAttachments((Map&lt;String, String&gt;) in.readObject(Map.class));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(StringUtils.toString(<span class="string">&quot;Read response data failed.&quot;</span>, e));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异常对象不为空，且携带了 attachments 集合</span></span><br><span class="line">            <span class="keyword">case</span> DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 反序列化异常对象</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">                    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Throwable == <span class="literal">false</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Response data error, expect Throwable, but get &quot;</span> + obj);</span><br><span class="line">                    <span class="comment">// 设置异常对象</span></span><br><span class="line">                    setException((Throwable) obj);</span><br><span class="line">                    <span class="comment">// 反序列化 attachments 集合，并存储起来</span></span><br><span class="line">                    setAttachments((Map&lt;String, String&gt;) in.readObject(Map.class));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(StringUtils.toString(<span class="string">&quot;Read response data failed.&quot;</span>, e));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unknown result flag, expect &#x27;0&#x27; &#x27;1&#x27; &#x27;2&#x27;, get &quot;</span> + flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (in <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">            ((Cleanable) in).cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本篇文章所分析的源码版本为 2.6.4，该版本下的 Response 支持 attachments 集合，所以上面仅对部分 case 分支进行了注释。其他 case 分支的逻辑比被注释分支的逻辑更为简单，这里就忽略了。我们所使用的测试服务接口 DemoService 包含了一个具有返回值的方法，所以正常调用下，线程会进入 RESPONSE_VALUE_WITH_ATTACHMENTS 分支中。然后线程会从 invocation 变量（大家探索一下 invocation 变量的由来）中获取返回值类型，接着对调用结果进行反序列化，并将序列化后的结果存储起来。最后对 attachments 集合进行反序列化，并存到指定字段中。到此，关于响应数据的解码过程就分析完了。接下来，我们再来探索一下响应对象 Response 的去向。</p><h4 id="2-5-2-向用户线程传递调用结果"><a href="#2-5-2-向用户线程传递调用结果" class="headerlink" title="2.5.2 向用户线程传递调用结果"></a>2.5.2 向用户线程传递调用结果</h4><p>响应数据解码完成后，Dubbo 会将响应对象派发到线程池上。要注意的是，线程池中的线程并非用户的调用线程，所以要想办法将响应对象从线程池线程传递到用户线程上。我们在 2.1 节分析过用户线程在发送完请求后的动作，即调用 DefaultFuture 的 get 方法等待响应对象的到来。当响应对象到来后，用户线程会被唤醒，并通过<strong>调用编号</strong>获取属于自己的响应对象。下面我们就来看一下整个过程对应的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderExchangeHandler</span> <span class="keyword">implements</span> <span class="title class_">ChannelHandlerDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());</span><br><span class="line">        <span class="type">ExchangeChannel</span> <span class="variable">exchangeChannel</span> <span class="operator">=</span> HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">                <span class="comment">// 处理请求，前面已分析过，省略</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">                <span class="comment">// 处理响应</span></span><br><span class="line">                handleResponse(channel, (Response) message);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                <span class="comment">// telnet 相关，忽略</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handler.received(exchangeChannel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            HeaderExchangeChannel.removeChannelIfDisconnected(channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleResponse</span><span class="params">(Channel channel, Response response)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (response != <span class="literal">null</span> &amp;&amp; !response.isHeartbeat()) &#123;</span><br><span class="line">            <span class="comment">// 继续向下调用</span></span><br><span class="line">            DefaultFuture.received(channel, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFuture</span> <span class="keyword">implements</span> <span class="title class_">ResponseFuture</span> &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">done</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Response response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">received</span><span class="params">(Channel channel, Response response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据调用编号从 FUTURES 集合中查找指定的 DefaultFuture 对象</span></span><br><span class="line">            <span class="type">DefaultFuture</span> <span class="variable">future</span> <span class="operator">=</span> FUTURES.remove(response.getId());</span><br><span class="line">            <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 继续向下调用</span></span><br><span class="line">                future.doReceived(response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;The timeout response finally returned at ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CHANNELS.remove(response.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doReceived</span><span class="params">(Response res)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保存响应对象</span></span><br><span class="line">            response = res;</span><br><span class="line">            <span class="keyword">if</span> (done != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 唤醒用户线程</span></span><br><span class="line">                done.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            invokeCallback(callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上逻辑是将响应对象保存到相应的 DefaultFuture 实例中，然后再唤醒用户线程，随后用户线程即可从 DefaultFuture 实例中获取到相应结果。</p><p>本篇文章在多个地方都强调过调用编号很重要，但一直没有解释原因，这里简单说明一下。一般情况下，服务消费方会并发调用多个服务，每个用户线程发送请求后，会调用不同 DefaultFuture 对象的 get 方法进行等待。 一段时间后，服务消费方的线程池会收到多个响应对象。这个时候要考虑一个问题，如何将每个响应对象传递给相应的 DefaultFuture 对象，且不出错。答案是通过调用编号。DefaultFuture 被创建时，会要求传入一个 Request 对象。此时 DefaultFuture 可从 Request 对象中获取调用编号，并将 &lt;调用编号, DefaultFuture 对象&gt; 映射关系存入到静态 Map 中，即 FUTURES。线程池中的线程在收到 Response 对象后，会根据 Response 对象中的调用编号到 FUTURES 集合中取出相应的 DefaultFuture 对象，然后再将 Response 对象设置到 DefaultFuture 对象中。最后再唤醒用户线程，这样用户线程即可从 DefaultFuture 对象中获取调用结果了。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本篇文章主要对 Dubbo 中的几种服务调用方式，以及从双向通信的角度对整个通信过程进行了详细的分析。按照通信顺序，通信过程包括服务消费方发送请求，服务提供方接收请求，服务提供方返回响应数据，服务消费方接收响应数据等过程。理解这些过程需要大家对网络编程，尤其是 Netty 有一定的了解。限于篇幅原因，本篇文章无法将服务调用的所有内容都一一进行分析。对于本篇文章未讲到或未详细分析的内容，比如服务降级、过滤器链、以及序列化等。大家若感兴趣，可自行进行分析。并将分析整理成文，分享给社区。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;九、Dubbo-源码分析-–-服务调用过程&quot;&gt;&lt;a href=&quot;#九、Dubbo-源码分析-–-服务调用过程&quot; class=&quot;headerlink&quot; title=&quot;九、Dubbo 源码分析 – 服务调用过程&quot;&gt;&lt;/a&gt;九、Dubbo 源码分析 – 服务调用过程&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 集群容错之 LoadBalance</title>
    <link href="https://hexo.tryrun.top/posts/c3adb84d.html"/>
    <id>https://hexo.tryrun.top/posts/c3adb84d.html</id>
    <published>2020-09-26T14:29:54.000Z</published>
    <updated>2020-09-26T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八、Dubbo-源码分析-–-集群容错之-LoadBalance"><a href="#八、Dubbo-源码分析-–-集群容错之-LoadBalance" class="headerlink" title="八、Dubbo 源码分析 – 集群容错之 LoadBalance"></a>八、Dubbo 源码分析 – 集群容错之 LoadBalance</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>LoadBalance 中文意思为负载均衡，它的职责是将网络请求，或者其他形式的负载“均摊”到不同的机器上。避免集群中部分服务器压力过大，而另一些服务器比较空闲的情况。通过负载均衡，可以让每台服务器获取到适合自己处理能力的负载。在为高负载的服务器分流的同时，还可以避免资源浪费，一举两得。负载均衡可分为软件负载均衡和硬件负载均衡。在我们日常开发中，一般很难接触到硬件负载均衡。但软件负载均衡还是能够接触到一些的，比如 Nginx。在 Dubbo 中，也有负载均衡的概念和相应的实现。Dubbo 需要对服务消费者的调用请求进行分配，避免少数服务提供者负载过大。服务提供者负载过大，会导致部分服务调用超时。因此将负载均衡到每个服务提供者上，是非常必要的。Dubbo 提供了4种负载均衡实现，分别是基于权重随机算法的 RandomLoadBalance、基于最少活跃调用数算法的 LeastActiveLoadBalance、基于 hash 一致性的 ConsistentHashLoadBalance，以及基于加权轮询算法的 RoundRobinLoadBalance。这几个负载均衡算法代码不是很长，但是想看懂也不是很容易，需要大家对这几个算法的原理有一定了解才行。如果不是很了解，也没不用太担心。我会在分析每个算法的源码之前，对算法原理进行简单的讲解，帮助大家建立初步的印象。</p><p>我在写 Dubbo 源码分析系列文章之初，当时 Dubbo 最新的版本为 2.6.4。近期，Dubbo 2.6.5 发布了，其中就有对负载均衡部分代码修改。因此我在分析完 2.6.4 版本后的源码后，会另外分析 2.6.5 更新的部分。本篇文章内容非常之丰富，需要大家耐心阅读。好了，其他的就不多说了，进入正题吧。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h2><p>在 Dubbo 中，所有负载均衡实现类均继承自 AbstractLoadBalance，该类实现了 LoadBalance 接口方法，并封装了一些公共的逻辑。所以在分析负载均衡实现之前，先来看一下 AbstractLoadBalance 的逻辑。首先来看一下负载均衡的入口方法 select，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">select</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="literal">null</span> || invokers.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果 invokers 列表中仅有一个 Invoker，直接返回即可，无需进行负载均衡</span></span><br><span class="line">    <span class="keyword">if</span> (invokers.size() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 doSelect 方法进行负载均衡，该方法为抽象方法，由子类实现</span></span><br><span class="line">    <span class="keyword">return</span> doSelect(invokers, url, invocation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span>;</span><br></pre></td></tr></table></figure><p>select 方法的逻辑比较简单，首先会检测 invokers 集合的合法性，然后再检测 invokers 集合元素数量。如果只包含一个 Invoker，直接返回该 Inovker 即可。如果包含多个 Invoker，此时需要通过负载均衡算法选择一个 Invoker。具体的负载均衡算法由子类实现，接下来章节会对这些子类进行详细分析。</p><p>AbstractLoadBalance 除了实现了 LoadBalance 接口方法，还封装了一些公共逻辑 —— 服务提供者权重计算逻辑。具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="comment">// 从 url 中获取 weight 配置值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);</span><br><span class="line">    <span class="keyword">if</span> (weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取服务提供者启动时间戳</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> invoker.getUrl().getParameter(Constants.REMOTE_TIMESTAMP_KEY, <span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">if</span> (timestamp &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="comment">// 计算服务提供者运行时长</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">uptime</span> <span class="operator">=</span> (<span class="type">int</span>) (System.currentTimeMillis() - timestamp);</span><br><span class="line">            <span class="comment">// 获取服务预热时间，默认为10分钟</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">warmup</span> <span class="operator">=</span> invoker.getUrl().getParameter(Constants.WARMUP_KEY, Constants.DEFAULT_WARMUP);</span><br><span class="line">            <span class="comment">// 如果服务运行时间小于预热时间，则重新计算服务权重，即降权</span></span><br><span class="line">            <span class="keyword">if</span> (uptime &gt; <span class="number">0</span> &amp;&amp; uptime &lt; warmup) &#123;</span><br><span class="line">                <span class="comment">// 重新计算服务权重</span></span><br><span class="line">                weight = calculateWarmupWeight(uptime, warmup, weight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateWarmupWeight</span><span class="params">(<span class="type">int</span> uptime, <span class="type">int</span> warmup, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算权重，下面代码逻辑上形似于 (uptime / warmup) * weight。</span></span><br><span class="line">    <span class="comment">// 随着服务运行时间 uptime 增大，权重计算值 ww 会慢慢接近配置值 weight</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ww</span> <span class="operator">=</span> (<span class="type">int</span>) ((<span class="type">float</span>) uptime / ((<span class="type">float</span>) warmup / (<span class="type">float</span>) weight));</span><br><span class="line">    <span class="keyword">return</span> ww &lt; <span class="number">1</span> ? <span class="number">1</span> : (ww &gt; weight ? weight : ww);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是权重的计算过程，该过程主要用于保证当服务运行时长小于服务预热时间时，对服务进行降权，避免让服务在启动之初就处于高负载状态。服务预热是一个优化手段，与此类似的还有 JVM 预热。主要目的是让服务启动后“低功率”运行一段时间，使其效率慢慢提升至最佳状态。关于预热方面的更多知识，大家感兴趣可以自己搜索一下。</p><p>关于 AbstractLoadBalance 就先分析到这，接下来分析各个实现类的代码。首先，我们从 Dubbo 缺省的实现类 RandomLoadBalance 看起。</p><h3 id="2-1-RandomLoadBalance"><a href="#2-1-RandomLoadBalance" class="headerlink" title="2.1 RandomLoadBalance"></a>2.1 RandomLoadBalance</h3><p>RandomLoadBalance 是加权随机算法的具体实现，它的算法思想很简单。假设我们有一组服务器 servers &#x3D; [A, B, C]，他们对应的权重为 weights &#x3D; [5, 3, 2]，权重总和为10。现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。比如，经过一万次选择后，服务器 A 被选中的次数大约为5000次，服务器 B 被选中的次数约为3000次，服务器 C 被选中的次数约为2000次。</p><p>以上就是 RandomLoadBalance 背后的算法思想，比较简单，不多说了，下面开始分析源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;random&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> invokers.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">sameWeight</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 下面这个循环有两个作用，第一是计算总权重 totalWeight，</span></span><br><span class="line">        <span class="comment">// 第二是检测每个服务提供者的权重是否相同，若不相同，则将 sameWeight 置为 false</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> getWeight(invokers.get(i), invocation);</span><br><span class="line">            <span class="comment">// 累加权重</span></span><br><span class="line">            totalWeight += weight;</span><br><span class="line">            <span class="comment">// 检测当前服务提供者的权重与上一个服务提供者的权重是否相同，</span></span><br><span class="line">            <span class="comment">// 不相同的话，则将 sameWeight 置为 false。</span></span><br><span class="line">            <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class="number">1</span>), invocation)) &#123;</span><br><span class="line">                sameWeight = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面的 if 分支主要用于获取随机数，并计算随机数落在哪个区间上</span></span><br><span class="line">        <span class="keyword">if</span> (totalWeight &gt; <span class="number">0</span> &amp;&amp; !sameWeight) &#123;</span><br><span class="line">            <span class="comment">// 随机获取一个 [0, totalWeight) 之间的数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// 循环让 offset 数减去服务提供者权重值，当 offset 小于0时，返回相应的 Invoker。</span></span><br><span class="line">            <span class="comment">// 还是用上面的例子进行说明，servers = [A, B, C]，weights = [5, 3, 2]，offset = 7。</span></span><br><span class="line">            <span class="comment">// 第一次循环，offset - 5 = 2 &gt; 0，说明 offset 肯定不会落在服务器 A 对应的区间上。</span></span><br><span class="line">            <span class="comment">// 第二次循环，offset - 3 = -1 &lt; 0，表明 offset 落在服务器 B 对应的区间上</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="comment">// 让随机值 offset 减去权重值</span></span><br><span class="line">                offset -= getWeight(invokers.get(i), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 返回相应的 Invoker</span></span><br><span class="line">                    <span class="keyword">return</span> invokers.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果所有服务提供者权重值相同，此时直接随机返回一个即可</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(random.nextInt(length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomLoadBalance 的算法思想比较简单，在经过多次请求后，能够将调用请求按照权重值进行“均匀”分配。当然 RandomLoadBalance 也存在一定的缺点，当调用次数比较少时，Random 产生的随机数可能会比较集中，此时多数请求会落到同一台服务器上。这个缺点并不是很严重，多数情况下可以忽略。RandomLoadBalance 是一个简单，高效的负载均衡实现，因此 Dubbo 选择它作为缺省实现。</p><p>关于 RandomLoadBalance 就先到这了，接下来分析 LeastActiveLoadBalance。</p><h3 id="2-2-LeastActiveLoadBalance"><a href="#2-2-LeastActiveLoadBalance" class="headerlink" title="2.2 LeastActiveLoadBalance"></a>2.2 LeastActiveLoadBalance</h3><p>LeastActiveLoadBalance 翻译过来是最小活跃数负载均衡，所谓的最小活跃数可理解为最少连接数。即服务提供者目前正在处理的请求数（一个请求对应一条连接）最少，表明该服务提供者效率高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快。此时这样的服务提供者能够优先获取到新的服务请求，这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。举个例子说明一下，在一个服务提供者集群中，有两个性能优异的服务提供者。某一时刻它们的活跃数相同，此时 Dubbo 会根据它们的权重去分配请求，权重越大，获取到新请求的可能性就越大。如果两个服务提供者权重相同，此时随机选择一个即可。关于 LeastActiveLoadBalance 的背景知识就先介绍到这里，下面开始分析源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeastActiveLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;leastactive&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> invokers.size();</span><br><span class="line">        <span class="comment">// 最小的活跃数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leastActive</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 具有相同“最小活跃数”的服务者提供者（以下用 Invoker 代称）数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leastCount</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="comment">// leastIndexs 用于记录具有相同“最小活跃数”的 Invoker 在 invokers 列表中的下标信息</span></span><br><span class="line">        <span class="type">int</span>[] leastIndexs = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一个最小活跃数的 Invoker 权重值，用于与其他具有相同最小活跃数的 Invoker 的权重进行对比，</span></span><br><span class="line">        <span class="comment">// 以检测是否所有具有相同最小活跃数的 Invoker 的权重均相等</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">firstWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">sameWeight</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 invokers 列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Invoker&lt;T&gt; invoker = invokers.get(i);</span><br><span class="line">            <span class="comment">// 获取 Invoker 对应的活跃数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">active</span> <span class="operator">=</span> RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();</span><br><span class="line">            <span class="comment">// 获取权重 - ⭐️</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);</span><br><span class="line">            <span class="comment">// 发现更小的活跃数，重新开始</span></span><br><span class="line">            <span class="keyword">if</span> (leastActive == -<span class="number">1</span> || active &lt; leastActive) &#123;</span><br><span class="line">                <span class="comment">// 使用当前活跃数 active 更新最小活跃数 leastActive</span></span><br><span class="line">                leastActive = active;</span><br><span class="line">                <span class="comment">// 更新 leastCount 为 1</span></span><br><span class="line">                leastCount = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 记录当前下标值到 leastIndexs 中</span></span><br><span class="line">                leastIndexs[<span class="number">0</span>] = i;</span><br><span class="line">                totalWeight = weight;</span><br><span class="line">                firstWeight = weight;</span><br><span class="line">                sameWeight = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前 Invoker 的活跃数 active 与最小活跃数 leastActive 相同 </span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (active == leastActive) &#123;</span><br><span class="line">                <span class="comment">// 在 leastIndexs 中记录下当前 Invoker 在 invokers 集合中的下标</span></span><br><span class="line">                leastIndexs[leastCount++] = i;</span><br><span class="line">                <span class="comment">// 累加权重</span></span><br><span class="line">                totalWeight += weight;</span><br><span class="line">                <span class="comment">// 检测当前 Invoker 的权重与 firstWeight 是否相等，</span></span><br><span class="line">                <span class="comment">// 不相等则将 sameWeight 置为 false</span></span><br><span class="line">                <span class="keyword">if</span> (sameWeight &amp;&amp; i &gt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; weight != firstWeight) &#123;</span><br><span class="line">                    sameWeight = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当只有一个 Invoker 具有最小活跃数，此时直接返回该 Invoker 即可</span></span><br><span class="line">        <span class="keyword">if</span> (leastCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokers.get(leastIndexs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有多个 Invoker 具有相同的最小活跃数，但他们的权重不同</span></span><br><span class="line">        <span class="keyword">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 随机获取一个 [0, totalWeight) 之间的数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">offsetWeight</span> <span class="operator">=</span> random.nextInt(totalWeight);</span><br><span class="line">            <span class="comment">// 循环让随机数减去具有最小活跃数的 Invoker 的权重值，</span></span><br><span class="line">            <span class="comment">// 当 offset 小于等于0时，返回相应的 Invoker</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">leastIndex</span> <span class="operator">=</span> leastIndexs[i];</span><br><span class="line">                <span class="comment">// 获取权重值，并让随机数减去权重值 - ⭐️</span></span><br><span class="line">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class="line">                <span class="keyword">if</span> (offsetWeight &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> invokers.get(leastIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果权重相同或权重为0时，随机返回一个 Invoker</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，为了帮助大家理解代码，我在上面的代码中写了大量的注释。下面简单总结一下以上代码所做的事情，如下：</p><ol><li>遍历 invokers 列表，寻找活跃数最小的 Invoker</li><li>如果有多个 Invoker 具有相同的最小活跃数，此时记录下这些 Invoker 在 invokers 集合中的下标，以及累加它们的权重，比较它们之间的权重值是否相等</li><li>如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可</li><li>如果有多个 Invoker 具有最小活跃数，且它们的权重不相等，此时处理方式和 RandomLoadBalance 一致</li><li>如果有多个 Invoker 具有最小活跃数，但它们的权重相等，此时随机返回一个即可</li></ol><p>以上就是 LeastActiveLoadBalance 大致的实现逻辑，大家在阅读的源码的过程中要注意区分活跃数与权重这两个概念，不要混为一谈。</p><p>以上分析是基于 Dubbo 2.6.4 版本进行了，由于近期 Dubbo 2.6.5 发布了，对负载均衡部分的代码进行了一些更新。这其中就包含了本节分析的 LeastActiveLoadBalance，所以下面简单说明一下 Dubbo 2.6.5 对 LeastActiveLoadBalance 进行了怎样的修改。回到上面的源码中，我在上面的代码中标注了两个黄色的五角星⭐️。两处标记对应的代码分别如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);</span><br><span class="line">offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br></pre></td></tr></table></figure><p>问题出在服务预热阶段，第一行代码直接从 url 中去权重值，未被降权过。第二行代码获取到的是经过降权后的权重。第一行代码获取到的权重值最终会被累加到权重总和 totalWeight 中，这个时候会导致一个问题。offsetWeight 是一个在 [0, totalWeight) 范围内的随机数，而它所减去的是经过降权的权重。很有可能在经过 leastCount 次运算后，offsetWeight 仍然是大于0的，导致无法选中 Invoker。这个问题对应的 issue 为 <a href="https://github.com/apache/incubator-dubbo/issues/904">#904</a>，在 pull request <a href="https://github.com/apache/incubator-dubbo/pull/2172">#2172</a> 中被修复。具体的修复逻辑是将标注一处的代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// afterWarmup 等价于上面的 weight 变量，这样命名是为了强调该变量经过 warmup 降权处理了</span></span><br><span class="line"><span class="type">int</span> <span class="variable">afterWarmup</span> <span class="operator">=</span> getWeight(invoker, invocation);</span><br></pre></td></tr></table></figure><p>另外，2.6.4 版本中的 LeastActiveLoadBalance 还要一个缺陷，即当一组 Invoker 具有相同的最小活跃数，且其中一个 Invoker 的权重值为1，此时这个 Invoker 无法被选中。缺陷代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">offsetWeight</span> <span class="operator">=</span> random.nextInt(totalWeight);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; leastCount; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leastIndex</span> <span class="operator">=</span> leastIndexs[i];</span><br><span class="line">    offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</span><br><span class="line">    <span class="keyword">if</span> (offsetWeight &lt;= <span class="number">0</span>)    <span class="comment">// ❌</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(leastIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题就出在了<code>offsetWeight &lt;= 0</code>上，举例说明，假设有一组 Invoker 的权重为 5、2、1，offsetWeight 最大值为 7。假设 offsetWeight &#x3D; 7，你会发现，当 for 循环进行第二次遍历后 offsetWeight &#x3D; 7 – 5 – 2 &#x3D; 0，提前返回了。此时，权重为1的 Invoker 就没有机会被选中。这个修改起来也不难，可以将 <code>offsetWeight &lt; 0</code>，不过 Dubbo 的是将<code>offsetWeight + 1</code>，也就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">offsetWeight</span> <span class="operator">=</span> random.nextInt(totalWeight) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>两种改动都行，不过我认为觉得第一种方式更好一点，可与 RandomLoadBalance 逻辑保持一致。这里+1有点突兀，大家读到这里要特地思考一下为什么要+1。</p><p>以上就是 Dubob 2.6.5 对 LeastActiveLoadBalance 的更新，不是很难理解，就不多说了。接下来分析基于一致性 hash 思想的 ConsistentHashLoadBalance。</p><h3 id="2-3-ConsistentHashLoadBalance"><a href="#2-3-ConsistentHashLoadBalance" class="headerlink" title="2.3 ConsistentHashLoadBalance"></a>2.3 ConsistentHashLoadBalance</h3><p>一致性 hash 算法由麻省理工学院的 Karger 及其合作者于1997年提供出的，算法提出之初是用于大规模缓存系统的负载均衡。它的工作过程是这样的，首先根据 ip 获取其他的信息为缓存节点生成一个 hash，并将这个 hash 投射到 [0, 232 – 1] 的圆环上。当有查询或写入请求时，则为缓存项的 key 生成一个 hash 值。然后查找第一个大于或等于该 hash 值的缓存节点，并到这个节点中查询或写入缓存项。如果当前节点挂了，则在下一次查询或写入缓存时，为缓存项查找另一个大于其 hash 值的缓存节点即可。大致效果如下，每个缓存节点在圆环上占据一个位置。如果缓存项的 key 的 hash 值小于缓存节点 hash 值，则到该缓存节点中存储或读取缓存项。比如下面绿色点对应的缓存项存储到 cache-2 节点中。由于 cache-3 挂了，原本应该存到该节点中的缓存想最终会存储到 cache-4 节点中。</p><p>关于一致性 hash 算法，我这里只做扫盲。具体的细节不讨论，大家请自行补充相关的背景知识。下面来看看一致性 hash 在 Dubbo 中的应用。我们把上图的缓存节点替换成 Dubbo 的服务提供者</p><p>这里相同颜色的节点均属于同一个服务提供者，比如 Invoker1-1，Invoker1-2，……, Invoker1-160。这样做的目的是通过引入虚拟节点，让 Invoker 在圆环上分散开来，避免数据倾斜问题。所谓数据倾斜是指，由于节点不够分散，导致大量请求落到了同一个节点上，而其他节点只会接收到了少量的请求。比如：由于 Invoker-1 和 Invoker-2 在圆环上分布不均，导致系统中75%的请求都会落到 Invoker-1 上，只有 25% 的请求会落到 Invoker-2 上。解决这个问题办法是引入虚拟节点，通过虚拟节点均衡各个节点的请求量。</p><p>到这里背景知识就普及完了，接下来开始分析源码。我们先从 ConsistentHashLoadBalance 的 doSelect 方法开始看起，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> RpcUtils.getMethodName(invocation);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + methodName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 invokers 原始的 hashcode</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">identityHashCode</span> <span class="operator">=</span> System.identityHashCode(invokers);</span><br><span class="line">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        <span class="comment">// 如果 invokers 是一个新的 List 对象，意味着服务提供者数量发生了变化，可能新增也可能减少了。</span></span><br><span class="line">        <span class="comment">// 此时 selector.identityHashCode != identityHashCode 条件成立</span></span><br><span class="line">        <span class="keyword">if</span> (selector == <span class="literal">null</span> || selector.identityHashCode != identityHashCode) &#123;</span><br><span class="line">            <span class="comment">// 创建新的 ConsistentHashSelector</span></span><br><span class="line">            selectors.put(key, <span class="keyword">new</span> <span class="title class_">ConsistentHashSelector</span>&lt;T&gt;(invokers, methodName, identityHashCode));</span><br><span class="line">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 ConsistentHashSelector 的 select 方法选择 Invoker</span></span><br><span class="line">        <span class="keyword">return</span> selector.select(invocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashSelector</span>&lt;T&gt; &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，doSelect 方法主要做了一些前置工作，比如检测 invokers 列表是不是变动过，以及创建 ConsistentHashSelector。这些工作做完后，接下来开始调用 select 方法执行负载均衡逻辑。在分析 select 方法之前，我们先来看一下一致性 hash 选择器 ConsistentHashSelector 的初始化过程，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashSelector</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 TreeMap 存储 Invoker 虚拟节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, Invoker&lt;T&gt;&gt; virtualInvokers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> replicaNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> identityHashCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] argumentIndex;</span><br><span class="line"></span><br><span class="line">    ConsistentHashSelector(List&lt;Invoker&lt;T&gt;&gt; invokers, String methodName, <span class="type">int</span> identityHashCode) &#123;</span><br><span class="line">        <span class="built_in">this</span>.virtualInvokers = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;Long, Invoker&lt;T&gt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.identityHashCode = identityHashCode;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl();</span><br><span class="line">        <span class="comment">// 获取虚拟节点数，默认为160</span></span><br><span class="line">        <span class="built_in">this</span>.replicaNumber = url.getMethodParameter(methodName, <span class="string">&quot;hash.nodes&quot;</span>, <span class="number">160</span>);</span><br><span class="line">        <span class="comment">// 获取参与 hash 计算的参数下标值，默认对第一个参数进行 hash 运算</span></span><br><span class="line">        String[] index = Constants.COMMA_SPLIT_PATTERN.split(url.getMethodParameter(methodName, <span class="string">&quot;hash.arguments&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        argumentIndex = <span class="keyword">new</span> <span class="title class_">int</span>[index.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index.length; i++) &#123;</span><br><span class="line">            argumentIndex[i] = Integer.parseInt(index[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> invoker.getUrl().getAddress();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; replicaNumber / <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 对 address + i 进行 md5 运算，得到一个长度为16的字节数组</span></span><br><span class="line">                <span class="type">byte</span>[] digest = md5(address + i);</span><br><span class="line">                <span class="comment">// 对 digest 部分字节进行4次 hash 运算，得到四个不同的 long 型正整数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>; h &lt; <span class="number">4</span>; h++) &#123;</span><br><span class="line">                    <span class="comment">// h = 0 时，取 digest 中下标为 0 ~ 3 的4个字节进行位运算</span></span><br><span class="line">                    <span class="comment">// h = 1 时，取 digest 中下标为 4 ~ 7 的4个字节进行位运算</span></span><br><span class="line">                    <span class="comment">// h = 2, h = 3 时过程同上</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> hash(digest, h);</span><br><span class="line">                    <span class="comment">// 将 hash 到 invoker 的映射关系存储到 virtualInvokers 中，</span></span><br><span class="line">                    <span class="comment">// virtualInvokers 中的元素要有序，因此选用 TreeMap 作为存储结构</span></span><br><span class="line">                    virtualInvokers.put(m, invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsistentHashSelector 的构造方法执行了一系列的初始化逻辑，比如从配置中获取虚拟节点数以及参与 hash 计算的参数下标，默认情况下只使用第一个参数进行 hash。需要特别说明的是，ConsistentHashLoadBalance 的负载均衡逻辑只受参数值影响，具有相同参数值的请求将会被分配给同一个服务提供者。ConsistentHashLoadBalance 不 care 权重，因此使用时需要注意一下。</p><p>在获取虚拟节点数和参数下标配置后，接下来要做的事情是计算虚拟节点 hash 值，并将虚拟节点存储到 TreeMap 中。到此，ConsistentHashSelector 初始化工作就完成了。接下来，我们再来看看 select 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title function_">select</span><span class="params">(Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="comment">// 将参数转为 key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> toKey(invocation.getArguments());</span><br><span class="line">    <span class="comment">// 对参数 key 进行 md5 运算</span></span><br><span class="line">    <span class="type">byte</span>[] digest = md5(key);</span><br><span class="line">    <span class="comment">// 取 digest 数组的前四个字节进行 hash 运算，再将 hash 值传给 selectForKey 方法，</span></span><br><span class="line">    <span class="comment">// 寻找合适的 Invoker</span></span><br><span class="line">    <span class="keyword">return</span> selectForKey(hash(digest, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title function_">selectForKey</span><span class="params">(<span class="type">long</span> hash)</span> &#123;</span><br><span class="line">    <span class="comment">// 到 TreeMap 中查找第一个节点值大于或等于当前 hash 的 Invoker</span></span><br><span class="line">    Map.Entry&lt;Long, Invoker&lt;T&gt;&gt; entry = virtualInvokers.tailMap(hash, <span class="literal">true</span>).firstEntry();</span><br><span class="line">    <span class="comment">// 如果 hash 大于 Invoker 在圆环上最大的位置，此时 entry = null，</span></span><br><span class="line">    <span class="comment">// 需要将 TreeMap 的头结点赋值给 entry</span></span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">        entry = virtualInvokers.firstEntry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 Invoker</span></span><br><span class="line">    <span class="keyword">return</span> entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，选择的过程比较简单了。首先是对参数进行 md5 以及 hash 运算，得到一个 hash 值。然后再拿这个值到 TreeMap 中查找目标 Invoker 即可。</p><p>到此关于 ConsistentHashLoadBalance 就分析完了。在阅读 ConsistentHashLoadBalance 之前，大家一定要先补充背景知识。否者即使这里只有一百多行代码，也很难看懂。好了，本节先分析到这。</p><h3 id="2-4-RoundRobinLoadBalance"><a href="#2-4-RoundRobinLoadBalance" class="headerlink" title="2.4 RoundRobinLoadBalance"></a>2.4 RoundRobinLoadBalance</h3><p>本节，我们来看一下 Dubbo 中的加权轮询负载均衡的实现 RoundRobinLoadBalance。在详细分析源码前，我们还是先来了解一下什么是加权轮询。这里从最简单的轮询开始讲起，所谓轮询就是将请求轮流分配给一组服务器。举个例子，我们有三台服务器 A、B、C。我们将第一个请求分配给服务器 A，第二个请求分配给服务器 B，第三个请求分配给服务器 C，第四个请求再次分配给服务器 A。这个过程就叫做轮询。轮询是一种无状态负载均衡算法，实现简单，适用于每台服务器性能相近的场景下。显然，现实情况下，我们并不能保证每台服务器性能均相近。如果我们将等量的请求分配给性能较差的服务器，这显然是不合理的。因此，这个时候我们需要加权轮询算法，对轮询过程进行干预，使得性能好的服务器可以得到更多的请求，性能差的得到的少一些。每台服务器能够得到的请求数比例，接近或等于他们的权重比。比如服务器 A、B、C 权重比为 5:2:1。那么在8次请求中，服务器 A 将获取到其中的5次请求，服务器 B 获取到其中的2次请求，服务器 C 则获取到其中的1次请求。</p><p>以上就是加权轮询的算法思想，搞懂了这个思想，接下来我们就可以分析源码了。我们先来看一下 2.6.4 版本的 RoundRobinLoadBalance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;roundrobin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, AtomicPositiveInteger&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="comment">// key = 全限定类名 + &quot;.&quot; + 方法名，比如 com.xxx.DemoService.sayHello</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + invocation.getMethodName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> invokers.size();</span><br><span class="line">        <span class="comment">// 最大权重</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 最小权重</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minWeight</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</span><br><span class="line">        <span class="comment">// 权重总和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">weightSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这个循环主要用于查找最大和最小权重，计算权重总和等</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> getWeight(invokers.get(i), invocation);</span><br><span class="line">            <span class="comment">// 获取最大和最小权重</span></span><br><span class="line">            maxWeight = Math.max(maxWeight, weight);</span><br><span class="line">            minWeight = Math.min(minWeight, weight);</span><br><span class="line">            <span class="keyword">if</span> (weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 将 weight 封装到 IntegerWrapper 中</span></span><br><span class="line">                invokerToWeightMap.put(invokers.get(i), <span class="keyword">new</span> <span class="title class_">IntegerWrapper</span>(weight));</span><br><span class="line">                <span class="comment">// 累加权重</span></span><br><span class="line">                weightSum += weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。</span></span><br><span class="line">        <span class="comment">// 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道</span></span><br><span class="line">        <span class="comment">// AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，</span></span><br><span class="line">        <span class="comment">// 大家如果感兴趣，可以自行分析</span></span><br><span class="line">        <span class="type">AtomicPositiveInteger</span> <span class="variable">sequence</span> <span class="operator">=</span> sequences.get(key);</span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="literal">null</span>) &#123;</span><br><span class="line">            sequences.putIfAbsent(key, <span class="keyword">new</span> <span class="title class_">AtomicPositiveInteger</span>());</span><br><span class="line">            sequence = sequences.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前的调用编号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentSequence</span> <span class="operator">=</span> sequence.getAndIncrement();</span><br><span class="line">        <span class="comment">// 如果 最小权重 &lt; 最大权重，表明服务提供者之间的权重是不相等的</span></span><br><span class="line">        <span class="keyword">if</span> (maxWeight &gt; <span class="number">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class="line">            <span class="comment">// 使用调用编号对权重总和进行取余操作</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> currentSequence % weightSum;</span><br><span class="line">            <span class="comment">// 进行 maxWeight 次遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxWeight; i++) &#123;</span><br><span class="line">                <span class="comment">// 遍历 invokerToWeightMap</span></span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</span><br><span class="line">                    <span class="comment">// 获取 Invoker</span></span><br><span class="line">                    <span class="keyword">final</span> Invoker&lt;T&gt; k = each.getKey();</span><br><span class="line">                    <span class="comment">// 获取权重包装类 IntegerWrapper</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="type">IntegerWrapper</span> <span class="variable">v</span> <span class="operator">=</span> each.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果 mod = 0，且权重大于0，此时返回相应的 Invoker</span></span><br><span class="line">                    <span class="keyword">if</span> (mod == <span class="number">0</span> &amp;&amp; v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> k;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作</span></span><br><span class="line">                    <span class="keyword">if</span> (v.getValue() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v.decrement();</span><br><span class="line">                        mod--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务提供者之间的权重相等，此时通过轮询选择 Invoker</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(currentSequence % length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。</span></span><br><span class="line">    <span class="comment">// 与 Integer 不同，Integer 是不可变类，而 IntegerWrapper 是可变类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IntegerWrapper</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，RoundRobinLoadBalance 的每行代码都不是很难理解，但是将它们组合到一起之后，好像就看不懂了。这里对上面代码的主要逻辑进行总结，如下：</p><ol><li>找到最大权重值，并计算出权重和</li><li>使用调用编号对权重总和进行取余操作，得到 mod</li><li>检测 mod 的值是否等于0，且 Invoker 权重是否大于0，如果两个条件均满足，则返回该 Invoker</li><li>如果上面条件不满足，且 Invoker 权重大于0，此时对 mod 和权重进行递减</li><li>再次循环，重复步骤3、4</li></ol><p>以上过程对应的原理不太好解释，所以下面直接举例说明把。假设我们有三台服务器 servers &#x3D; [A, B, C]，对应的权重为 weights &#x3D; [2, 5, 1]。接下来对上面的逻辑进行简单的模拟。</p><p>mod &#x3D; 0：满足条件，此时直接返回服务器 A</p><p>mod &#x3D; 1：需要进行一次递减操作才能满足条件，此时返回服务器 B</p><p>mod &#x3D; 2：需要进行两次递减操作才能满足条件，此时返回服务器 C</p><p>mod &#x3D; 3：需要进行三次递减操作才能满足条件，经过递减后，服务器权重为 [1, 4, 0]，此时返回服务器 A</p><p>mod &#x3D; 4：需要进行四次递减操作才能满足条件，经过递减后，服务器权重为 [0, 4, 0]，此时返回服务器 B</p><p>mod &#x3D; 5：需要进行五次递减操作才能满足条件，经过递减后，服务器权重为 [0, 3, 0]，此时返回服务器 B</p><p>mod &#x3D; 6：需要进行六次递减操作才能满足条件，经过递减后，服务器权重为 [0, 2, 0]，此时返回服务器 B</p><p>mod &#x3D; 7：需要进行七次递减操作才能满足条件，经过递减后，服务器权重为 [0, 1, 0]，此时返回服务器 B</p><p>经过8次调用后，我们得到的负载均衡结果为 [A, B, C, A, B, B, B, B]，次数比 A:B:C &#x3D; 2:5:1，等于权重比。当 sequence &#x3D; 8 时，mod &#x3D; 0，此时重头再来。从上面的模拟过程可以看出，当 mod &gt;&#x3D; 3 后，服务器 C 就不会被选中了，因为它的权重被减为0了。当 mod &gt;&#x3D; 4 后，服务器 A 的权重被减为0，此后 A 就不会再被选中。</p><p>以上是 2.6.4 版本的 RoundRobinLoadBalance 分析过程，大家如果看不懂，自己可以定义一些权重组合进行模拟。也可以写点测试用例，进行调试分析，总之不要死看。</p><p>2.6.4 版本的 RoundRobinLoadBalance 存在着比较严重的性能问题，该问题最初是在 <a href="https://github.com/apache/incubator-dubbo/issues/2578">issue #2578</a> 中被反馈出来。问题出在了 Invoker 的返回时机上，RoundRobinLoadBalance 需要在<code>mod == 0 &amp;&amp; v.getValue() &gt; 0</code> 条件成立的情况下才会被返回相应的 Invoker。假如 mod 很大，比如 10000，50000，甚至更大时，doSelect 方法需要进行很多次计算才能将 mod 减为0。由此可知，doSelect 的效率与 mod 有关，时间复杂度为 O(mod)。mod 又受最大权重 maxWeight 的影响，因此当某个服务提供者配置了非常大的权重，此时 RoundRobinLoadBalance 会产生比较严重的性能问题。这个问题被反馈后，社区很快做了回应。并对 RoundRobinLoadBalance 的代码进行了重构，将时间复杂度优化至了常量级别。这个优化可以说很好了，下面我们来学习一下优化后的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;roundrobin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, AtomicPositiveInteger&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; indexSeqs = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, AtomicPositiveInteger&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + invocation.getMethodName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> invokers.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minWeight</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokerToWeightList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找最大和最小权重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> getWeight(invokers.get(i), invocation);</span><br><span class="line">            maxWeight = Math.max(maxWeight, weight);</span><br><span class="line">            minWeight = Math.min(minWeight, weight);</span><br><span class="line">            <span class="keyword">if</span> (weight &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                invokerToWeightList.add(invokers.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前服务对应的调用序列对象 AtomicPositiveInteger</span></span><br><span class="line">        <span class="type">AtomicPositiveInteger</span> <span class="variable">sequence</span> <span class="operator">=</span> sequences.get(key);</span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建 AtomicPositiveInteger，默认值为0</span></span><br><span class="line">            sequences.putIfAbsent(key, <span class="keyword">new</span> <span class="title class_">AtomicPositiveInteger</span>());</span><br><span class="line">            sequence = sequences.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取下标序列对象 AtomicPositiveInteger</span></span><br><span class="line">        <span class="type">AtomicPositiveInteger</span> <span class="variable">indexSeq</span> <span class="operator">=</span> indexSeqs.get(key);</span><br><span class="line">        <span class="keyword">if</span> (indexSeq == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建 AtomicPositiveInteger，默认值为 -1</span></span><br><span class="line">            indexSeqs.putIfAbsent(key, <span class="keyword">new</span> <span class="title class_">AtomicPositiveInteger</span>(-<span class="number">1</span>));</span><br><span class="line">            indexSeq = indexSeqs.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (maxWeight &gt; <span class="number">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</span><br><span class="line">            length = invokerToWeightList.size();</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexSeq.incrementAndGet() % length;</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentWeight</span> <span class="operator">=</span> sequence.get() % maxWeight;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 每循环一轮（index = 0），重新计算 currentWeight</span></span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                    currentWeight = sequence.incrementAndGet() % maxWeight;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检测 Invoker 的权重是否大于 currentWeight，大于则返回</span></span><br><span class="line">                <span class="keyword">if</span> (getWeight(invokerToWeightList.get(index), invocation) &gt; currentWeight) &#123;</span><br><span class="line">                    <span class="keyword">return</span> invokerToWeightList.get(index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有 Invoker 权重相等，此时进行普通的轮询即可</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(sequence.incrementAndGet() % length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的逻辑是这样的，每进行一轮循环，重新计算 currentWeight。如果当前 Invoker 权重大于 currentWeight，则返回该 Invoker。还是举例说明吧，假设服务器 [A, B, C] 对应权重 [5, 2, 1]。</p><p>第一轮循环，currentWeight &#x3D; 1，可返回 A 和 B</p><p>第二轮循环，currentWeight &#x3D; 2，返回 A</p><p>第三轮循环，currentWeight &#x3D; 3，返回 A</p><p>第四轮循环，currentWeight &#x3D; 4，返回 A</p><p>第五轮循环，currentWeight &#x3D; 0，返回 A, B, C</p><p>如上，这里的一轮循环是指 index 再次变为0所经历过的循环，这里可以把 index &#x3D; 0 看做是一轮循环的开始。每一轮循环的次数与 Invoker 的数量有关，Invoker 数量通常不会太多，所以我们可以认为上面代码的时间复杂度为常数级。</p><p>重构后的 RoundRobinLoadBalance 看起来已经很不错了，但是在代码更新不久后，很有又被重构了。这次重构原因是新的 RoundRobinLoadBalance 在某些情况下选出的服务器序列不够均匀。比如，服务器 [A, B, C] 对应权重 [5, 1, 1]。现在进行7次负载均衡，选择出来的序列为 [A, A, A, A, A, B, C]。前5个请求全部都落在了服务器 A上，分布不够均匀。这将会使服务器 A 短时间内接收大量的请求，压力陡增。而 B 和 C 无请求，处于空闲状态。我们期望的结果是这样的 [A, A, B, A, C, A, A]，不同服务器可以穿插获取请求。为了增加负载均衡结果的平滑性，社区再次对 RoundRobinLoadBalance 的实现进行了重构。这次重构参考自 Nginx 的平滑加权轮询负载均衡，实现原理是这样的。每个服务器对应两个权重，分别为 weight 和 currentWeight。其中 weight 是固定的，currentWeight 是会动态调整，初始值为0。当有新的请求进来时，遍历服务器列表，让它的 currentWeight 加上自身权重。遍历完成后，找到最大的 currentWeight，并将其减去权重总和，然后返回相应的服务器即可。</p><p>上面描述不是很好理解，下面还是举例说明吧。仍然使用服务器 [A, B, C] 对应权重 [5, 1, 1] 的例子进行说明，现在有7个请求依次进入负载均衡逻辑，选择过程如下：</p><table><thead><tr><th align="center">请求编号</th><th align="center">currentWeight 数组</th><th align="center">选择结果</th><th align="center">减去权重总和后的 currentWeight 数组</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">[5, 1, 1]</td><td align="center">A</td><td align="center">[-2, 1, 1]</td></tr><tr><td align="center">2</td><td align="center">[3, 2, 2]</td><td align="center">A</td><td align="center">[-4, 2, 2]</td></tr><tr><td align="center">3</td><td align="center">[1, 3, 3]</td><td align="center">B</td><td align="center">[1, -4, 3]</td></tr><tr><td align="center">4</td><td align="center">[6, -3, 4]</td><td align="center">A</td><td align="center">[-1, -3, 4]</td></tr><tr><td align="center">5</td><td align="center">[4, -2, 5]</td><td align="center">C</td><td align="center">[4, -2, -2]</td></tr><tr><td align="center">6</td><td align="center">[9, -1, -1]</td><td align="center">A</td><td align="center">[2, -1, -1]</td></tr><tr><td align="center">7</td><td align="center">[7, 0, 0]</td><td align="center">A</td><td align="center">[0, 0, 0]</td></tr></tbody></table><p>如上，经过平滑性处理后，得到的服务器序列为 [A, A, B, A, C, A, A]，相比之前的序列 [A, A, A, A, A, B, C]，分布性要好一些。初始情况下 currentWeight &#x3D; [0, 0, 0]，第7个请求处理完后，currentWeight 再次变为 [0, 0, 0]，是不是很神奇。这个结果也不难理解，在7次计算过程中，每个服务器的 currentWeight 都增加了自身权重 weight * 7，得到 currentWeight &#x3D; [35, 7, 7]，A 被选中5次，要被减去 5 * 7。B 和 C 被选中1次，要被减去 1 * 7。于是 currentWeight &#x3D; [35, 7, 7] – [35, 7, 7] &#x3D; [0, 0, 0]。</p><p>以上就是平滑加权轮询的计算过程，现在大家应该对平滑加权轮询算法了有了一些了解。接下来，我们来看看 Dubbo-2.6.5 是如何实现上面的计算过程的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinLoadBalance</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;roundrobin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RECYCLE_PERIOD</span> <span class="operator">=</span> <span class="number">60000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WeightedRoundRobin</span> &#123;</span><br><span class="line">        <span class="comment">// 服务提供者权重</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">        <span class="comment">// 当前权重</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">current</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 最后一次更新时间</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> lastUpdate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">            <span class="comment">// 初始情况下，current = 0</span></span><br><span class="line">            current.set(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">increaseCurrent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// current = current + weight；</span></span><br><span class="line">            <span class="keyword">return</span> current.addAndGet(weight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sel</span><span class="params">(<span class="type">int</span> total)</span> &#123;</span><br><span class="line">            <span class="comment">// current = current - total;</span></span><br><span class="line">            current.addAndGet(-<span class="number">1</span> * total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嵌套 Map 结构，存储的数据结构示例如下：</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     &quot;UserService.query&quot;: &#123;</span></span><br><span class="line">    <span class="comment">//         &quot;url1&quot;: WeightedRoundRobin@123, </span></span><br><span class="line">    <span class="comment">//         &quot;url2&quot;: WeightedRoundRobin@456, </span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     &quot;UserService.update&quot;: &#123;</span></span><br><span class="line">    <span class="comment">//         &quot;url1&quot;: WeightedRoundRobin@123, </span></span><br><span class="line">    <span class="comment">//         &quot;url2&quot;: WeightedRoundRobin@456,</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 最外层为服务类名 + 方法名，第二层为 url 到 WeightedRoundRobin 的映射关系。</span></span><br><span class="line">    <span class="comment">// 这里我们可以将 url 看成是服务提供者的 id</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentMap&lt;String, ConcurrentMap&lt;String, WeightedRoundRobin&gt;&gt; methodWeightMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, ConcurrentMap&lt;String, WeightedRoundRobin&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原子更新锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicBoolean</span> <span class="variable">updateLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl().getServiceKey() + <span class="string">&quot;.&quot;</span> + invocation.getMethodName();</span><br><span class="line">        <span class="comment">// 获取 url 到 WeightedRoundRobin 映射表，如果为空，则创建一个新的</span></span><br><span class="line">        ConcurrentMap&lt;String, WeightedRoundRobin&gt; map = methodWeightMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">            methodWeightMap.putIfAbsent(key, <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, WeightedRoundRobin&gt;());</span><br><span class="line">            map = methodWeightMap.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maxCurrent</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Invoker&lt;T&gt; selectedInvoker = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">WeightedRoundRobin</span> <span class="variable">selectedWRR</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面这个循环主要做了这样几件事情：</span></span><br><span class="line">        <span class="comment">//   1. 遍历 Invoker 列表，检测当前 Invoker 是否有</span></span><br><span class="line">        <span class="comment">//      对应的 WeightedRoundRobin，没有则创建</span></span><br><span class="line">        <span class="comment">//   2. 检测 Invoker 权重是否发生了变化，若变化了，</span></span><br><span class="line">        <span class="comment">//      则更新 WeightedRoundRobin 的 weight 字段</span></span><br><span class="line">        <span class="comment">//   3. 让 current 字段加上自身权重，等价于 current += weight</span></span><br><span class="line">        <span class="comment">//   4. 设置 lastUpdate 字段，即 lastUpdate = now</span></span><br><span class="line">        <span class="comment">//   5. 寻找具有最大 current 的 Invoker 以及 WeightedRoundRobin，</span></span><br><span class="line">        <span class="comment">//      暂存起来，留作后用</span></span><br><span class="line">        <span class="comment">//   6. 计算权重总和</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">identifyString</span> <span class="operator">=</span> invoker.getUrl().toIdentityString();</span><br><span class="line">            <span class="type">WeightedRoundRobin</span> <span class="variable">weightedRoundRobin</span> <span class="operator">=</span> map.get(identifyString);</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> getWeight(invoker, invocation);</span><br><span class="line">            <span class="keyword">if</span> (weight &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                weight = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测当前 Invoker 是否有对应的 WeightedRoundRobin，没有则创建</span></span><br><span class="line">            <span class="keyword">if</span> (weightedRoundRobin == <span class="literal">null</span>) &#123;</span><br><span class="line">                weightedRoundRobin = <span class="keyword">new</span> <span class="title class_">WeightedRoundRobin</span>();</span><br><span class="line">                <span class="comment">// 设置 Invoker 权重</span></span><br><span class="line">                weightedRoundRobin.setWeight(weight);</span><br><span class="line">                <span class="comment">// 存储 url 唯一标识 identifyString 到 weightedRoundRobin 的映射关系</span></span><br><span class="line">                map.putIfAbsent(identifyString, weightedRoundRobin);</span><br><span class="line">                weightedRoundRobin = map.get(identifyString);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Invoker 权重不等于 WeightedRoundRobin 中保存的权重，说明权重变化了，此时进行更新</span></span><br><span class="line">            <span class="keyword">if</span> (weight != weightedRoundRobin.getWeight()) &#123;</span><br><span class="line">                weightedRoundRobin.setWeight(weight);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 让 current 加上自身权重，等价于 current += weight</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> weightedRoundRobin.increaseCurrent();</span><br><span class="line">            <span class="comment">// 设置 lastUpdate，表示近期更新过</span></span><br><span class="line">            weightedRoundRobin.setLastUpdate(now);</span><br><span class="line">            <span class="comment">// 找出最大的 current </span></span><br><span class="line">            <span class="keyword">if</span> (cur &gt; maxCurrent) &#123;</span><br><span class="line">                maxCurrent = cur;</span><br><span class="line">                <span class="comment">// 将具有最大 current 权重的 Invoker 赋值给 selectedInvoker</span></span><br><span class="line">                selectedInvoker = invoker;</span><br><span class="line">                <span class="comment">// 将 Invoker 对应的 weightedRoundRobin 赋值给 selectedWRR，留作后用</span></span><br><span class="line">                selectedWRR = weightedRoundRobin;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算权重总和</span></span><br><span class="line">            totalWeight += weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 &lt;identifyString, WeightedRoundRobin&gt; 进行检查，过滤掉长时间未被更新的节点。</span></span><br><span class="line">        <span class="comment">// 该节点可能挂了，invokers 中不包含该节点，所以该节点的 lastUpdate 长时间无法被更新。</span></span><br><span class="line">        <span class="comment">// 若未更新时长超过阈值后，就会被移除掉，默认阈值为60秒。</span></span><br><span class="line">        <span class="keyword">if</span> (!updateLock.get() &amp;&amp; invokers.size() != map.size()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (updateLock.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ConcurrentMap&lt;String, WeightedRoundRobin&gt; newMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, WeightedRoundRobin&gt;();</span><br><span class="line">                    <span class="comment">// 拷贝</span></span><br><span class="line">                    newMap.putAll(map);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 遍历修改，也就是移除过期记录</span></span><br><span class="line">                    Iterator&lt;Entry&lt;String, WeightedRoundRobin&gt;&gt; it = newMap.entrySet().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                        Entry&lt;String, WeightedRoundRobin&gt; item = it.next();</span><br><span class="line">                        <span class="keyword">if</span> (now - item.getValue().getLastUpdate() &gt; RECYCLE_PERIOD) &#123;</span><br><span class="line">                            it.remove();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 更新引用</span></span><br><span class="line">                    methodWeightMap.put(key, newMap);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    updateLock.set(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selectedInvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 让 current 减去权重总和，等价于 current -= totalWeight</span></span><br><span class="line">            selectedWRR.sel(totalWeight);</span><br><span class="line">            <span class="comment">// 返回具有最大 current 的 Invoker</span></span><br><span class="line">            <span class="keyword">return</span> selectedInvoker;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// should not happen here</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 Dubbo-2.6.5 版本的 RoundRobinLoadBalance，大家如果能够理解平滑加权轮询算法的计算过程，再配合我写的注释，理解上面的代码应该不难。</p><p>以上就是关于 RoundRobinLoadBalance 全部的分析，内容有点多，大家慢慢消化吧。好了，本节先到这。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>本篇文章对 Dubbo 中的几种负载均衡实现进行了详细的分析，总的来说，这篇文章写的还是有点累的。主要是每介绍一种负载均衡实现，就要介绍一下相关背景。另一方面，这里很多东西对于我来说，也完全是新的。在此之前，我对负载均衡算法并没太多了解。这篇文章基本上是边学边写的，总共耗时5天。本来想简单写写算了，但最后还是决定写详细点。好在，现在写完了，我也可以放松一下了。</p><p>本篇文章是我的 Dubbo 源码分析系列文章关于集群容错部分的最后一篇文章，写完感觉学到了很多东西。通过坚持不懈的阅读代码，写技术文章，使得我对 Dubbo 有了更深入的了解。当然，这还远远不够。后续还有很多东西要了解，比如 Nacos、Sentinel 等。长路漫漫，步履不停。</p><p>好了，本篇文章到这里就结束了。感谢大家的阅读。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/gqtcgq/article/details/52076997">负载均衡之加权轮询算法 – CSDN</a></li><li><a href="https://www.jianshu.com/p/8e31a3f02e80">dubbo源码-预热warmup过程 – 简书</a></li><li><a href="https://www.cnblogs.com/lpfuture/p/5796398.html">一致性哈希算法原理 – 博客园</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八、Dubbo-源码分析-–-集群容错之-LoadBalance&quot;&gt;&lt;a href=&quot;#八、Dubbo-源码分析-–-集群容错之-LoadBalance&quot; class=&quot;headerlink&quot; title=&quot;八、Dubbo 源码分析 – 集群容错之 LoadBal</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 集群容错之 Cluster</title>
    <link href="https://hexo.tryrun.top/posts/e743e3e1.html"/>
    <id>https://hexo.tryrun.top/posts/e743e3e1.html</id>
    <published>2020-09-25T14:29:54.000Z</published>
    <updated>2020-09-25T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、Dubbo-源码分析-–-集群容错之-Cluster"><a href="#七、Dubbo-源码分析-–-集群容错之-Cluster" class="headerlink" title="七、Dubbo 源码分析 – 集群容错之 Cluster"></a>七、Dubbo 源码分析 – 集群容错之 Cluster</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>为了避免单点故障，现在的应用至少会部署在两台服务器上。对于一些负载比较高的服务，会部署更多台服务器。这样，同一环境下的服务提供者数量会大于1。对于服务消费者来说，同一环境下出现了多个服务提供者。这时会出现一个问题，服务消费者需要决定选择哪个服务提供者进行调用。另外服务调用失败时的处理措施也是需要考虑的，是重试呢，还是抛出异常，亦或是只打印异常等。为了处理这些问题，Dubbo 定义了集群接口 Cluster 以及及 Cluster Invoker。集群 Cluster 用途是将多个服务提供者合并为一个 Cluster Invoker，并将这个 Invoker 暴露给服务消费者。这样一来，服务消费者只需通过这个 Invoker 进行远程调用即可，至于具体调用哪个服务提供者，以及调用失败后如何处理等问题，现在都交给集群模块去处理。集群模块是服务提供者和服务消费者的中间层，为服务消费者屏蔽了服务提供者的情况，这样服务消费者就可以处理远程调用相关事宜。比如发请求，接受服务提供者返回的数据等。这就是集群的作用。</p><p>Dubbo 提供了多种集群实现，包含但不限于 Failover Cluster、Failfast Cluster 和 Failsafe Cluster 等。每种集群实现类的用途不同，接下来我会一一进行分析。</p><h2 id="2-集群容错"><a href="#2-集群容错" class="headerlink" title="2. 集群容错"></a>2. 集群容错</h2><p>在对集群相关代码进行分析之前，这里有必要先来介绍一下集群容错的所有组件。包含 Cluster、Cluster Invoker、Directory、Router 和 LoadBalance 等。</p><p>接下来我会介绍集群工作过程。集群工作过程可分为两个阶段，第一个阶段是在服务消费者初始化期间，集群 Cluster 实现类为服务消费者创建 Cluster Invoker 实例，即 merge 操作。第二个阶段是在服务消费者进行远程调用时。以 FailoverClusterInvoker 为例，该类型 Cluster Invoker 首先会调用 Directory 的 list 方法列举 Invoker 列表（可将 Invoker 简单理解为服务提供者）。Directory 的用途是保存 Invoker，可简单类比为 List。其实现类 RegistryDirectory 是一个动态服务目录，可感知注册中心配置的变化，它所持有的 Inovker 列表会随着注册中心内容的变化而变化。每次变化后，RegistryDirectory 会动态增删 Inovker，并调用 Router 的 route 方法进行路由，过滤掉不符合路由规则的 Invoker。回到上图，Cluster Invoker 实际上并不会直接调用 Router 进行路由。当 FailoverClusterInvoker 拿到 Directory 返回的 Invoker 列表后，它会通过 LoadBalance 从 Invoker 列表中选择一个 Inovker。最后 FailoverClusterInvoker 会将参数传给 LoadBalance 选择出的 Invoker 实例的 invoker 方法，进行真正的 RPC 调用。</p><p>以上就是集群工作的整个流程，这里并没介绍集群是如何容错的。Dubbo 主要提供了这样几种容错方式：</p><ul><li>Failover Cluster – 失败自动切换</li><li>Failfast Cluster – 快速失败</li><li>Failsafe Cluster – 失败安全</li><li>Failback Cluster – 失败自动恢复</li><li>Forking Cluster – 并行调用多个服务提供者</li></ul><p>这里暂时只对这几种容错模式进行简单的介绍，在接下来的章节中，我会重点分析这几种容错模式的具体实现。好了，关于集群的工作流程和容错模式先说到这，接下来进入源码分析阶段。</p><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h2><h3 id="3-1-Cluster-实现类分析"><a href="#3-1-Cluster-实现类分析" class="headerlink" title="3.1 Cluster 实现类分析"></a>3.1 Cluster 实现类分析</h3><p>我在上一章提到了集群接口 Cluster 和 Cluster Invoker，这两者是不同的。Cluster 是接口，而 Cluster Invoker 是一种 Invoker。服务提供者的选择逻辑，以及远程调用失败后的的处理逻辑均是封装在 Cluster Invoker 中。那么 Cluster 接口和相关实现类有什么用呢？用途比较简单，用于生成 Cluster Invoker，仅此而已。下面我们来看一下源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailoverCluster</span> <span class="keyword">implements</span> <span class="title class_">Cluster</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;failover&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="comment">// 创建并返回 FailoverClusterInvoker 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FailoverClusterInvoker</span>&lt;T&gt;(directory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，FailoverCluster 总共就包含这几行代码，用于创建 FailoverClusterInvoker 对象，很简单。下面再看一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailbackCluster</span> <span class="keyword">implements</span> <span class="title class_">Cluster</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;failback&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">join</span><span class="params">(Directory&lt;T&gt; directory)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="comment">// 创建并返回 FailbackClusterInvoker 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FailbackClusterInvoker</span>&lt;T&gt;(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，FailbackCluster 的逻辑也是很简单，无需解释了。所以接下来，我们把重点放在各种 Cluster Invoker 上</p><h3 id="3-2-Cluster-Invoker-分析"><a href="#3-2-Cluster-Invoker-分析" class="headerlink" title="3.2 Cluster Invoker 分析"></a>3.2 Cluster Invoker 分析</h3><p>我们首先从各种 Cluster Invoker 的父类 AbstractClusterInvoker 源码开始说起。前面说过，集群工作过程可分为两个阶段，第一个阶段是在服务消费者初始化期间，这个在<a href="">服务引用</a>那篇文章中已经分析过了，这里不再赘述。第二个阶段是在服务消费者进行远程调用时，此时 AbstractClusterInvoker 的 invoke 方法会被调用。列举 Invoker，负载均衡等操作均会在此阶段被执行。因此下面先来看一下 invoke 方法的逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public Result invoke(final Invocation invocation) throws RpcException &#123;</span><br><span class="line">    checkWhetherDestroyed();</span><br><span class="line">    LoadBalance loadbalance = null;</span><br><span class="line"></span><br><span class="line">    // 绑定 attachments 到 invocation 中.</span><br><span class="line">    Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();</span><br><span class="line">    if (contextAttachments != null &amp;&amp; contextAttachments.size() != 0) &#123;</span><br><span class="line">        ((RpcInvocation) invocation).addAttachments(contextAttachments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 列举 Invoker</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation);</span><br><span class="line">    if (invokers != null &amp;&amp; !invokers.isEmpty()) &#123;</span><br><span class="line">        // 加载 LoadBalance</span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()</span><br><span class="line">                .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));</span><br><span class="line">    &#125;</span><br><span class="line">    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line"></span><br><span class="line">    // 调用 doInvoke 进行后续操作</span><br><span class="line">    return doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象方法，由子类实现</span><br><span class="line">protected abstract Result doInvoke(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers,</span><br><span class="line">                                       LoadBalance loadbalance) throws RpcException;</span><br></pre></td></tr></table></figure><p>AbstractClusterInvoker 的 invoke 方法主要用于列举 Invoker，以及加载 LoadBalance。最后再调用模板方法 doInvoke 进行后续操作。下面我们来看一下 Invoker 列举方法 list(Invocation) 的逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">list</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="comment">// 调用 Directory 的 list 方法</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = directory.list(invocation);</span><br><span class="line">    <span class="keyword">return</span> invokers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，AbstractClusterInvoker 中的 list 方法做的事情很简单，只是简单的调用了 Directory 的 list 方法，没有其他更多的逻辑了。Directory 的 list 方法我在前面的<a href="">文章</a>中已经分析过了，这里就不赘述了。</p><p>接下来，我们把目光转移到 AbstractClusterInvoker 的各种实现类上，来看一下这些实现类是如何实现 doInvoke 方法逻辑的。</p><h4 id="3-2-1-FailoverClusterInvoker"><a href="#3-2-1-FailoverClusterInvoker" class="headerlink" title="3.2.1 FailoverClusterInvoker"></a>3.2.1 FailoverClusterInvoker</h4><p>FailoverClusterInvoker 在调用失败时，会自动切换 Invoker 进行重试。在无明确配置下，Dubbo 会使用这个类作为缺省 Cluster Invoker。下面来看一下该类的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailoverClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation, <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; copyinvokers = invokers;</span><br><span class="line">        checkInvokers(copyinvokers, invocation);</span><br><span class="line">        <span class="comment">// 获取重试次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            len = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">RpcException</span> <span class="variable">le</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invoked = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;(copyinvokers.size());</span><br><span class="line">        Set&lt;String&gt; providers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(len);</span><br><span class="line">        <span class="comment">// 循环调用，失败重试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                checkWhetherDestroyed();</span><br><span class="line">                <span class="comment">// 在进行重试前重新列举 Invoker，这样做的好处是，如果某个服务挂了，</span></span><br><span class="line">                <span class="comment">// 通过调用 list 可得到最新可用的 Invoker 列表</span></span><br><span class="line">                copyinvokers = list(invocation);</span><br><span class="line">                <span class="comment">// 对 copyinvokers 进行判空检查</span></span><br><span class="line">                checkInvokers(copyinvokers, invocation);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过负载均衡选择 Invoker</span></span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyinvokers, invoked);</span><br><span class="line">            <span class="comment">// 添加到 invoker 到 invoked 列表中</span></span><br><span class="line">            invoked.add(invoker);</span><br><span class="line">            <span class="comment">// 设置 invoked 到 RPC 上下文中</span></span><br><span class="line">            RpcContext.getContext().setInvokers((List) invoked);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用目标 Invoker 的 invoke 方法</span></span><br><span class="line">                <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> invoker.invoke(invocation);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isBiz()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                le = e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                le = <span class="keyword">new</span> <span class="title class_">RpcException</span>(e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                providers.add(invoker.getUrl().getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若重试均失败，则抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(..., <span class="string">&quot;Failed to invoke the method ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，FailoverClusterInvoker 的 doInvoke 方法首先是获取重试次数，然后根据重试次数进行循环调用，失败后进行重试。在 for 循环内，首先是通过负载均衡组件选择一个 Invoker，然后再通过这个 Invoker 的 invoke 方法进行远程调用。如果失败了，记录下异常，并进行重试。重试时会再次调用父类的 list 方法列举 Invoker。整个流程大致如此，不是很难理解。下面我们看一下 select 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Invoker&lt;T&gt; <span class="title function_">select</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="literal">null</span> || invokers.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取调用方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> invocation == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : invocation.getMethodName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 sticky 配置，sticky 表示粘滞连接。所谓粘滞连接是指让服务消费者尽可能的</span></span><br><span class="line">    <span class="comment">// 调用同一个服务提供者，除非该提供者挂了再进行切换</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">sticky</span> <span class="operator">=</span> invokers.get(<span class="number">0</span>).getUrl().getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测 invokers 列表是否包含 stickyInvoker，如果不包含，</span></span><br><span class="line">        <span class="comment">// 说明 stickyInvoker 代表的服务提供者挂了，此时需要将其置空</span></span><br><span class="line">        <span class="keyword">if</span> (stickyInvoker != <span class="literal">null</span> &amp;&amp; !invokers.contains(stickyInvoker)) &#123;</span><br><span class="line">            stickyInvoker = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 sticky 为 true，且 stickyInvoker != null 的情况下。如果 selected 包含 </span></span><br><span class="line">        <span class="comment">// stickyInvoker，表明 stickyInvoker 对应的服务提供者可能因网络原因未能成功提供服务。</span></span><br><span class="line">        <span class="comment">// 但是该提供者并没挂，此时 invokers 列表中仍存在该服务提供者对应的 Invoker。</span></span><br><span class="line">        <span class="keyword">if</span> (sticky &amp;&amp; stickyInvoker != <span class="literal">null</span> &amp;&amp; (selected == <span class="literal">null</span> || !selected.contains(stickyInvoker))) &#123;</span><br><span class="line">            <span class="comment">// availablecheck 表示是否开启了可用性检查，如果开启了，则调用 stickyInvoker 的 </span></span><br><span class="line">            <span class="comment">// isAvailable 方法进行检查，如果检查通过，则直接返回 stickyInvoker。</span></span><br><span class="line">            <span class="keyword">if</span> (availablecheck &amp;&amp; stickyInvoker.isAvailable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> stickyInvoker;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果线程走到当前代码处，说明前面的 stickyInvoker 为空，或者不可用。</span></span><br><span class="line">    <span class="comment">// 此时调用继续调用 doSelect 选择 Invoker</span></span><br><span class="line">    Invoker&lt;T&gt; invoker = doSelect(loadbalance, invocation, invokers, selected);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 sticky 为 true，则将负载均衡组件选出的 Invoker 赋值给 stickyInvoker</span></span><br><span class="line">    <span class="keyword">if</span> (sticky) &#123;</span><br><span class="line">        stickyInvoker = invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，select 方法的主要逻辑集中在了对粘滞连接特性的支持上。首先是获取 sticky 配置，然后再检测 invokers 列表中是否包含 stickyInvoker，如果不包含，则认为该 stickyInvoker 不可用，此时将其置空。这里的 invokers 列表可以看做是<strong>存活着的服务提供者</strong>列表，如果这个列表不包含 stickyInvoker，那自然而然的认为 stickyInvoker 挂了，所以置空。如果 stickyInvoker 存在于 invokers 列表中，此时要进行下一项检测 —- 检测 selected 中是否包含 stickyInvoker。如果包含的话，说明 stickyInvoker 在此之前没有成功提供服务（但其仍然处于存活状态）。此时我们认为这个服务不可靠，不应该在重试期间内再次被调用，因此这个时候不会返回该 stickyInvoker。如果 selected 不包含 stickyInvoker，此时还需要进行可用性检测，比如检测服务提供者网络连通性等。当可用性检测通过，才可返回 stickyInvoker，否则调用 doSelect 方法选择 Invoker。如果 sticky 为 true，此时会将 doSelect 方法选出的 Invoker 赋值给 stickyInvoker。</p><p>以上就是 select 方法的逻辑，这段逻辑看起来不是很复杂，但是信息量比较大。不搞懂 invokers 和 selected 两个入参的含义，以及粘滞连接特性，这段代码应该是没法看懂的。大家在阅读这段代码时，不要忽略了对背景知识的理解。其他的不多说了，继续向下分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title function_">doSelect</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="literal">null</span> || invokers.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (invokers.size() == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (loadbalance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果 loadbalance 为空，这里通过 SPI 加载 Loadbalance，默认为 RandomLoadBalance</span></span><br><span class="line">        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过负载均衡组件选择 Invoker</span></span><br><span class="line">    Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 selected 包含负载均衡选择出的 Invoker，或者该 Invoker 无法经过可用性检查，此时进行重选</span></span><br><span class="line">    <span class="keyword">if</span> ((selected != <span class="literal">null</span> &amp;&amp; selected.contains(invoker))</span><br><span class="line">            || (!invoker.isAvailable() &amp;&amp; getUrl() != <span class="literal">null</span> &amp;&amp; availablecheck)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 进行重选</span></span><br><span class="line">            Invoker&lt;T&gt; rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);</span><br><span class="line">            <span class="keyword">if</span> (rinvoker != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果 rinvoker 不为空，则将其赋值给 invoker</span></span><br><span class="line">                invoker = rinvoker;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// rinvoker 为空，定位 invoker 在 invokers 中的位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> invokers.indexOf(invoker);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取 index + 1 位置处的 Invoker，以下代码等价于：</span></span><br><span class="line">                    <span class="comment">//     invoker = invokers.get((index + 1) % invokers.size());</span></span><br><span class="line">                    invoker = index &lt; invokers.size() - <span class="number">1</span> ? invokers.get(index + <span class="number">1</span>) : invokers.get(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;... may because invokers list dynamic change, ignore.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;cluster reselect fail reason is : ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doSelect 主要做了两件事，第一是通过负载均衡组件选择 Invoker。第二是，如果选出来的 Invoker 不稳定，或不可用，此时需要调用 reselect 方法进行重选。若 reselect 选出来的 Invoker 为空，此时定位 invoker 在 invokers 列表中的位置 index，然后获取 index + 1 处的 invoker，这也可以看做是重选逻辑的一部分。关于负载均衡的选择逻辑，我将会在下篇文章进行详细分析。下面我们来看一下 reselect 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title function_">reselect</span><span class="params">(LoadBalance loadbalance, Invocation invocation,</span></span><br><span class="line"><span class="params">                            List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected, <span class="type">boolean</span> availablecheck)</span></span><br><span class="line">        <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; reselectInvokers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;(invokers.size() &gt; <span class="number">1</span> ? (invokers.size() - <span class="number">1</span>) : invokers.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 availablecheck 进行不同的处理</span></span><br><span class="line">    <span class="keyword">if</span> (availablecheck) &#123;</span><br><span class="line">        <span class="comment">// 遍历 invokers 列表</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="comment">// 检测可用性</span></span><br><span class="line">            <span class="keyword">if</span> (invoker.isAvailable()) &#123;</span><br><span class="line">                <span class="comment">// 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中</span></span><br><span class="line">                <span class="keyword">if</span> (selected == <span class="literal">null</span> || !selected.contains(invoker)) &#123;</span><br><span class="line">                    reselectInvokers.add(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// reselectInvokers 不为空，此时通过负载均衡组件进行选择</span></span><br><span class="line">        <span class="keyword">if</span> (!reselectInvokers.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不检查 Invoker 可用性</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="comment">// 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中</span></span><br><span class="line">            <span class="keyword">if</span> (selected == <span class="literal">null</span> || !selected.contains(invoker)) &#123;</span><br><span class="line">                reselectInvokers.add(invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!reselectInvokers.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 通过负载均衡组件进行选择</span></span><br><span class="line">            <span class="keyword">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若线程走到此处，说明 reselectInvokers 集合为空，此时不会调用负载均衡组件进行筛选。</span></span><br><span class="line">        <span class="comment">// 这里从 selected 列表中查找可用的 Invoker，并将其添加到 reselectInvokers 集合中</span></span><br><span class="line">        <span class="keyword">if</span> (selected != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : selected) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((invoker.isAvailable())</span><br><span class="line">                        &amp;&amp; !reselectInvokers.contains(invoker)) &#123;</span><br><span class="line">                    reselectInvokers.add(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!reselectInvokers.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 再次进行选择，并返回选择结果</span></span><br><span class="line">            <span class="keyword">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reselect 方法总结下来其实只做了两件事情，第一是查找可用的 Invoker，并将其添加到 reselectInvokers 集合中。第二，如果 reselectInvokers 不为空，则通过负载均衡组件再次进行选择。其中第一件事情又可进行细分，一开始，reselect 从 invokers 列表中查找有效可用的 Invoker，若未能找到，此时再到 selected 列表中继续查找。关于 reselect 方法就先分析到这，继续分析其他的 Cluster Invoker。</p><h4 id="3-2-2-FailbackClusterInvoker"><a href="#3-2-2-FailbackClusterInvoker" class="headerlink" title="3.2.2 FailbackClusterInvoker"></a>3.2.2 FailbackClusterInvoker</h4><p>FailbackClusterInvoker 会在调用失败后，返回一个空结果给服务提供者。并通过定时任务对失败的调用进行重传，适合执行消息通知等操作。下面来看一下它的实现逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailbackClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RETRY_FAILED_PERIOD</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NamedInternalThreadFactory</span>(<span class="string">&quot;failback-cluster-timer&quot;</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; failed = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ScheduledFuture&lt;?&gt; retryFuture;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkInvokers(invokers, invocation);</span><br><span class="line">            <span class="comment">// 选择 Invoker</span></span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 进行调用</span></span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// 如果调用过程中发生异常，此时仅打印错误日志，不抛出异常</span></span><br><span class="line">            logger.error(<span class="string">&quot;Failback to invoke method ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录调用信息</span></span><br><span class="line">            addFailed(invocation, <span class="built_in">this</span>);</span><br><span class="line">            <span class="comment">// 返回一个空结果给服务消费者</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addFailed</span><span class="params">(Invocation invocation, AbstractClusterInvoker&lt;?&gt; router)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retryFuture == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (retryFuture == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 创建定时任务，每隔5秒执行一次</span></span><br><span class="line">                    retryFuture = scheduledExecutorService.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 对失败的调用进行重试</span></span><br><span class="line">                                retryFailed();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                                <span class="comment">// 如果发生异常，仅打印异常日志，不抛出</span></span><br><span class="line">                                logger.error(<span class="string">&quot;Unexpected error occur at collect statistic&quot;</span>, t);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 invocation 和 invoker 到 failed 中，</span></span><br><span class="line">        <span class="comment">// 这里的把 invoker 命名为 router，很奇怪，明显名不副实</span></span><br><span class="line">        failed.put(invocation, router);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retryFailed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 failed，对失败的调用进行重试</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt; entry : <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Invocation, AbstractClusterInvoker&lt;?&gt;&gt;(failed).entrySet()) &#123;</span><br><span class="line">            <span class="type">Invocation</span> <span class="variable">invocation</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            Invoker&lt;?&gt; invoker = entry.getValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 再次进行调用</span></span><br><span class="line">                invoker.invoke(invocation);</span><br><span class="line">                <span class="comment">// 调用成功，则从 failed 中移除 invoker</span></span><br><span class="line">                failed.remove(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// 仅打印异常，不抛出</span></span><br><span class="line">                logger.error(<span class="string">&quot;Failed retry to invoke method ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类主要由3个方法组成，首先是 doInvoker，该方法负责初次的远程调用。若远程调用失败，则通过 addFailed 方法将调用信息存入到 failed 中，等待定时重试。addFailed 在开始阶段会根据 retryFuture 为空与否，来决定是否开启定时任务。retryFailed 方法则是包含了失败重试的逻辑，该方法会对 failed 进行遍历，然后依次对 Invoker 进行调用。调用成功则将 Invoker 从 failed 中移除，调用失败则忽略失败原因。</p><p>以上就是 FailbackClusterInvoker 的执行逻辑，不是很复杂，继续往下看。</p><h4 id="3-2-3-FailfastClusterInvoker"><a href="#3-2-3-FailfastClusterInvoker" class="headerlink" title="3.2.3 FailfastClusterInvoker"></a>3.2.3 FailfastClusterInvoker</h4><p>FailfastClusterInvoker 只会进行一次调用，失败后立即抛出异常。适用于幂等操作，比如新增记录。楼主日常开发中碰到过一次程序连续插入三条同样的记录问题，原因是新增记录过程中包含了一些耗时操作，导致接口超时。而我当时使用的是 Dubbo 默认的 Cluster Invoker，即 FailoverClusterInvoker。其会在调用失败后进行重试，所以导致插入服务提供者插入了3条同样的数据。如果当时考虑使用 FailfastClusterInvoker，就不会出现这种问题了。当然此时接口仍然会超时，所以更合理的做法是使用 Dubbo 异步特性。或者优化服务逻辑，避免超时。</p><p>其他的不多说了，下面直接看源码吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailfastClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        checkInvokers(invokers, invocation);</span><br><span class="line">        <span class="comment">// 选择 Invoker</span></span><br><span class="line">        Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用 Invoker</span></span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RpcException &amp;&amp; ((RpcException) e).isBiz()) &#123;</span><br><span class="line">                <span class="comment">// 抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> (RpcException) e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(..., <span class="string">&quot;Failfast invoke providers ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码比较简单了，首先是通过 select 方法选择 Invoker，然后进行远程调用。如果调用失败，则立即抛出异常。FailfastClusterInvoker 就先分析到这，下面分析 FailsafeClusterInvoker。</p><h4 id="3-2-4-FailsafeClusterInvoker"><a href="#3-2-4-FailsafeClusterInvoker" class="headerlink" title="3.2.4 FailsafeClusterInvoker"></a>3.2.4 FailsafeClusterInvoker</h4><p>FailsafeClusterInvoker 是一种失败安全的 Cluster Invoker。所谓的失败安全是指，当调用过程中出现异常时，FailsafeClusterInvoker 仅会打印异常，而不会抛出异常。Dubbo 官方给出的应用场景是写入审计日志等操作，这个场景我在日常开发中没遇到过，没发言权，就不多说了。下面直接分析源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailsafeClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkInvokers(invokers, invocation);</span><br><span class="line">            <span class="comment">// 选择 Invoker</span></span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 进行远程调用</span></span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// 打印错误日志，但不抛出</span></span><br><span class="line">            logger.error(<span class="string">&quot;Failsafe ignore exception: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            <span class="comment">// 返回空结果忽略错误</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RpcResult</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FailsafeClusterInvoker 的逻辑和 FailfastClusterInvoker 的逻辑一样简单，因此就不多说了。继续下面分析。</p><h4 id="3-2-5-ForkingClusterInvoker"><a href="#3-2-5-ForkingClusterInvoker" class="headerlink" title="3.2.5 ForkingClusterInvoker"></a>3.2.5 ForkingClusterInvoker</h4><p>ForkingClusterInvoker 会在运行时通过线程池创建多个线程，并发调用多个服务提供者。只要有一个服务提供者成功返回了结果，doInvoke 方法就会立即结束运行。ForkingClusterInvoker 的应用场景是在一些对实时性要求比较高<strong>读操作</strong>（注意是读操作，并行写操作可能不安全）下使用，但这将会耗费更多的服务资源。下面来看该类的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkingClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newCachedThreadPool(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NamedInternalThreadFactory</span>(<span class="string">&quot;forking-cluster-timer&quot;</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkInvokers(invokers, invocation);</span><br><span class="line">            <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; selected;</span><br><span class="line">            <span class="comment">// 获取 forks 配置</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">forks</span> <span class="operator">=</span> getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS);</span><br><span class="line">            <span class="comment">// 获取超时配置</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">            <span class="comment">// 如果 forks 配置不合理，则直接将 invokers 赋值给 selected</span></span><br><span class="line">            <span class="keyword">if</span> (forks &lt;= <span class="number">0</span> || forks &gt;= invokers.size()) &#123;</span><br><span class="line">                selected = invokers;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                selected = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">                <span class="comment">// 循环选出 forks 个 Invoker，并添加到 selected 中</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; forks; i++) &#123;</span><br><span class="line">                    <span class="comment">// 选择 Invoker</span></span><br><span class="line">                    Invoker&lt;T&gt; invoker = select(loadbalance, invocation, invokers, selected);</span><br><span class="line">                    <span class="keyword">if</span> (!selected.contains(invoker)) &#123;</span><br><span class="line">                        selected.add(invoker);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ----------------------✨ 分割线1 ✨---------------------- //</span></span><br><span class="line"></span><br><span class="line">            RpcContext.getContext().setInvokers((List) selected);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">            <span class="keyword">final</span> BlockingQueue&lt;Object&gt; ref = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Object&gt;();</span><br><span class="line">            <span class="comment">// 遍历 selected 列表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> Invoker&lt;T&gt; invoker : selected) &#123;</span><br><span class="line">                <span class="comment">// 为每个 Invoker 创建一个执行线程</span></span><br><span class="line">                executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 进行远程调用</span></span><br><span class="line">                            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> invoker.invoke(invocation);</span><br><span class="line">                            <span class="comment">// 将结果存到阻塞队列中</span></span><br><span class="line">                            ref.offer(result);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> count.incrementAndGet();</span><br><span class="line">                            <span class="comment">// 仅在 value 大于等于 selected.size() 时，才将异常对象</span></span><br><span class="line">                            <span class="comment">// 放入阻塞队列中，请大家思考一下为什么要这样做。</span></span><br><span class="line">                            <span class="keyword">if</span> (value &gt;= selected.size()) &#123;</span><br><span class="line">                                <span class="comment">// 将异常对象存入到阻塞队列中</span></span><br><span class="line">                                ref.offer(e);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ----------------------✨ 分割线2 ✨---------------------- //</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 从阻塞队列中取出远程调用结果</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> ref.poll(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果结果类型为 Throwable，则抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (ret <span class="keyword">instanceof</span> Throwable) &#123;</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">e</span> <span class="operator">=</span> (Throwable) ret;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(..., <span class="string">&quot;Failed to forking invoke provider ...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回结果</span></span><br><span class="line">                <span class="keyword">return</span> (Result) ret;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Failed to forking invoke provider ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RpcContext.getContext().clearAttachments();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ForkingClusterInvoker 的 doInvoker 方法比较长，这里我通过两个分割线将整个方法划分为三个逻辑块。从方法开始，到分割线1之间的代码主要是用于选出 forks 个 Invoker，为接下来的并发调用提供输入。分割线1和分割线2之间的逻辑主要是通过线程池并发调用多个 Invoker，并将结果存储在阻塞队列中。分割线2到方法结尾之间的逻辑主要用于从阻塞队列中获取返回结果，并对返回结果类型进行判断。如果为异常类型，则直接抛出，否则返回。</p><p>以上就是ForkingClusterInvoker 的 doInvoker 方法大致过程。我在分割线1和分割线2之间的代码上留了一个问题，问题是这样的：为什么要在 value &gt;&#x3D; selected.size() 的情况下，才将异常对象添加到阻塞队列中？这里来解答一下。原因是这样的，在并行调用多个服务提供者的情况下，哪怕只有一个服务提供者成功返回结果，而其他全部失败。此时 ForkingClusterInvoker 仍应该返回成功的结果，而非抛出异常。在 value &gt;&#x3D; selected.size() 时将异常对象放入阻塞队列中，可以保证异常对象不会出现在正常结果的前面，这样可从阻塞队列中优先取出正常的结果。</p><p>好了，关于 ForkingClusterInvoker 就先分析到这，接下来分析最后一个 Cluster Invoker。</p><h4 id="3-2-6-BroadcastClusterInvoker"><a href="#3-2-6-BroadcastClusterInvoker" class="headerlink" title="3.2.6 BroadcastClusterInvoker"></a>3.2.6 BroadcastClusterInvoker</h4><p>本章的最后，我们再来看一下 BroadcastClusterInvoker。BroadcastClusterInvoker 会逐个调用每个服务提供者，如果其中一台报错，在循环调用结束后，BroadcastClusterInvoker 会抛出异常。看官方文档上的说明，该类通常用于通知所有提供者更新缓存或日志等本地资源信息。这个使用场景笔者也没遇到过，没法详细说明了，所以下面还是直接分析源码吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BroadcastClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        checkInvokers(invokers, invocation);</span><br><span class="line">        RpcContext.getContext().setInvokers((List) invokers);</span><br><span class="line">        <span class="type">RpcException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 遍历 Invoker 列表，逐个调用</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 进行远程调用</span></span><br><span class="line">                result = invoker.invoke(invocation);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                exception = e;</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                exception = <span class="keyword">new</span> <span class="title class_">RpcException</span>(e.getMessage(), e);</span><br><span class="line">                logger.warn(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// exception 不为空，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 BroadcastClusterInvoker 的代码，比较简单，就不多说了。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>本篇文章较为详细的分析了 Dubbo 集群容错方面的内容，并详细分析了集群容错的几种实现方式。集群容错对于 Dubbo 框架来说，是很重要的逻辑。集群模块处于服务提供者和消费者之间，对于服务消费者来说，集群可向其屏蔽服务提供者集群的情况，使其能够专心进行远程调用。除此之外，通过集群模块，我们还可以对服务之间的调用链路进行编排优化，治理服务。总的来说，对于 Dubbo 而言，集群容错相关逻辑是非常重要的。想要对 Dubbo 有比较深的理解，集群容错是绕不过去的。因此，对于这部分内容，大家要认真看一下。</p><p>好了，本篇文章就先到这，感谢大家的阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;七、Dubbo-源码分析-–-集群容错之-Cluster&quot;&gt;&lt;a href=&quot;#七、Dubbo-源码分析-–-集群容错之-Cluster&quot; class=&quot;headerlink&quot; title=&quot;七、Dubbo 源码分析 – 集群容错之 Cluster&quot;&gt;&lt;/a&gt;七、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 集群容错之 Router</title>
    <link href="https://hexo.tryrun.top/posts/aecb8de6.html"/>
    <id>https://hexo.tryrun.top/posts/aecb8de6.html</id>
    <published>2020-09-24T14:29:54.000Z</published>
    <updated>2020-09-24T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、Dubbo-源码分析-–-集群容错之-Router"><a href="#六、Dubbo-源码分析-–-集群容错之-Router" class="headerlink" title="六、Dubbo 源码分析 – 集群容错之 Router"></a>六、Dubbo 源码分析 – 集群容错之 Router</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>上一篇文章分析了集群容错的第一部分 – 服务目录 Directory。服务目录在刷新 Invoker 列表的过程中，会通过 Router 进行服务路由。上一篇文章关于服务路由相关逻辑没有细致分析，一笔带过了，本篇文章将对此进行详细的分析。首先，先来介绍一下服务目录是什么。服务路由包含一条路由规则，路由规则决定了服务消费者的调用目标，即规定了服务消费者可调用哪些服务提供者。Dubbo 目前提供了三种服务路由实现，分别为条件路由 ConditionRouter、脚本路由 ScriptRouter 和标签路由 TagRouter。其中条件路由是我们最常使用的，标签路由暂未在我所分析的 2.6.4 版本中提供，该实现会在 2.7.0 版本中提供。本篇文章将分析条件路由相关源码，脚本路由和标签路由这里就不分析了。下面进入正题。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><p>条件路由规则有两个条件组成，分别用于对服务消费者和提供者进行匹配。比如有这样一条规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host = 10.20.153.10 =&gt; host = 10.20.153.11</span><br></pre></td></tr></table></figure><p>该条规则表示 IP 为 10.20.153.10 的服务消费者<strong>只可</strong>调用 IP 为 10.20.153.11 机器上的服务，不可调用其他机器上的服务。条件路由规则的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[服务消费者匹配条件] =&gt; [服务提供者匹配条件]</span><br></pre></td></tr></table></figure><p>如果服务消费者匹配条件为空，表示不对服务消费者进行限制。如果服务提供者匹配条件为空，表示对某些服务消费者禁用服务。Dubbo 官方文档对条件路由进行了比较详细的介绍，大家可以参考下，这里就不过多说明了。</p><p>条件路由实现类 ConditionRouter 需要对用户配置的路由规则进行解析，得到一系列的条件。然后再根据这些条件对服务进行路由。本章将分两节进行说明，2.1节介绍表达式解析过程。2.2 节介绍服务路由的过程。接下来，我们先从表达式解析过程看起。</p><h3 id="2-1-表达式解析"><a href="#2-1-表达式解析" class="headerlink" title="2.1 表达式解析"></a>2.1 表达式解析</h3><p>条件路由规则是一条字符串，对于 Dubbo 来说，它并不能直接理解字符串的意思，需要将其解析成内部格式才行。条件表达式的解析过程始于 ConditionRouter 的构造方法，下面一起看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConditionRouter</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.url = url;</span><br><span class="line">    <span class="comment">// 获取 priority 和 force 配置</span></span><br><span class="line">    <span class="built_in">this</span>.priority = url.getParameter(Constants.PRIORITY_KEY, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">this</span>.force = url.getParameter(Constants.FORCE_KEY, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取路由规则</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rule</span> <span class="operator">=</span> url.getParameterAndDecoded(Constants.RULE_KEY);</span><br><span class="line">        <span class="keyword">if</span> (rule == <span class="literal">null</span> || rule.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal route rule!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rule = rule.replace(<span class="string">&quot;consumer.&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;provider.&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 定位 =&gt; 分隔符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rule.indexOf(<span class="string">&quot;=&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 分别获取服务消费者和提供者匹配规则</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">whenRule</span> <span class="operator">=</span> i &lt; <span class="number">0</span> ? <span class="literal">null</span> : rule.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">        <span class="type">String</span> <span class="variable">thenRule</span> <span class="operator">=</span> i &lt; <span class="number">0</span> ? rule.trim() : rule.substring(i + <span class="number">2</span>).trim();</span><br><span class="line">        <span class="comment">// 解析服务消费者匹配规则</span></span><br><span class="line">        Map&lt;String, MatchPair&gt; when = </span><br><span class="line">            StringUtils.isBlank(whenRule) || <span class="string">&quot;true&quot;</span>.equals(whenRule) </span><br><span class="line">                ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, MatchPair&gt;() : parseRule(whenRule);</span><br><span class="line">        <span class="comment">// 解析服务提供者匹配规则</span></span><br><span class="line">        Map&lt;String, MatchPair&gt; then = </span><br><span class="line">            StringUtils.isBlank(thenRule) || <span class="string">&quot;false&quot;</span>.equals(thenRule) </span><br><span class="line">                ? <span class="literal">null</span> : parseRule(thenRule);</span><br><span class="line">        <span class="built_in">this</span>.whenCondition = when;</span><br><span class="line">        <span class="built_in">this</span>.thenCondition = then;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，ConditionRouter 构造方法先是对路由规则做预处理，然后调用 parseRule 方法分别对服务提供者和消费者规则进行解析，最后将解析结果赋值给 whenCondition 和 thenCondition 成员变量。ConditionRouter 构造方法不是很复杂，这里就不多说了。下面我们把重点放在 parseRule 方法上，在详细介绍这个方法之前，我们先来看一个内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MatchPair</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; matches = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; mismatches = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MatchPair 内部包含了两个 Set 型的成员变量，分别用于存放匹配和不匹配的条件。这个类两个成员变量会在 parseRule 方法中被用到，下面来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MatchPair&gt; <span class="title function_">parseRule</span><span class="params">(String rule)</span></span><br><span class="line">        <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="comment">// 定义条件映射集合</span></span><br><span class="line">    Map&lt;String, MatchPair&gt; condition = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, MatchPair&gt;();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(rule)) &#123;</span><br><span class="line">        <span class="keyword">return</span> condition;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MatchPair</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Set&lt;String&gt; values = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 通过正则表达式匹配路由规则，ROUTE_PATTERN = ([&amp;!=,]*)\s*([^&amp;!=,\s]+)</span></span><br><span class="line">    <span class="comment">// 这个表达式看起来不是很好理解，第一个括号内的表达式用于匹配&quot;&amp;&quot;, &quot;!&quot;, &quot;=&quot; 和 &quot;,&quot; 等符号。</span></span><br><span class="line">    <span class="comment">// 第二括号内的用于匹配英文字母，数字等字符。举个例子说明一下：</span></span><br><span class="line">    <span class="comment">//    host = 2.2.2.2 &amp; host != 1.1.1.1 &amp; method = hello</span></span><br><span class="line">    <span class="comment">// 匹配结果如下：</span></span><br><span class="line">    <span class="comment">//     括号一      括号二</span></span><br><span class="line">    <span class="comment">// 1.  null       host</span></span><br><span class="line">    <span class="comment">// 2.   =         2.2.2.2</span></span><br><span class="line">    <span class="comment">// 3.   &amp;         host</span></span><br><span class="line">    <span class="comment">// 4.   !=        1.1.1.1 </span></span><br><span class="line">    <span class="comment">// 5.   &amp;         method</span></span><br><span class="line">    <span class="comment">// 6.   =         hello</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> ROUTE_PATTERN.matcher(rule);</span><br><span class="line">    <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">           <span class="comment">// 获取括号一内的匹配结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">separator</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 获取括号二内的匹配结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 分隔符为空，表示匹配的是表达式的开始部分</span></span><br><span class="line">        <span class="keyword">if</span> (separator == <span class="literal">null</span> || separator.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建 MatchPair 对象</span></span><br><span class="line">            pair = <span class="keyword">new</span> <span class="title class_">MatchPair</span>();</span><br><span class="line">            <span class="comment">// 存储 &lt;匹配项, MatchPair&gt; 键值对，比如 &lt;host, MatchPair&gt;</span></span><br><span class="line">            condition.put(content, pair); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果分隔符为 &amp;，表明接下来也是一个条件</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;&amp;&quot;</span>.equals(separator)) &#123;</span><br><span class="line">            <span class="comment">// 尝试从 condition 获取 MatchPair</span></span><br><span class="line">            <span class="keyword">if</span> (condition.get(content) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 未获取到 MatchPair，重新创建一个，并放入 condition 中</span></span><br><span class="line">                pair = <span class="keyword">new</span> <span class="title class_">MatchPair</span>();</span><br><span class="line">                condition.put(content, pair);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pair = condition.get(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔符为 =</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;=&quot;</span>.equals(separator)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;Illegal route rule ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            values = pair.matches;</span><br><span class="line">            <span class="comment">// 将 content 存入到 MatchPair 的 matches 集合中</span></span><br><span class="line">            values.add(content);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//  分隔符为 != </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;!=&quot;</span>.equals(separator)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;Illegal route rule ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            values = pair.mismatches;</span><br><span class="line">            <span class="comment">// 将 content 存入到 MatchPair 的 mismatches 集合中</span></span><br><span class="line">            values.add(content);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔符为 ,</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;,&quot;</span>.equals(separator)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (values == <span class="literal">null</span> || values.isEmpty())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;Illegal route rule ...&quot;</span>);</span><br><span class="line">            <span class="comment">// 将 content 存入到上一步获取到的 values 中，可能是 matches，也可能是 mismatches</span></span><br><span class="line">            values.add(content);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;Illegal route rule ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> condition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是路由规则的解析逻辑，该逻辑由正则表达式 + 一个 while 循环 + 数个条件分支组成。下面使用一个示例对解析逻辑进行演绎。示例为 <code>host = 2.2.2.2 &amp; host != 1.1.1.1 &amp; method = hello</code>。正则解析结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    括号一      括号二</span><br><span class="line">1.  null       host</span><br><span class="line">2.   =         2.2.2.2</span><br><span class="line">3.   &amp;         host</span><br><span class="line">4.   !=        1.1.1.1</span><br><span class="line">5.   &amp;         method</span><br><span class="line">6.   =         hello</span><br></pre></td></tr></table></figure><p>现在线程进入 while 循环：</p><p>第一次循环：分隔符 separator &#x3D; null，content &#x3D; “host”。此时创建 MatchPair 对象，并存入到 condition 中，condition &#x3D; {“host”: MatchPair@123}</p><p>第二次循环：分隔符 separator &#x3D; “&#x3D;”，content &#x3D; “2.2.2.2”，pair &#x3D; MatchPair@123。此时将 2.2.2.2 放入到 MatchPair@123 对象的 matches 集合中。</p><p>第三次循环：分隔符 separator &#x3D; “&amp;”，content &#x3D; “host”。host 已存在于 condition 中，因此 pair &#x3D; MatchPair@123。</p><p>第四次循环：分隔符 separator &#x3D; “!&#x3D;”，content &#x3D; “1.1.1.1”，pair &#x3D; MatchPair@123。此时将 1.1.1.1 放入到 MatchPair@123 对象的 mismatches 集合中。</p><p>第五次循环：分隔符 separator &#x3D; “&amp;”，content &#x3D; “method”。condition.get(“method”) &#x3D; null，因此新建一个 MatchPair 对象，并放入到 condition 中。此时 condition &#x3D; {“host”: MatchPair@123, “method”: MatchPair@ 456}</p><p>第六次循环：分隔符 separator &#x3D; “&#x3D;”，content &#x3D; “2.2.2.2”，pair &#x3D; MatchPair@456。此时将 hello 放入到 MatchPair@456 对象的 matches 集合中。</p><p>循环结束，此时 condition 的内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;2.2.2.2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mismatches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;1.1.1.1&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hello&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mismatches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>路由规则的解析过程稍微有点复杂，大家可通过 ConditionRouter 的测试类对该逻辑进行测试。并且找一个表达式，对照上面的代码走一遍，加深理解。关于路由规则的解析过程就先到这，我们继续往下看。</p><h3 id="2-2-服务路由"><a href="#2-2-服务路由" class="headerlink" title="2.2 服务路由"></a>2.2 服务路由</h3><p>服务路由的入口方法是 ConditionRouter 的 router 方法，该方法定义在 Router 接口中。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">route</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span></span><br><span class="line">        <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="keyword">if</span> (invokers == <span class="literal">null</span> || invokers.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先对服务消费者条件进行匹配，如果匹配失败，表明当前消费者 url 不符合匹配规则，</span></span><br><span class="line">        <span class="comment">// 无需进行后续匹配，直接返回 Invoker 列表即可。比如下面的规则：</span></span><br><span class="line">        <span class="comment">//     host = 10.20.153.10 =&gt; host = 10.0.0.10</span></span><br><span class="line">        <span class="comment">// 这条路由规则希望 IP 为 10.20.153.10 的服务消费者调用 IP 为 10.0.0.10 机器上的服务。</span></span><br><span class="line">        <span class="comment">// 当消费者 ip 为 10.20.153.11 时，matchWhen 返回 false，表明当前这条路由规则不适用于</span></span><br><span class="line">        <span class="comment">// 当前的服务消费者，此时无需再进行后续匹配，直接返回即可。</span></span><br><span class="line">        <span class="keyword">if</span> (!matchWhen(url, invocation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokers;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">        <span class="comment">// 服务提供者匹配条件未配置，表明对指定的服务消费者禁用服务，也就是服务消费者在黑名单中</span></span><br><span class="line">        <span class="keyword">if</span> (thenCondition == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;The current consumer in the service blacklist...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里可以简单的把 Invoker 理解为服务提供者，现在使用服务提供者匹配规则对 </span></span><br><span class="line">        <span class="comment">// Invoker 列表进行匹配</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="comment">// 匹配成功，表明当前 Invoker 符合服务提供者匹配规则。</span></span><br><span class="line">            <span class="comment">// 此时将 Invoker 添加到 result 列表中</span></span><br><span class="line">            <span class="keyword">if</span> (matchThen(invoker.getUrl(), url)) &#123;</span><br><span class="line">                result.add(invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回匹配结果，如果 result 为空列表，且 force = true，表示强制返回空列表，</span></span><br><span class="line">        <span class="comment">// 否则路由结果为空的路由规则将自动失效</span></span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (force) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;The route result is empty and force execute ...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Failed to execute condition router rule: ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原样返回，此时 force = false，表示该条路由规则失效</span></span><br><span class="line">    <span class="keyword">return</span> invokers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router 方法先是调用 matchWhen 对服务消费者进行匹配，如果匹配失败，直接返回 Invoker 列表。如果匹配成功，再对服务提供者进行匹配，匹配逻辑封装在了 matchThen 方法中。下面来看一下这两个方法的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">matchWhen</span><span class="params">(URL url, Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="comment">// 服务消费者条件为 null 或空，均返回 true，比如：</span></span><br><span class="line">    <span class="comment">//     =&gt; host != 172.22.3.91</span></span><br><span class="line">    <span class="comment">// 表示所有的服务消费者都不得调用 IP 为 172.22.3.91 的机器上的服务</span></span><br><span class="line">    <span class="keyword">return</span> whenCondition == <span class="literal">null</span> || whenCondition.isEmpty() </span><br><span class="line">        || matchCondition(whenCondition, url, <span class="literal">null</span>, invocation);  <span class="comment">// 进行条件匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">matchThen</span><span class="params">(URL url, URL param)</span> &#123;</span><br><span class="line">    <span class="comment">// 服务提供者条件为 null 或空，表示禁用服务</span></span><br><span class="line">    <span class="keyword">return</span> !(thenCondition == <span class="literal">null</span> || thenCondition.isEmpty()) </span><br><span class="line">        &amp;&amp; matchCondition(thenCondition, url, param, <span class="literal">null</span>);  <span class="comment">// 进行条件匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法长的有点像，不过逻辑上还是有差别的，大家注意看。这两个方法均调用了 matchCondition 方法，不过它们所传入的参数是不同的，这个需要特别注意。不然后面的逻辑不好弄懂。下面我们对这几个参数进行溯源。matchWhen 方法向 matchCondition 方法传入的参数为 [whenCondition, url, null, invocation]，第一个参数 whenCondition 为服务消费者匹配条件，这个前面分析过。第二个参数 url 源自 route 方法的参数列表，该参数由外部类调用 route 方法时传入。有代码为证，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">route</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, String method)</span> &#123;</span><br><span class="line">    <span class="type">Invocation</span> <span class="variable">invocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcInvocation</span>(method, <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    List&lt;Router&gt; routers = getRouters();</span><br><span class="line">    <span class="keyword">if</span> (routers != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Router router : routers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (router.getUrl() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 注意第二个参数</span></span><br><span class="line">                invokers = router.route(invokers, getConsumerUrl(), invocation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invokers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码来自 RegistryDirectory，第二个参数表示的是服务消费者 url。matchCondition 的 invocation 参数也是从这里传入的。</p><p>接下来再来看看 matchThen 向 matchCondition 方法传入的参数 [thenCondition, url, param, null]。第一个参数不用解释了。第二个和第三个参数来自 matchThen 方法的参数列表，这两个参数分别为服务提供者 url 和服务消费者 url。搞清楚这些参数来源后，接下俩就可以分析 matchCondition 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">matchCondition</span><span class="params">(Map&lt;String, MatchPair&gt; condition, URL url, URL param, Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="comment">// 将服务提供者或消费者 url 转成 Map</span></span><br><span class="line">    Map&lt;String, String&gt; sample = url.toMap();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 遍历 condition 列表</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, MatchPair&gt; matchPair : condition.entrySet()) &#123;</span><br><span class="line">        <span class="comment">// 获取匹配项名称，比如 host、method 等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> matchPair.getKey();</span><br><span class="line">        String sampleValue;</span><br><span class="line">        <span class="comment">// 如果 invocation 不为空，且 key 为 mehtod(s)，表示进行方法匹配</span></span><br><span class="line">        <span class="keyword">if</span> (invocation != <span class="literal">null</span> &amp;&amp; (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) &#123;</span><br><span class="line">            <span class="comment">// 从 invocation 获取调用方法名称</span></span><br><span class="line">            sampleValue = invocation.getMethodName();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 从服务提供者或消费者 url 中获取指定字段值，比如 host、application 等</span></span><br><span class="line">            sampleValue = sample.get(key);</span><br><span class="line">            <span class="keyword">if</span> (sampleValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 尝试通过 default.xxx 获取相应的值</span></span><br><span class="line">                sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// --------------------✨ 分割线 ✨-------------------- //</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sampleValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用 MatchPair 的 isMatch 方法进行匹配</span></span><br><span class="line">            <span class="keyword">if</span> (!matchPair.getValue().isMatch(sampleValue, param)) &#123;</span><br><span class="line">                <span class="comment">// 只要有一个规则匹配失败，立即返回 false 结束方法逻辑</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// sampleValue 为空，表明服务提供者或消费者 url 中不包含相关字段。此时如果 </span></span><br><span class="line">            <span class="comment">// MatchPair 的 matches 不为空，表示匹配失败，返回 false。比如我们有这样</span></span><br><span class="line">            <span class="comment">// 一条匹配条件 loadbalance = random，假设 url 中并不包含 loadbalance 参数，</span></span><br><span class="line">            <span class="comment">// 此时 sampleValue = null。既然路由规则里限制了 loadbalance = random，</span></span><br><span class="line">            <span class="comment">// 但 sampleValue = null，明显不符合规则，因此返回 false</span></span><br><span class="line">            <span class="keyword">if</span> (!matchPair.getValue().matches.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，matchCondition 方法看起来有点复杂，这里简单缕缕。分割线以上的代码实际上主要是用于获取 sampleValue 的值，分割线以下才是进行条件匹配。条件匹配调用的逻辑封装在 isMatch 中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String value, URL param)</span> &#123;</span><br><span class="line">    <span class="comment">// 情况一：matches 非空，mismatches 为空</span></span><br><span class="line">    <span class="keyword">if</span> (!matches.isEmpty() &amp;&amp; mismatches.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 遍历 matches 集合，检测入参 value 是否能被 matches 集合元素匹配到。</span></span><br><span class="line">        <span class="comment">// 举个例子，如果 value = 10.20.153.11，matches = [10.20.153.*],</span></span><br><span class="line">        <span class="comment">// 此时 isMatchGlobPattern 方法返回 true</span></span><br><span class="line">        <span class="keyword">for</span> (String match : matches) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(match, value, param)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果所有匹配项都无法匹配到入参，则返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况二：matches 为空，mismatches 非空</span></span><br><span class="line">    <span class="keyword">if</span> (!mismatches.isEmpty() &amp;&amp; matches.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String mismatch : mismatches) &#123;</span><br><span class="line">            <span class="comment">// 只要入参被 mismatches 集合中的任意一个元素匹配到，就返回 false</span></span><br><span class="line">            <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(mismatch, value, param)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mismatches 集合中所有元素都无法匹配到入参，此时返回 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况三：matches 非空，mismatches 非空</span></span><br><span class="line">    <span class="keyword">if</span> (!matches.isEmpty() &amp;&amp; !mismatches.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// matches 和 mismatches 均为非空，此时优先使用 mismatches 集合元素对入参进行匹配。</span></span><br><span class="line">        <span class="comment">// 只要 mismatches 集合中任意一个元素与入参匹配成功，就立即返回 false，结束方法逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (String mismatch : mismatches) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(mismatch, value, param)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mismatches 集合元素无法匹配到入参，此时使用 matches 继续匹配</span></span><br><span class="line">        <span class="keyword">for</span> (String match : matches) &#123;</span><br><span class="line">            <span class="comment">// 只要 matches 集合中任意一个元素与入参匹配成功，就立即返回 true</span></span><br><span class="line">            <span class="keyword">if</span> (UrlUtils.isMatchGlobPattern(match, value, param)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况四：matches 和 mismatches 均为空，此时返回 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isMatch 方法逻辑比较清晰，由三个条件分支组成，用于处理四种情况。这里对四种情况下的匹配逻辑进行简单的总结，如下：</p><table><thead><tr><th align="center"></th><th align="center">条件</th><th align="center">动作</th></tr></thead><tbody><tr><td align="center">情况一</td><td align="center">matches 非空，mismatches 为空</td><td align="center">遍历 matches 集合元素，并与入参进行匹配。只要有一个元素成功匹配入参，即可返回 true。若全部失配，则返回 false。</td></tr><tr><td align="center">情况二</td><td align="center">matches 为空，mismatches 非空</td><td align="center">遍历 mismatches 集合元素，并与入参进行匹配。只要有一个元素成功匹配入参，立即 false。若全部失配，则返回 true。</td></tr><tr><td align="center">情况三</td><td align="center">matches 非空，mismatches 非空</td><td align="center">优先使用 mismatches 集合元素对入参进行匹配，只要任一元素与入参匹配成功，就立即返回 false，结束方法逻辑。否则再使用 matches 中的集合元素进行匹配，只要有任意一个元素匹配成功，即可返回 true。若全部失配，则返回 false</td></tr><tr><td align="center">情况四</td><td align="center">matches 为空，mismatches 为空</td><td align="center">直接返回 false</td></tr></tbody></table><p>isMatch 方法逻辑不是很难理解，大家自己再看看。下面继续分析 isMatchGlobPattern 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatchGlobPattern</span><span class="params">(String pattern, String value, URL param)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (param != <span class="literal">null</span> &amp;&amp; pattern.startsWith(<span class="string">&quot;$&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 引用服务消费者参数，param 参数为服务消费者 url</span></span><br><span class="line">        pattern = param.getRawParameter(pattern.substring(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用重载方法继续比较</span></span><br><span class="line">    <span class="keyword">return</span> isMatchGlobPattern(pattern, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isMatchGlobPattern</span><span class="params">(String pattern, String value)</span> &#123;</span><br><span class="line">    <span class="comment">// 对 * 通配符提供支持</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(pattern))</span><br><span class="line">        <span class="comment">// 匹配规则为通配符 *，直接返回 true 即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pattern == <span class="literal">null</span> || pattern.length() == <span class="number">0</span>)</span><br><span class="line">            &amp;&amp; (value == <span class="literal">null</span> || value.length() == <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// pattern 和 value 均为空，此时可认为两者相等，返回 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pattern == <span class="literal">null</span> || pattern.length() == <span class="number">0</span>)</span><br><span class="line">            || (value == <span class="literal">null</span> || value.length() == <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// pattern 和 value 其中有一个为空，两者不相等，返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找 * 通配符位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pattern.lastIndexOf(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 匹配规则中不包含通配符，此时直接比较 value 和 pattern 是否相等即可，并返回比较结果</span></span><br><span class="line">        <span class="keyword">return</span> value.equals(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通配符 &quot;*&quot; 在匹配规则尾部，比如 10.0.21.*</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == pattern.length() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 检测 value 是否以不含通配符的匹配规则开头，并返回结果。比如:</span></span><br><span class="line">        <span class="comment">// pattern = 10.0.21.*，value = 10.0.21.12，此时返回 true</span></span><br><span class="line">        <span class="keyword">return</span> value.startsWith(pattern.substring(<span class="number">0</span>, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通配符 &quot;*&quot; 在匹配规则头部</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检测 value 是否以不含通配符的匹配规则结尾，并返回结果</span></span><br><span class="line">        <span class="keyword">return</span> value.endsWith(pattern.substring(i + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通配符 &quot;*&quot; 在匹配规则中间位置</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过通配符将 pattern 分成两半，得到 prefix 和 suffix</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> pattern.substring(<span class="number">0</span>, i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> pattern.substring(i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 检测 value 是否以 prefix 变量开头，且以 suffix 变量结尾，并返回结果</span></span><br><span class="line">        <span class="keyword">return</span> value.startsWith(prefix) &amp;&amp; value.endsWith(suffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 isMatchGlobPattern 两个重载方法的全部逻辑，这两个方法分别对普通的匹配，以及”引用消费者参数“和通配符匹配做了支持。这两个方法的逻辑并不是很复杂，而且我也在代码上进行了比较详细的注释，大家自己看看吧，就不多说了。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本篇文章对条件路由的表达式解析和服务路由过程进行了较为细致的分析。总的来说，条件路由的代码还是有一些复杂的，需要静下心来看。在阅读条件路由代码的过程中，要多调试。一般的框架都会有单元测试，Dubbo 也不例外，因此大家可以直接通过 ConditionRouterTest 对条件路由进行调试，无需自己手写测试用例。</p><p>好了，关于条件路由就先分析到这，谢谢阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、Dubbo-源码分析-–-集群容错之-Router&quot;&gt;&lt;a href=&quot;#六、Dubbo-源码分析-–-集群容错之-Router&quot; class=&quot;headerlink&quot; title=&quot;六、Dubbo 源码分析 – 集群容错之 Router&quot;&gt;&lt;/a&gt;六、Dub</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 集群容错之Directory</title>
    <link href="https://hexo.tryrun.top/posts/1c48ee72.html"/>
    <id>https://hexo.tryrun.top/posts/1c48ee72.html</id>
    <published>2020-09-23T14:29:54.000Z</published>
    <updated>2020-09-23T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、Dubbo-源码分析-–-集群容错之Directory"><a href="#五、Dubbo-源码分析-–-集群容错之Directory" class="headerlink" title="五、Dubbo 源码分析 – 集群容错之Directory"></a>五、Dubbo 源码分析 – 集群容错之Directory</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>前面文章分析了服务的导出与引用过程，从本篇文章开始，我将开始分析 Dubbo 集群容错方面的源码。这部分源码包含四个部分，分别是服务目录 Directory、服务路由 Router、集群 Cluster 和负载均衡 LoadBalance。这几个部分的源码逻辑比较独立，我会分四篇文章进行分析。本篇文章作为集群容错的开篇文章，将和大家一起分析服务目录相关的源码。在进行深入分析之前，我们先来了解一下服务目录是什么。服务目录中存储了一些和服务提供者有关的信息，通过服务目录，服务消费者可获取到服务提供者的信息，比如 ip、端口、服务协议等。通过这些信息，服务消费者就可通过 Netty 等客户端进行远程调用。在一个服务集群中，服务提供者数量并不是一成不变的，如果集群中新增了一台机器，相应地在服务目录中就要新增一条服务提供者记录。或者，如果服务提供者的配置修改了，服务目录中的记录也要做相应的更新。如果这样说，服务目录和注册中心的功能不就雷同了吗。确实如此，这里这么说是为了方便大家理解。实际上服务目录在获取注册中心的服务配置信息后，会为每条配置信息生成一个 Invoker 对象，并把这个 Invoker 对象存储起来，这个 Invoker 才是服务目录最终持有的对象。Invoker 有什么用呢？看名字就知道了，这是一个具有远程调用功能的对象。讲到这大家应该知道了什么是服务目录了，它可以看做是 Invoker 集合，且这个集合中的元素会随注册中心的变化而进行动态调整。</p><p>好了，关于服务目录这里就先介绍这些，大家先有个大致印象即可。接下来我们通过继承体系图来了解一下服务目录的家族成员都有哪些。</p><h2 id="2-继承体系"><a href="#2-继承体系" class="headerlink" title="2. 继承体系"></a>2. 继承体系</h2><p>服务目录目前内置的实现有两个，分别为 StaticDirectory 和 RegistryDirectory，它们均是 AbstractDirectory 的子类。AbstractDirectory 实现了 Directory 接口，这个接口包含了一个重要的方法定义，即 list(Invocation)，用于列举 Invoker。</p><p>如上，Directory 继承自 Node 接口，Node 这个接口继承者比较多，像 Registry、Monitor、Invoker 等继承了这个接口。这个接口包含了一个获取配置信息的方法 getUrl，实现该接口的类可以向外提供配置信息。另外，大家注意看 RegistryDirectory 实现了 NotifyListener 接口，当注册中心节点信息发生变化后，RegistryDirectory 可以通过此接口方法得到变更信息，并根据变更信息动态调整内部 Invoker 列表。</p><p>现在大家对服务目录的继承体系应该比较清楚了，下面我们深入到源码中，探索服务目录是如何实现的。</p><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3. 源码分析"></a>3. 源码分析</h2><p>本章我将分析 AbstractDirectory 和它两个子类的源码。这里之所以要分析 AbstractDirectory，而不是直接分析子类是有一定原因的。AbstractDirectory 封装了 Invoker 列举流程，具体的列举逻辑则由子类实现，这是典型的模板模式。所以，接下来我们先来看一下 AbstractDirectory 的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">list</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Directory already destroyed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 doList 方法列举 Invoker，这里的 doList 是模板方法，由子类实现</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = doList(invocation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取路由器</span></span><br><span class="line">    List&lt;Router&gt; localRouters = <span class="built_in">this</span>.routers;</span><br><span class="line">    <span class="keyword">if</span> (localRouters != <span class="literal">null</span> &amp;&amp; !localRouters.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Router router : localRouters) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 获取 runtime 参数，并根据参数决定是否进行路由</span></span><br><span class="line">                <span class="keyword">if</span> (router.getUrl() == <span class="literal">null</span> || router.getUrl().getParameter(Constants.RUNTIME_KEY, <span class="literal">false</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 进行服务路由</span></span><br><span class="line">                    invokers = router.route(invokers, getConsumerUrl(), invocation);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;Failed to execute router: ...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> invokers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板方法，由子类实现</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">doList</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException;</span><br></pre></td></tr></table></figure><p>上面就是 AbstractDirectory 的 list 方法源码，这个方法封装了 Invoker 的列举过程。如下：</p><ol><li>调用 doList 获取 Invoker 列表</li><li>根据 Router 的 getUrl 返回值为空与否，以及 runtime 参数决定是否进行服务路由</li></ol><p>以上步骤中，doList 是模板方法，需由子类实现。Router 的 runtime 参数这里简单说明一下，这个参数决定了是否在每次调用服务时都执行路由规则。如果 runtime 为 true，那么每次调用服务前，都需要进行服务路由。这个对性能造成影响，慎重配置。关于该参数更详细的说明，请参考<a href="http://dubbo.apache.org/zh-cn/docs/user/demos/routing-rule.html">官方文档</a>。</p><p>介绍完 AbstractDirectory，接下来我们开始分析子类的源码。</p><h3 id="3-1-StaticDirectory"><a href="#3-1-StaticDirectory" class="headerlink" title="3.1 StaticDirectory"></a>3.1 StaticDirectory</h3><p>StaticDirectory 即静态服务目录，顾名思义，它内部存放的 Invoker 是不会变动的。所以，理论上它和不可变 List 的功能很相似。下面我们来看一下这个类的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDirectory</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractDirectory</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoker 列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;T&gt; <span class="title function_">getInterface</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取接口类</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>).getInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测服务目录是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDestroyed()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (invoker.isAvailable()) &#123;</span><br><span class="line">                <span class="comment">// 只要有一个 Invoker 是可用的，就任务当前目录是可用的</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDestroyed()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用父类销毁逻辑</span></span><br><span class="line">        <span class="built_in">super</span>.destroy();</span><br><span class="line">        <span class="comment">// 遍历 Invoker 列表，并执行相应的销毁逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            invoker.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        invokers.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">doList</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="comment">// 列举 Inovker，也就是直接返回 invokers 成员变量</span></span><br><span class="line">        <span class="keyword">return</span> invokers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 StaticDirectory 的代码逻辑，很简单，大家都能看懂，我就不多说了。下面来看看 RegistryDirectory，这个类的逻辑比较复杂。</p><h3 id="3-2-RegistryDirectory"><a href="#3-2-RegistryDirectory" class="headerlink" title="3.2 RegistryDirectory"></a>3.2 RegistryDirectory</h3><p>RegistryDirectory 是一种动态服务目录，它实现了 NotifyListener 接口。当注册中心服务配置发生变化后，RegistryDirectory 可收到与当前服务相关的变化。收到变更通知后，RegistryDirectory 可根据配置变更信息刷新 Invoker 列表。RegistryDirectory 中有几个比较重要的逻辑，第一是 Invoker 的列举逻辑，第二是接受服务配置变更的逻辑，第三是 Invoker 的刷新逻辑。接下来，我将按顺序对这三块逻辑。</p><h4 id="3-2-1-列举-Invoker"><a href="#3-2-1-列举-Invoker" class="headerlink" title="3.2.1 列举 Invoker"></a>3.2.1 列举 Invoker</h4><p>Invoker 列举逻辑封装在 doList 方法中，这是个模板方法，前面已经介绍过了。那这里就不过多啰嗦了，我们直入主题吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; <span class="title function_">doList</span><span class="params">(Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (forbidden) &#123;</span><br><span class="line">        <span class="comment">// 服务提供者关闭或禁用了服务，此时抛出 No provider 异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(RpcException.FORBIDDEN_EXCEPTION,</span><br><span class="line">            <span class="string">&quot;No provider available from registry ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokers = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取 Invoker 本地缓存</span></span><br><span class="line">    Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; localMethodInvokerMap = <span class="built_in">this</span>.methodInvokerMap;</span><br><span class="line">    <span class="keyword">if</span> (localMethodInvokerMap != <span class="literal">null</span> &amp;&amp; localMethodInvokerMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取方法名和参数列表</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> RpcUtils.getMethodName(invocation);</span><br><span class="line">        Object[] args = RpcUtils.getArguments(invocation);</span><br><span class="line">        <span class="comment">// 检测参数列表的第一个参数是否为 String 或 enum 类型</span></span><br><span class="line">        <span class="keyword">if</span> (args != <span class="literal">null</span> &amp;&amp; args.length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; (args[<span class="number">0</span>] <span class="keyword">instanceof</span> String || args[<span class="number">0</span>].getClass().isEnum())) &#123;</span><br><span class="line">            <span class="comment">// 通过 方法名 + 第一个参数名称 查询 Invoker 列表，具体的使用场景暂时没想到</span></span><br><span class="line">            invokers = localMethodInvokerMap.get(methodName + <span class="string">&quot;.&quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokers == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过方法名获取 Invoker 列表</span></span><br><span class="line">            invokers = localMethodInvokerMap.get(methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokers == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过星号 * 获取 Invoker 列表</span></span><br><span class="line">            invokers = localMethodInvokerMap.get(Constants.ANY_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokers == <span class="literal">null</span>) &#123;</span><br><span class="line">            Iterator&lt;List&lt;Invoker&lt;T&gt;&gt;&gt; iterator = localMethodInvokerMap.values().iterator();</span><br><span class="line">            <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="comment">// 通过迭代器获取 Invoker 列表</span></span><br><span class="line">                invokers = iterator.next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 Invoker 列表</span></span><br><span class="line">    <span class="keyword">return</span> invokers == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;(<span class="number">0</span>) : invokers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码进行多次尝试，以期从 localMethodInvokerMap 中获取到 Invoker 列表。一般情况下，普通的调用可通过方法名获取到对应的 Invoker 列表，泛化调用可通过 ***** 获取到 Invoker 列表。按现有的逻辑，不管什么情况下，***** 到 Invoker 列表的映射关系 &lt;*****, invokers&gt; 总是存在的，也就意味着 localMethodInvokerMap.get(Constants.ANY_VALUE) 总是有值返回。除非这个值是 null，才会通过通过迭代器获取 Invoker 列表。至于什么情况下为空，我暂时未完全搞清楚，我猜测是被路由规则（用户可基于 Router 接口实现自定义路由器）处理后，可能会得到一个 null。目前仅是猜测，未做验证。</p><p>本节的逻辑主要是从 localMethodInvokerMap 中获取 Invoker，localMethodInvokerMap 源自 RegistryDirectory 类的成员变量 methodInvokerMap。doList 方法可以看做是对 methodInvokerMap 变量的读操作，至于对 methodInvokerMap 变量的写操作，这个将在后续进行分析。</p><h4 id="3-2-2-接收服务变更通知"><a href="#3-2-2-接收服务变更通知" class="headerlink" title="3.2.2 接收服务变更通知"></a>3.2.2 接收服务变更通知</h4><p>RegistryDirectory 是一个动态服务目录，它需要接受注册中心配置进行动态调整。因此 RegistryDirectory 实现了 NotifyListener 接口，通过这个接口获取注册中心变更通知。下面我们来看一下具体的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(List&lt;URL&gt; urls)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义三个集合，分别用于存放服务提供者 url，路由 url，配置器 url</span></span><br><span class="line">    List&lt;URL&gt; invokerUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; routerUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;URL&gt;();</span><br><span class="line">    List&lt;URL&gt; configuratorUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;URL&gt;();</span><br><span class="line">    <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> url.getProtocol();</span><br><span class="line">        <span class="comment">// 获取 category 参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">category</span> <span class="operator">=</span> url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);</span><br><span class="line">        <span class="comment">// 根据 category 参数将 url 分别放到不同的列表中</span></span><br><span class="line">        <span class="keyword">if</span> (Constants.ROUTERS_CATEGORY.equals(category)</span><br><span class="line">                || Constants.ROUTE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            <span class="comment">// 添加路由器 url</span></span><br><span class="line">            routerUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.CONFIGURATORS_CATEGORY.equals(category)</span><br><span class="line">                || Constants.OVERRIDE_PROTOCOL.equals(protocol)) &#123;</span><br><span class="line">            <span class="comment">// 添加配置器 url</span></span><br><span class="line">            configuratorUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Constants.PROVIDERS_CATEGORY.equals(category)) &#123;</span><br><span class="line">            <span class="comment">// 添加服务提供者 url</span></span><br><span class="line">            invokerUrls.add(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 忽略不支持的 category</span></span><br><span class="line">            logger.warn(<span class="string">&quot;Unsupported category ...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (configuratorUrls != <span class="literal">null</span> &amp;&amp; !configuratorUrls.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 将 url 转成 Configurator</span></span><br><span class="line">        <span class="built_in">this</span>.configurators = toConfigurators(configuratorUrls);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (routerUrls != <span class="literal">null</span> &amp;&amp; !routerUrls.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 将 url 转成 Router</span></span><br><span class="line">        List&lt;Router&gt; routers = toRouters(routerUrls);</span><br><span class="line">        <span class="keyword">if</span> (routers != <span class="literal">null</span>) &#123;</span><br><span class="line">            setRouters(routers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Configurator&gt; localConfigurators = <span class="built_in">this</span>.configurators;</span><br><span class="line">    <span class="built_in">this</span>.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">    <span class="keyword">if</span> (localConfigurators != <span class="literal">null</span> &amp;&amp; !localConfigurators.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Configurator configurator : localConfigurators) &#123;</span><br><span class="line">            <span class="comment">// 配置 overrideDirectoryUrl</span></span><br><span class="line">            <span class="built_in">this</span>.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新 Invoker 列表</span></span><br><span class="line">    refreshInvoker(invokerUrls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，notify 方法首先是根据 url 的 category 参数对 url 进行分门别类存储，然后通过 toRouters 和 toConfigurators 将 url 列表转成 Router 和 Configurator 列表。最后调用 refreshInvoker 方法刷新 Invoker 列表。这里的 toRouters 和 toConfigurators 方法逻辑不复杂，大家自行分析。接下来，我们把重点放在 refreshInvoker 方法上。</p><h4 id="3-2-3-刷新-Invoker-列表"><a href="#3-2-3-刷新-Invoker-列表" class="headerlink" title="3.2.3 刷新 Invoker 列表"></a>3.2.3 刷新 Invoker 列表</h4><p>接着上一节继续分析，refreshInvoker 方法是保证 RegistryDirectory 随注册中心变化而变化的关键所在。这一块逻辑比较多，接下来一一进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshInvoker</span><span class="params">(List&lt;URL&gt; invokerUrls)</span> &#123;</span><br><span class="line">    <span class="comment">// invokerUrls 仅有一个元素，且 url 协议头为 empty，此时表示禁用所有服务</span></span><br><span class="line">    <span class="keyword">if</span> (invokerUrls != <span class="literal">null</span> &amp;&amp; invokerUrls.size() == <span class="number">1</span> &amp;&amp; invokerUrls.get(<span class="number">0</span>) != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(<span class="number">0</span>).getProtocol())) &#123;</span><br><span class="line">        <span class="comment">// 设置 forbidden 为 true</span></span><br><span class="line">        <span class="built_in">this</span>.forbidden = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">this</span>.methodInvokerMap = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 销毁所有 Invoker</span></span><br><span class="line">        destroyAllInvokers();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.forbidden = <span class="literal">false</span>;</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap = <span class="built_in">this</span>.urlInvokerMap;</span><br><span class="line">        <span class="keyword">if</span> (invokerUrls.isEmpty() &amp;&amp; <span class="built_in">this</span>.cachedInvokerUrls != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加缓存 url 到 invokerUrls 中</span></span><br><span class="line">            invokerUrls.addAll(<span class="built_in">this</span>.cachedInvokerUrls);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedInvokerUrls = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;URL&gt;();</span><br><span class="line">            <span class="comment">// 缓存 invokerUrls</span></span><br><span class="line">            <span class="built_in">this</span>.cachedInvokerUrls.addAll(invokerUrls);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokerUrls.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 url 转成 Invoker</span></span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = toInvokers(invokerUrls);</span><br><span class="line">        <span class="comment">// 将 newUrlInvokerMap 转成方法名到 Invoker 列表的映射</span></span><br><span class="line">        Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap);</span><br><span class="line">        <span class="comment">// 转换出错，直接打印异常，并返回</span></span><br><span class="line">        <span class="keyword">if</span> (newUrlInvokerMap == <span class="literal">null</span> || newUrlInvokerMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.error(<span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;urls to invokers error ...&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并多个组的 Invoker</span></span><br><span class="line">        <span class="built_in">this</span>.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;</span><br><span class="line">        <span class="comment">// 保存为本地缓存</span></span><br><span class="line">        <span class="built_in">this</span>.urlInvokerMap = newUrlInvokerMap;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 销毁无用 Invoker</span></span><br><span class="line">            destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;destroyUnusedInvokers error. &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法的代码不是很多，但是逻辑却不少。首先时根据入参 invokerUrls 的数量和协议头判断是否禁用所有的服务，如果禁用，则将 forbidden 设为 true，并销毁所有的 Invoker。若不禁用，则将 url 转成 Invoker，得到 的映射关系。然后进一步进行转换，得到 。之后进行多组 Invoker 合并操作，并将合并结果赋值给 methodInvokerMap。methodInvokerMap 变量在 doList 方法中会被用到，doList 会对该变量进行读操作，在这里是写操作。当新的 Invoker 列表生成后，还要一个重要的工作要做，就是销毁无用的 Invoker，避免服务消费者调用已下线的服务的服务。</p><p>接下里，我将对上面涉及到的调用进行分析。按照顺序，这里先来分析 url 到 Invoker 的转换过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Invoker&lt;T&gt;&gt; <span class="title function_">toInvokers</span><span class="params">(List&lt;URL&gt; urls)</span> &#123;</span><br><span class="line">    Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Invoker&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (urls == <span class="literal">null</span> || urls.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; keys = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 获取服务消费端配置的协议</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queryProtocols</span> <span class="operator">=</span> <span class="built_in">this</span>.queryMap.get(Constants.PROTOCOL_KEY);</span><br><span class="line">    <span class="keyword">for</span> (URL providerUrl : urls) &#123;</span><br><span class="line">        <span class="keyword">if</span> (queryProtocols != <span class="literal">null</span> &amp;&amp; queryProtocols.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">accept</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            String[] acceptProtocols = queryProtocols.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 检测服务提供者协议是否被服务消费者所支持</span></span><br><span class="line">            <span class="keyword">for</span> (String acceptProtocol : acceptProtocols) &#123;</span><br><span class="line">                <span class="keyword">if</span> (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                    accept = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!accept) &#123;</span><br><span class="line">                <span class="comment">// 若服务消费者协议头不被消费者所支持，则忽略当前 providerUrl</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 忽略 empty 协议</span></span><br><span class="line">        <span class="keyword">if</span> (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过 SPI 检测服务端协议是否被消费端支持</span></span><br><span class="line">        <span class="keyword">if</span> (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) &#123;</span><br><span class="line">            logger.error(<span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unsupported protocol...&quot;</span>));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并 url</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> mergeUrl(providerUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> url.toFullString();</span><br><span class="line">        <span class="keyword">if</span> (keys.contains(key)) &#123;</span><br><span class="line">            <span class="comment">// 忽略重复 url</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        <span class="comment">// 本地 Invoker 缓存列表</span></span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap = <span class="built_in">this</span>.urlInvokerMap;</span><br><span class="line">        Invoker&lt;T&gt; invoker = localUrlInvokerMap == <span class="literal">null</span> ? <span class="literal">null</span> : localUrlInvokerMap.get(key);</span><br><span class="line">        <span class="comment">// 缓存未命中</span></span><br><span class="line">        <span class="keyword">if</span> (invoker == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (url.hasParameter(Constants.DISABLED_KEY)) &#123;</span><br><span class="line">                    <span class="comment">// 获取 disable 配置，并修改 enable 变量</span></span><br><span class="line">                    enabled = !url.getParameter(Constants.DISABLED_KEY, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    enabled = url.getParameter(Constants.ENABLED_KEY, <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (enabled) &#123;</span><br><span class="line">                    <span class="comment">// 调用 refer 获取 Invoker</span></span><br><span class="line">                    invoker = <span class="keyword">new</span> <span class="title class_">InvokerDelegate</span>&lt;T&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;Failed to refer invoker for interface...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (invoker != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 缓存 Invoker 实例</span></span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 缓存命中，将 invoker 存储到 newUrlInvokerMap 中</span></span><br><span class="line">            newUrlInvokerMap.put(key, invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    keys.clear();</span><br><span class="line">    <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toInvokers 方法一开始会对服务提供者 url 进行检测，若服务消费端的配置不支持服务端的协议，或服务端 url 协议头为 empty 时，toInvokers 均会忽略服务提供方 url。必要的检测做完后，紧接着是合并 url，然后访问缓存，尝试获取与 url 对应的 invoker。如果缓存命中，直接将 Invoker 存入 newUrlInvokerMap 中即可。如果未命中，则需要新建 Invoker。Invoker 是通过 Protocol 的 refer 方法创建的，这个我在<a href="http://tech.souyunku.com/?p=587">上一篇</a>文章中已经分析过了，这里就不赘述了。</p><p>toInvokers 方法返回的是 映射关系表，接下来还要对这个结果进行进一步处理，得到方法名到 Invoker 列表的映射关系。这个过程由 toMethodInvokers 方法完成，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; <span class="title function_">toMethodInvokers</span><span class="params">(Map&lt;String, Invoker&lt;T&gt;&gt; invokersMap)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法名 -&gt; Invoker 列表</span></span><br><span class="line">    Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; newMethodInvokerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt;();</span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; invokersList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (invokersMap != <span class="literal">null</span> &amp;&amp; invokersMap.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokersMap.values()) &#123;</span><br><span class="line">            <span class="comment">// 获取 methods 参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> invoker.getUrl().getParameter(Constants.METHODS_KEY);</span><br><span class="line">            <span class="keyword">if</span> (parameter != <span class="literal">null</span> &amp;&amp; parameter.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 切分 methods 参数值，得到方法名数组</span></span><br><span class="line">                String[] methods = Constants.COMMA_SPLIT_PATTERN.split(parameter);</span><br><span class="line">                <span class="keyword">if</span> (methods != <span class="literal">null</span> &amp;&amp; methods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="comment">// 方法名不为 *</span></span><br><span class="line">                        <span class="keyword">if</span> (method != <span class="literal">null</span> &amp;&amp; method.length() &gt; <span class="number">0</span></span><br><span class="line">                                &amp;&amp; !Constants.ANY_VALUE.equals(method)) &#123;</span><br><span class="line">                            <span class="comment">// 根据方法名获取 Invoker 列表</span></span><br><span class="line">                            List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">                            <span class="keyword">if</span> (methodInvokers == <span class="literal">null</span>) &#123;</span><br><span class="line">                                methodInvokers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">                                newMethodInvokerMap.put(method, methodInvokers);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 存储 Invoker 到列表中</span></span><br><span class="line">                            methodInvokers.add(invoker);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            invokersList.add(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行服务级别路由，参考：https://github.com/apache/incubator-dubbo/pull/749</span></span><br><span class="line">    List&lt;Invoker&lt;T&gt;&gt; newInvokersList = route(invokersList, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 存储 &lt;*, newInvokersList&gt; 映射关系</span></span><br><span class="line">    newMethodInvokerMap.put(Constants.ANY_VALUE, newInvokersList);</span><br><span class="line">    <span class="keyword">if</span> (serviceMethods != <span class="literal">null</span> &amp;&amp; serviceMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String method : serviceMethods) &#123;</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">            <span class="keyword">if</span> (methodInvokers == <span class="literal">null</span> || methodInvokers.isEmpty()) &#123;</span><br><span class="line">                methodInvokers = newInvokersList;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 进行方法级别路由</span></span><br><span class="line">            newMethodInvokerMap.put(method, route(methodInvokers, method));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序，转成不可变列表</span></span><br><span class="line">    <span class="keyword">for</span> (String method : <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(newMethodInvokerMap.keySet())) &#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; methodInvokers = newMethodInvokerMap.get(method);</span><br><span class="line">        Collections.sort(methodInvokers, InvokerComparator.getComparator());</span><br><span class="line">        newMethodInvokerMap.put(method, Collections.unmodifiableList(methodInvokers));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(newMethodInvokerMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法主要做了三件事情， 第一是对入参进行遍历，然后获取 methods 参数，并切分成数组。随后以方法名为键，Invoker 列表为值，将映射关系存储到 newMethodInvokerMap 中。第二是分别基于类和方法对 Invoker 列表进行路由操作。第三是对 Invoker 列表进行排序，并转成不可变列表。关于 toMethodInvokers 方法就先分析到这，我们继续向下分析，这次要分析的多组服务的合并逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; <span class="title function_">toMergeMethodInvokerMap</span><span class="params">(Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; methodMap)</span> &#123;</span><br><span class="line">    Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历入参</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; entry : methodMap.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokers = entry.getValue();</span><br><span class="line">        <span class="comment">// group -&gt; Invoker 列表</span></span><br><span class="line">        Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; groupMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt;();</span><br><span class="line">        <span class="comment">// 遍历 Invoker 列表</span></span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="comment">// 获取分组配置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> invoker.getUrl().getParameter(Constants.GROUP_KEY, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; groupInvokers = groupMap.get(group);</span><br><span class="line">            <span class="keyword">if</span> (groupInvokers == <span class="literal">null</span>) &#123;</span><br><span class="line">                groupInvokers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">                <span class="comment">// 缓存 &lt;group, List&lt;Invoker&gt;&gt; 到 groupMap 中</span></span><br><span class="line">                groupMap.put(group, groupInvokers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存储 invoker 到 groupInvokers</span></span><br><span class="line">            groupInvokers.add(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (groupMap.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 groupMap 中仅包含一组键值对，此时直接取出该键值对的值即可</span></span><br><span class="line">            result.put(method, groupMap.values().iterator().next());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// groupMap 中包含多组键值对，比如：</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;dubbo&quot;: [invoker1, invoker2, invoker3, ...],</span></span><br><span class="line">        <span class="comment">//     &quot;hello&quot;: [invoker4, invoker5, invoker6, ...]</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (groupMap.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; groupInvokers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;T&gt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (List&lt;Invoker&lt;T&gt;&gt; groupList : groupMap.values()) &#123;</span><br><span class="line">                <span class="comment">// 通过集群类合并每个分组对应的 Invoker 列表</span></span><br><span class="line">                groupInvokers.add(cluster.join(<span class="keyword">new</span> <span class="title class_">StaticDirectory</span>&lt;T&gt;(groupList)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 缓存结果</span></span><br><span class="line">            result.put(method, groupInvokers);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.put(method, invokers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法首先是生成 group 到 Invoker 类比的映射关系表，若关系表中的映射关系数量大于1，表示有多组服务。此时通过集群类合并每组 Invoker，并将合并结果存储到 groupInvokers 中。之后将方法名与 groupInvokers 存到到 result 中，并返回，整个逻辑结束。</p><p>接下来我们再来看一下 Invoker 列表刷新逻辑的最后一个动作 – 删除无用 Invoker。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">destroyUnusedInvokers</span><span class="params">(Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap, Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newUrlInvokerMap == <span class="literal">null</span> || newUrlInvokerMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        destroyAllInvokers();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; deleted = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldUrlInvokerMap != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取新生成的 Invoker 列表</span></span><br><span class="line">        Collection&lt;Invoker&lt;T&gt;&gt; newInvokers = newUrlInvokerMap.values();</span><br><span class="line">        <span class="comment">// 遍历老的 &lt;url, Invoker&gt; 映射表</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Invoker&lt;T&gt;&gt; entry : oldUrlInvokerMap.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 检测 newInvokers 中是否包含老的 Invoker</span></span><br><span class="line">            <span class="keyword">if</span> (!newInvokers.contains(entry.getValue())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deleted == <span class="literal">null</span>) &#123;</span><br><span class="line">                    deleted = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 若不包含，则将老的 Invoker 对应的 url 存入 deleted 列表中</span></span><br><span class="line">                deleted.add(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deleted != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历 deleted 集合，并到老的 &lt;url, Invoker&gt; 映射关系表查出 Invoker，销毁之</span></span><br><span class="line">        <span class="keyword">for</span> (String url : deleted) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 从 oldUrlInvokerMap 中移除 url 对应的 Invoker</span></span><br><span class="line">                Invoker&lt;T&gt; invoker = oldUrlInvokerMap.remove(url);</span><br><span class="line">                <span class="keyword">if</span> (invoker != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 销毁 Invoker</span></span><br><span class="line">                        invoker.destroy();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.warn(<span class="string">&quot;destroy invoker...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>destroyUnusedInvokers 方法的主要逻辑是通过 newUrlInvokerMap 找出待删除 Invoker 对应的 url，并将 url 存入到 deleted 列表中。然后再遍历 deleted 列表，并从 oldUrlInvokerMap 中移除相应的 Invoker，销毁之。整个逻辑大致如此，不是很难理解。</p><p>到此关于 Invoker 列表的刷新逻辑就分析了，这里对整个过程进行简单总结。如下：</p><ol><li>检测入参是否仅包含一个 url，且 url 协议头为 empty</li><li>若第一步检测结果为 true，表示禁用所有服务，此时销毁所有的 Invoker</li><li>若第一步检测结果为 false，此时将入参转为 Invoker 列表</li><li>对将上一步逻辑生成的结果进行进一步处理，得到方法名到 Invoker 的映射关系表</li><li>合并多组 Invoker</li><li>销毁无用 Invoker</li></ol><p>Invoker 的刷新逻辑还是比较复杂的，大家在看的过程中多写点 demo 进行调试。好了，本节就到这。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本篇文章对 Dubbo 服务目录进行了较为详细的分析，篇幅主要集中在 RegistryDirectory 的源码分析上。分析下来，不由得感叹，想让本地服务目录和注册中心保持一致还是需要做很多事情的，并不简单。服务目录是 Dubbo 集群容错的一部分，也是比较基础的部分，所以大家务必搞懂。</p><p>好了，本篇文章就先到这了。感谢大家阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、Dubbo-源码分析-–-集群容错之Directory&quot;&gt;&lt;a href=&quot;#五、Dubbo-源码分析-–-集群容错之Directory&quot; class=&quot;headerlink&quot; title=&quot;五、Dubbo 源码分析 – 集群容错之Directory&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 服务引用</title>
    <link href="https://hexo.tryrun.top/posts/d72547db.html"/>
    <id>https://hexo.tryrun.top/posts/d72547db.html</id>
    <published>2020-09-22T14:29:54.000Z</published>
    <updated>2020-09-22T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、Dubbo-源码分析-–-服务引用"><a href="#四、Dubbo-源码分析-–-服务引用" class="headerlink" title="四、Dubbo 源码分析 – 服务引用"></a>四、Dubbo 源码分析 – 服务引用</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在<a href="">上一篇</a>文章中，我详细的分析了服务导出的原理。本篇文章我们趁热打铁，继续分析服务引用的原理。在 Dubbo 中，我们可以通过两种方式引用远程服务。第一种是使用服务直联的方式引用服务，第二种方式是基于注册中心进行引用。服务直联的方式仅适合在调试或测试服务的场景下使用，不适合在线上环境使用。因此，本文我将重点分析通过注册中心引用服务的过程。从注册中心中获取服务配置只是服务引用过程中的一环，除此之外，服务消费者还需要经历 Invoker 创建、代理类创建等步骤。这些步骤，我将在后续章节中一一进行分析。</p><h2 id="2-服务引用原理"><a href="#2-服务引用原理" class="headerlink" title="2.服务引用原理"></a>2.服务引用原理</h2><p>Dubbo 服务引用的时机有两个，第一个是在 Spring 容器调用 ReferenceBean 的 afterPropertiesSet 方法时引用服务，第二个是在 ReferenceBean 对应的服务被注入到其他类中时引用。这两个引用服务的时机区别在于，第一个是饿汉式的，第二个是懒汉式的。默认情况下，Dubbo 使用懒汉式引用服务。如果需要使用饿汉式，可通过配置 的 init 属性开启。下面我们按照 Dubbo 默认配置进行分析，整个分析过程从 ReferenceBean 的 getObject 方法开始。当我们的服务被注入到其他类中时，Spring 会第一时间调用 getObject 方法，并由该方法执行服务引用逻辑。按照惯例，在进行具体工作之前，需先进行配置检查与收集工作。接着根据收集到的信息决定服务用的方式，有三种，第一种是引用本地 (JVM) 服务，第二是通过直联方式引用远程服务，第三是通过注册中心引用远程服务。不管是哪种引用方式，最后都会得到一个 Invoker 实例。如果有多个注册中心，多个服务提供者，这个时候会得到一组 Invoker 实例，此时需要通过集群管理类 Cluster 将多个 Invoker 合并成一个实例。合并后的 Invoker 实例已经具备调用本地或远程服务的能力了，但并不能将此实例暴露给用户使用，这会对用户业务代码造成侵入。此时框架还需要通过代理工厂类 (ProxyFactory) 为服务接口生成代理类，并让代理类去调用 Invoker 逻辑。避免了 Dubbo 框架代码对业务代码的侵入，同时也让框架更容易使用。</p><p>以上就是 Dubbo 引用服务的大致原理，下面我们深入到代码中，详细分析服务引用细节。</p><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h2><p>服务引用的入口方法为 ReferenceBean 的 getObject 方法，该方法定义在 Spring 的 FactoryBean 接口中，ReferenceBean 实现了这个方法。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already destroyed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检测 ref 是否为空，为空则通过 init 方法创建</span></span><br><span class="line">    <span class="keyword">if</span> (ref == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// init 方法主要用于处理配置，以及调用 createProxy 生成代理类</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里两个方法代码都比较简短，并不难理解。不过这里需要特别说明一下，如果大家从 getObject 方法进行代码调试时，会碰到比较诧异的问题。这里假设你使用 IDEA，且保持了 IDEA 的默认配置。当你面调试到 get 方法的<code>if (ref == null)</code>时，你会惊奇的发现 ref 不为空，导致你无法进入到 init 方法中继续调试。导致这个现象的原因是 Dubbo 框架本身有点小问题，这个小问题会引发一些让人诧异的现象。关于这个问题，我进行了将近两个小时的排查。查明问题后，我给 Dubbo 提交了一个 pull request (<a href="https://github.com/apache/incubator-dubbo/pull/2754">#2754</a>) 修复了此问题。另外，beiwei30 前辈开了一个 issue (<a href="https://github.com/apache/incubator-dubbo/issues/2757">#2757</a> ) 介绍这个问题，有兴趣的朋友可以去看看。大家如果想规避这个问题，可以修改一下 IDEA 的配置。在配置面板中搜索 toString，然后取消<code>Enable &#39;toString&#39; object view</code>前的对号。</p><p>讲完需要注意的点，我们继续向下分析，接下来将分析配置的处理过程。</p><h3 id="3-1-处理配置"><a href="#3-1-处理配置" class="headerlink" title="3.1 处理配置"></a>3.1 处理配置</h3><p>Dubbo 提供了丰富的配置，用于调整和优化框架行为，性能等。Dubbo 在引用或导出服务时，首先会对这些配置进行检查和处理，以保证配置到正确性。如果大家不是很熟悉 Dubbo 配置，建议先阅读以下官方文档。配置解析的方法为 ReferenceConfig 的 init 方法，下面来看一下方法逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (interfaceName == <span class="literal">null</span> || interfaceName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;interface not allow null!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测 consumer 变量是否为空，为空则创建</span></span><br><span class="line">    checkDefault();</span><br><span class="line">    appendProperties(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (getGeneric() == <span class="literal">null</span> &amp;&amp; getConsumer() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置 generic</span></span><br><span class="line">        setGeneric(getConsumer().getGeneric());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测是否为泛化接口</span></span><br><span class="line">    <span class="keyword">if</span> (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载类</span></span><br><span class="line">            interfaceClass = Class.forName(interfaceName, <span class="literal">true</span>, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------✨ 分割线1 ✨------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从系统变量中获取与接口名对应的属性值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resolve</span> <span class="operator">=</span> System.getProperty(interfaceName);</span><br><span class="line">    <span class="type">String</span> <span class="variable">resolveFile</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (resolve == <span class="literal">null</span> || resolve.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 从系统属性中获取解析文件路径</span></span><br><span class="line">        resolveFile = System.getProperty(<span class="string">&quot;dubbo.resolve.file&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resolveFile == <span class="literal">null</span> || resolveFile.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 从指定位置加载配置文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">userResolveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;user.home&quot;</span>)), <span class="string">&quot;dubbo-resolve.properties&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (userResolveFile.exists()) &#123;</span><br><span class="line">                <span class="comment">// 获取文件绝对路径</span></span><br><span class="line">                resolveFile = userResolveFile.getAbsolutePath();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolveFile != <span class="literal">null</span> &amp;&amp; resolveFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(resolveFile));</span><br><span class="line">                <span class="comment">// 从文件中加载配置</span></span><br><span class="line">                properties.load(fis);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unload ..., cause:...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> != fis) fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.warn(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取与接口名对应的配置</span></span><br><span class="line">            resolve = properties.getProperty(interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve != <span class="literal">null</span> &amp;&amp; resolve.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 resolve 赋值给 url</span></span><br><span class="line">        url = resolve;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------✨ 分割线2 ✨------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (consumer != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (application == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从 consumer 中获取 Application 实例，下同</span></span><br><span class="line">            application = consumer.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">module</span> = consumer.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;</span><br><span class="line">            registries = consumer.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;</span><br><span class="line">            monitor = consumer.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;</span><br><span class="line">            registries = <span class="keyword">module</span>.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;</span><br><span class="line">            monitor = <span class="keyword">module</span>.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (application != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;</span><br><span class="line">            monitor = application.getMonitor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测本地 Application 和本地存根配置合法性</span></span><br><span class="line">    checkApplication();</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------✨ 分割线3 ✨------------------------------</span></span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    Map&lt;Object, Object&gt; attributes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 side、协议版本信息、时间戳和进程号等信息到 map 中</span></span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.CONSUMER_SIDE);</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isGeneric()) &#123;    <span class="comment">// 非泛化服务</span></span><br><span class="line">        <span class="comment">// 获取版本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">revision</span> <span class="operator">=</span> Version.getVersion(interfaceClass, version);</span><br><span class="line">        <span class="keyword">if</span> (revision != <span class="literal">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;revision&quot;</span>, revision);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取接口方法列表，并添加到 map 中</span></span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;methods&quot;</span>, Constants.ANY_VALUE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;methods&quot;</span>, StringUtils.join(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(Arrays.asList(methods)), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.INTERFACE_KEY, interfaceName);</span><br><span class="line">    <span class="comment">// 将 ApplicationConfig、ConsumerConfig、ReferenceConfig 等对象的字段信息添加到 map 中</span></span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, <span class="keyword">module</span>);</span><br><span class="line">    appendParameters(map, consumer, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------✨ 分割线4 ✨------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> StringUtils.getServiceKey(map);</span><br><span class="line">    <span class="keyword">if</span> (methods != <span class="literal">null</span> &amp;&amp; !methods.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 遍历 MethodConfig 列表</span></span><br><span class="line">        <span class="keyword">for</span> (MethodConfig method : methods) &#123;</span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">retryKey</span> <span class="operator">=</span> method.getName() + <span class="string">&quot;.retry&quot;</span>;</span><br><span class="line">            <span class="comment">// 检测 map 是否包含 methodName.retry</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(retryKey)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">retryValue</span> <span class="operator">=</span> map.remove(retryKey);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;false&quot;</span>.equals(retryValue)) &#123;</span><br><span class="line">                    <span class="comment">// 添加重试次数配置 methodName.retries</span></span><br><span class="line">                    map.put(method.getName() + <span class="string">&quot;.retries&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加 MethodConfig 中的“属性”字段到 attributes</span></span><br><span class="line">            <span class="comment">// 比如 onreturn、onthrow、oninvoke 等</span></span><br><span class="line">            appendAttributes(attributes, method, prefix + <span class="string">&quot;.&quot;</span> + method.getName());</span><br><span class="line">            checkAndConvertImplicitConfig(method, map, attributes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------✨ 分割线5 ✨------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取服务消费者 ip 地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hostToRegistry</span> <span class="operator">=</span> ConfigUtils.getSystemProperty(Constants.DUBBO_IP_TO_REGISTRY);</span><br><span class="line">    <span class="keyword">if</span> (hostToRegistry == <span class="literal">null</span> || hostToRegistry.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        hostToRegistry = NetUtils.getLocalHost();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isInvalidLocalHost(hostToRegistry)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Specified invalid registry ip from property...&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(Constants.REGISTER_IP_KEY, hostToRegistry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储 attributes 到系统上下文中</span></span><br><span class="line">    StaticContext.getSystemContext().putAll(attributes);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建代理类</span></span><br><span class="line">    ref = createProxy(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据服务名，ReferenceConfig，代理类构建 ConsumerModel，</span></span><br><span class="line">    <span class="comment">// 并将 ConsumerModel 存入到 ApplicationModel 中</span></span><br><span class="line">    <span class="type">ConsumerModel</span> <span class="variable">consumerModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsumerModel</span>(getUniqueServiceName(), <span class="built_in">this</span>, ref, interfaceClass.getMethods());</span><br><span class="line">    ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码很长，做的事情比较多。这里我根据代码逻辑，对代码进行了分块，下面我们一起来看一下。</p><p>首先是方法开始到分割线1之间的代码。这段代码主要用于检测 ConsumerConfig 实例是否存在，如不存在则创建一个新的实例，然后通过系统变量或 dubbo.properties 配置文件填充 ConsumerConfig 的字段。接着是检测泛化配置，并根据配置设置 interfaceClass 的值。本段代码逻辑大致就是这些，接着来看分割线1到分割线2之间的逻辑。这段逻辑用于从系统属性或配置文件中加载与接口名相对应的配置，并将解析结果赋值给 url 字段。url 字段的作用一般是用于点对点调用。继续向下看，分割线2和分割线3之间的代码用于检测几个核心配置类是否为空，为空则尝试从其他配置类中获取。分割线3与分割线4之间的代码主要是用于收集各种配置，并将配置存储到 map 中。分割线4和分割线5之间的代码用于处理 MethodConfig 实例。该实例包含了事件通知配置，比如 onreturn、onthrow、oninvoke 等。分割线5到方法结尾的代码主要用于解析服务消费者 ip，以及调用 createProxy 创建代理对象。关于该方法的详细分析，将会在接下来的章节中展开。</p><p>到这里，关于配置的检查与处理过长就分析完了。这部分逻辑不是很难理解，但比较繁杂，大家需要耐心看一下。好了，本节先到这，接下来分析服务引用的过程。</p><h3 id="3-2-引用服务"><a href="#3-2-引用服务" class="headerlink" title="3.2 引用服务"></a>3.2 引用服务</h3><p>本节我们要从 createProxy 开始看起。createProxy 这个方法表面上看起来只是用于创建代理对象，但实际上并非如此。该方法还会调用其他方法构建以及合并 Invoker 实例。具体细节如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">createProxy</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">tmpUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;temp&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="number">0</span>, map);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> isJvmRefer;</span><br><span class="line">    <span class="keyword">if</span> (isInjvm() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// url 配置被指定，则不做本地引用</span></span><br><span class="line">        <span class="keyword">if</span> (url != <span class="literal">null</span> &amp;&amp; url.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            isJvmRefer = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 根据 url 的协议、scope 以及 injvm 等参数检测是否需要本地引用</span></span><br><span class="line">        <span class="comment">// 比如如果用户显式配置了 scope=local，此时 isInjvmRefer 返回 true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) &#123;</span><br><span class="line">            isJvmRefer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            isJvmRefer = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 injvm 配置值</span></span><br><span class="line">        isJvmRefer = isInjvm().booleanValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地引用</span></span><br><span class="line">    <span class="keyword">if</span> (isJvmRefer) &#123;</span><br><span class="line">        <span class="comment">// 生成本地引用 URL，协议为 injvm</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, <span class="number">0</span>, interfaceClass.getName()).addParameters(map);</span><br><span class="line">        <span class="comment">// 调用 refer 方法构建 InjvmInvoker 实例</span></span><br><span class="line">        invoker = refprotocol.refer(interfaceClass, url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 远程引用</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// url 不为空，表明用户可能想进行点对点调用</span></span><br><span class="line">        <span class="keyword">if</span> (url != <span class="literal">null</span> &amp;&amp; url.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 当需要配置多个 url 时，可用分号进行分割，这里会进行切分</span></span><br><span class="line">            String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url);</span><br><span class="line">            <span class="keyword">if</span> (us != <span class="literal">null</span> &amp;&amp; us.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String u : us) &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> URL.valueOf(u);</span><br><span class="line">                    <span class="keyword">if</span> (url.getPath() == <span class="literal">null</span> || url.getPath().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 设置接口全限定名为 url 路径</span></span><br><span class="line">                        url = url.setPath(interfaceName);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检测 url 协议是否为 registry，若是，表明用户想使用指定的注册中心</span></span><br><span class="line">                    <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        <span class="comment">// 将 map 转换为查询字符串，并作为 refer 参数的值添加到 url 中</span></span><br><span class="line">                        urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 合并 url，移除服务提供者的一些配置（这些配置来源于用户配置的 url 属性），</span></span><br><span class="line">                        <span class="comment">// 比如线程池相关配置。并保留服务提供者的部分配置，比如版本，group，时间戳等</span></span><br><span class="line">                        <span class="comment">// 最后将合并后的配置设置为 url 查询字符串中。</span></span><br><span class="line">                        urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加载注册中心 url</span></span><br><span class="line">            List&lt;URL&gt; us = loadRegistries(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (us != <span class="literal">null</span> &amp;&amp; !us.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (URL u : us) &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">monitorUrl</span> <span class="operator">=</span> loadMonitor(u);</span><br><span class="line">                    <span class="keyword">if</span> (monitorUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 添加 refer 参数到 url 中，并将 url 添加到 urls 中</span></span><br><span class="line">                    urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 未配置注册中心，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (urls.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No such any registry to reference...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个注册中心或服务提供者(服务直联，下同)</span></span><br><span class="line">        <span class="keyword">if</span> (urls.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用 RegistryProtocol 的 refer 构建 Invoker 实例</span></span><br><span class="line">            invoker = refprotocol.refer(interfaceClass, urls.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个注册中心或多个服务提供者，或者两者混合</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Invoker&lt;?&gt;&gt; invokers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">registryURL</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取所有的 Invoker</span></span><br><span class="line">            <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                <span class="comment">// 通过 refprotocol 调用 refer 构建 Invoker，refprotocol 会在运行时</span></span><br><span class="line">                <span class="comment">// 根据 url 协议头加载指定的 Protocol 实例，并调用实例的 refer 方法</span></span><br><span class="line">                invokers.add(refprotocol.refer(interfaceClass, url));</span><br><span class="line">                <span class="keyword">if</span> (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                    registryURL = url;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (registryURL != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果注册中心链接不为空，则将使用 AvailableCluster</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME);</span><br><span class="line">                <span class="comment">// 创建 StaticDirectory 实例，并由 Cluster 对多个 Invoker 进行合并</span></span><br><span class="line">                invoker = cluster.join(<span class="keyword">new</span> <span class="title class_">StaticDirectory</span>(u, invokers));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                invoker = cluster.join(<span class="keyword">new</span> <span class="title class_">StaticDirectory</span>(invokers));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">c</span> <span class="operator">=</span> check;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span> &amp;&amp; consumer != <span class="literal">null</span>) &#123;</span><br><span class="line">        c = consumer.isCheck();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        c = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// invoker 可用性检查</span></span><br><span class="line">    <span class="keyword">if</span> (c &amp;&amp; !invoker.isAvailable()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No provider available for the service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    <span class="keyword">return</span> (T) proxyFactory.getProxy(invoker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码很多，不过逻辑比较清晰。首先根据配置检查是否为本地调用，若是，则调用 InjvmProtocol 的 refer 方法生成 InjvmInvoker 实例。若不是，则读取直联配置项，或注册中心 url，并将读取到的 url 存储到 urls 中。然后，根据 urls 元素数量进行后续操作。若 urls 元素数量为1，则直接通过 Protocol 自适应拓展构建 Invoker 实例接口。若 urls 元素数量大于1，即存在多个注册中心或服务直联 url，此时先根据 url 构建 Invoker。然后再通过 Cluster 合并多个 Invoker，最后调用 ProxyFactory 生成代理类。这里，Invoker 的构建过程以及代理类的过程比较重要，因此我将分两小节对这两个过程进行分析。</p><h4 id="3-2-1-创建-Invoker"><a href="#3-2-1-创建-Invoker" class="headerlink" title="3.2.1 创建 Invoker"></a>3.2.1 创建 Invoker</h4><p>Invoker 是 Dubbo 的核心模型，代表一个可执行体。在服务提供方，Invoker 用于调用服务提供类。在服务消费方，Invoker 用于执行远程调用。Invoker 在 Dubbo 中的位置十分重要，因此我们有必要去搞懂它。从前面的代码中可知，Invoker 是由 Protocol 实现类构建的。Protocol 实现类有很多，这里我会分析最常用的两个，分别是 RegistryProtocol 和 DubboProtocol，其他的大家自行分析。下面先来分析 DubboProtocol 的 refer 方法源码。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">refer</span><span class="params">(Class&lt;T&gt; serviceType, URL url)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line">    <span class="comment">// 创建 DubboInvoker</span></span><br><span class="line">    DubboInvoker&lt;T&gt; invoker = <span class="keyword">new</span> <span class="title class_">DubboInvoker</span>&lt;T&gt;(serviceType, url, getClients(url), invokers);</span><br><span class="line">    invokers.add(invoker);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法看起来比较简单，不过这里有一个调用需要我们注意一下，即 getClients。这个方法用于获取客户端实例，实例类型为 ExchangeClient。ExchangeClient 实际上并不具备通信能力，因此它需要更底层的客户端实例进行通信。比如 NettyClient、MinaClient 等，默认情况下，Dubbo 使用 NettyClient 进行通信。接下来，我们简单看一下 getClients 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeClient[] getClients(URL url) &#123;</span><br><span class="line">    <span class="comment">// 是否共享连接</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">service_share_connect</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 获取连接数，默认为0，表示未配置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">connections</span> <span class="operator">=</span> url.getParameter(Constants.CONNECTIONS_KEY, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 如果未配置 connections，则共享连接</span></span><br><span class="line">    <span class="keyword">if</span> (connections == <span class="number">0</span>) &#123;</span><br><span class="line">        service_share_connect = <span class="literal">true</span>;</span><br><span class="line">        connections = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExchangeClient[] clients = <span class="keyword">new</span> <span class="title class_">ExchangeClient</span>[connections];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; clients.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (service_share_connect) &#123;</span><br><span class="line">            <span class="comment">// 获取共享客户端</span></span><br><span class="line">            clients[i] = getSharedClient(url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化新的客户端</span></span><br><span class="line">            clients[i] = initClient(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clients;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里根据 connections 数量决定是获取共享客户端还是创建新的客户端实例，默认情况下，使用共享客户端实例。不过 getSharedClient 方法中也会调用 initClient 方法，因此下面我们一起看一下这两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeClient <span class="title function_">getSharedClient</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> url.getAddress();</span><br><span class="line">    <span class="comment">// 获取带有“引用计数”功能的 ExchangeClient</span></span><br><span class="line">    <span class="type">ReferenceCountExchangeClient</span> <span class="variable">client</span> <span class="operator">=</span> referenceClientMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!client.isClosed()) &#123;</span><br><span class="line">            <span class="comment">// 增加引用计数</span></span><br><span class="line">            client.incrementAndGetCount();</span><br><span class="line">            <span class="keyword">return</span> client;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            referenceClientMap.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    locks.putIfAbsent(key, <span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    <span class="keyword">synchronized</span> (locks.get(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (referenceClientMap.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> referenceClientMap.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ExchangeClient 客户端</span></span><br><span class="line">        <span class="type">ExchangeClient</span> <span class="variable">exchangeClient</span> <span class="operator">=</span> initClient(url);</span><br><span class="line">        <span class="comment">// 将 ExchangeClient 实例传给 ReferenceCountExchangeClient，这里明显用了装饰模式</span></span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">ReferenceCountExchangeClient</span>(exchangeClient, ghostClientMap);</span><br><span class="line">        referenceClientMap.put(key, client);</span><br><span class="line">        ghostClientMap.remove(key);</span><br><span class="line">        locks.remove(key);</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法先访问缓存，若缓存未命中，则通过 initClient 方法创建新的 ExchangeClient 实例，并将该实例传给 ReferenceCountExchangeClient 构造方法创建一个带有引用技术功能的 ExchangeClient 实例。ReferenceCountExchangeClient 内部实现比较简单，就不分析了。下面我们再来看一下 initClient 方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeClient <span class="title function_">initClient</span><span class="params">(URL url)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取客户端类型，默认为 netty</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> url.getParameter(Constants.CLIENT_KEY, url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_CLIENT));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加编解码和心跳包参数到 url 中</span></span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测客户端类型是否存在，不存在则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Unsupported client type: ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExchangeClient client;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 lazy 配置，并根据配置值决定创建的客户端类型</span></span><br><span class="line">        <span class="keyword">if</span> (url.getParameter(Constants.LAZY_CONNECT_KEY, <span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="comment">// 创建懒加载 ExchangeClient 实例</span></span><br><span class="line">            client = <span class="keyword">new</span> <span class="title class_">LazyConnectExchangeClient</span>(url, requestHandler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建普通 ExchangeClient 实例</span></span><br><span class="line">            client = Exchangers.connect(url, requestHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Fail to create remoting client for service...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initClient 方法首先获取用户配置的客户端类型，默认为 netty。然后检测用户配置的客户端类型是否存在，不存在则抛出异常。最后根据 lazy 配置决定创建什么类型的客户端。这里的 LazyConnectExchangeClient 代码并不是很复杂，该类会在 request 方法被调用时通过 Exchangers 的 connect 方法创建 ExchangeClient 客户端，这里就不分析 LazyConnectExchangeClient 的代码了。下面我们分析一下 Exchangers 的 connect 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeClient <span class="title function_">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取 Exchanger 实例，默认为 HeaderExchangeClient</span></span><br><span class="line">    <span class="keyword">return</span> getExchanger(url).connect(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，getExchanger 会通过 SPI 加载 HeaderExchangeClient 实例，这个方法比较简单，大家自己看一下吧。接下来分析 HeaderExchangeClient 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ExchangeClient <span class="title function_">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="comment">// 这里包含了多个调用，分别如下：</span></span><br><span class="line">    <span class="comment">// 1. 创建 HeaderExchangeHandler 对象</span></span><br><span class="line">    <span class="comment">// 2. 创建 DecodeHandler 对象</span></span><br><span class="line">    <span class="comment">// 3. 通过 Transporters 构建 Client 实例</span></span><br><span class="line">    <span class="comment">// 4. 创建 HeaderExchangeClient 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeaderExchangeClient</span>(Transporters.connect(url, <span class="keyword">new</span> <span class="title class_">DecodeHandler</span>(<span class="keyword">new</span> <span class="title class_">HeaderExchangeHandler</span>(handler))), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的调用比较多，我们这里重点看一下 Transporters 的 connect 方法。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title function_">connect</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ChannelHandler handler;</span><br><span class="line">    <span class="keyword">if</span> (handlers == <span class="literal">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">        handler = <span class="keyword">new</span> <span class="title class_">ChannelHandlerAdapter</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">        handler = handlers[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 handler 数量大于1，则创建一个 ChannelHandler 分发器</span></span><br><span class="line">        handler = <span class="keyword">new</span> <span class="title class_">ChannelHandlerDispatcher</span>(handlers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Transporter 自适应拓展类，并调用 connect 方法生成 Client 实例</span></span><br><span class="line">    <span class="keyword">return</span> getTransporter().connect(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，getTransporter 方法返回的是自适应拓展类，该类会在运行时根据客户端类型加载指定的 Transporter 实现类。若用户未显示配置客户端类型，则默认加载 NettyTransporter，并调用该类的 connect 方法。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Client <span class="title function_">connect</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="comment">// 创建 NettyClient 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NettyClient</span>(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里就不继续跟下去了，在往下就是通过 Netty 提供的接口构建 Netty 客户端了，大家有兴趣自己看看。到这里，关于 DubboProtocol 的 refer 方法就分析完了。接下来，继续分析 RegistryProtocol 的 refer 方法逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="comment">// 取 registry 参数值，并将其设置为协议头</span></span><br><span class="line">    url = url.setProtocol(url.getParameter(Constants.REGISTRY_KEY, Constants.DEFAULT_REGISTRY)).removeParameter(Constants.REGISTRY_KEY);</span><br><span class="line">    <span class="comment">// 获取注册中心实例</span></span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> registryFactory.getRegistry(url);</span><br><span class="line">    <span class="comment">// 这个判断暂时不知道有什么意图，为什么要给 RegistryService 类型生成 Invoker ？</span></span><br><span class="line">    <span class="keyword">if</span> (RegistryService.class.equals(type)) &#123;</span><br><span class="line">        <span class="keyword">return</span> proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 url 查询字符串转为 Map</span></span><br><span class="line">    Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(Constants.REFER_KEY));</span><br><span class="line">    <span class="comment">// 获取 group 配置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> qs.get(Constants.GROUP_KEY);</span><br><span class="line">    <span class="keyword">if</span> (group != <span class="literal">null</span> &amp;&amp; group.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((Constants.COMMA_SPLIT_PATTERN.split(group)).length &gt; <span class="number">1</span></span><br><span class="line">                || <span class="string">&quot;*&quot;</span>.equals(group)) &#123;</span><br><span class="line">            <span class="comment">// 通过 SPI 加载 MergeableCluster 实例，并调用 doRefer 继续执行引用服务逻辑</span></span><br><span class="line">            <span class="keyword">return</span> doRefer(getMergeableCluster(), registry, type, url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 doRefer 继续执行引用服务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> doRefer(cluster, registry, type, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码首先为 url 设置协议头，然后根据 url 参数加载注册中心实例。接下来对 RegistryService 继续针对性处理，这个处理逻辑我不是很明白，不知道为什么要为 RegistryService 类型生成 Invoker，有知道同学麻烦告知一下。然后就是获取 group 配置，根据 group 配置决定 doRefer 第一个参数的类型。这里的重点是 doRefer 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 RegistryDirectory 实例</span></span><br><span class="line">    RegistryDirectory&lt;T&gt; directory = <span class="keyword">new</span> <span class="title class_">RegistryDirectory</span>&lt;T&gt;(type, url);</span><br><span class="line">    <span class="comment">// 设置注册中心和协议</span></span><br><span class="line">    directory.setRegistry(registry);</span><br><span class="line">    directory.setProtocol(protocol);</span><br><span class="line">    Map&lt;String, String&gt; parameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;(directory.getUrl().getParameters());</span><br><span class="line">    <span class="comment">// 生成服务消费者链接</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">subscribeUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(Constants.CONSUMER_PROTOCOL, parameters.remove(Constants.REGISTER_IP_KEY), <span class="number">0</span>, type.getName(), parameters);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册服务消费者，在 consumers 目录下新节点</span></span><br><span class="line">    <span class="keyword">if</span> (!Constants.ANY_VALUE.equals(url.getServiceInterface())</span><br><span class="line">            &amp;&amp; url.getParameter(Constants.REGISTER_KEY, <span class="literal">true</span>)) &#123;</span><br><span class="line">        registry.register(subscribeUrl.addParameters(Constants.CATEGORY_KEY, Constants.CONSUMERS_CATEGORY,</span><br><span class="line">                Constants.CHECK_KEY, String.valueOf(<span class="literal">false</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅 providers、configurators、routers 等节点数据</span></span><br><span class="line">    directory.subscribe(subscribeUrl.addParameter(Constants.CATEGORY_KEY,</span><br><span class="line">            Constants.PROVIDERS_CATEGORY</span><br><span class="line">                    + <span class="string">&quot;,&quot;</span> + Constants.CONFIGURATORS_CATEGORY</span><br><span class="line">                    + <span class="string">&quot;,&quot;</span> + Constants.ROUTERS_CATEGORY));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个注册中心可能有多个服务提供者，因此这里需要将多个服务提供者合并为一个</span></span><br><span class="line">    <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> cluster.join(directory);</span><br><span class="line">    ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">    <span class="keyword">return</span> invoker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，doRefer 方法创建一个 RegistryDirectory 实例，然后生成服务者消费者链接，并向注册中心进行注册。注册完毕后，紧接着订阅 providers、configurators、routers 等节点下的数据。完成订阅后，RegistryDirectory 会收到这几个节点下的子节点信息，比如可以获取到服务提供者的配置信息。由于一个服务可能部署在多台服务器上，这样就会在 providers 产生多个节点，这个时候就需要 Cluster 将多个服务节点合并为一个，并生成一个 Invoker。关于 RegistryDirectory 和 Cluster，本文不打算进行分析，相关分析将会在随后的文章中展开。</p><p>好了，关于 Invoker 的创建的逻辑就先分析到这。逻辑比较多，大家耐心看一下。</p><h4 id="3-2-2-创建代理"><a href="#3-2-2-创建代理" class="headerlink" title="3.2.2 创建代理"></a>3.2.2 创建代理</h4><p>Invoker 创建完毕后，接下来要做的事情是为服务接口生成代理对象。有了代理对象，我们就可以通过代理对象进行远程调用。代理对象生成的入口方法为在 ProxyFactory 的 getProxy，接下来进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> getProxy(invoker, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, <span class="type">boolean</span> generic)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    Class&lt;?&gt;[] interfaces = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 获取接口列表</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> invoker.getUrl().getParameter(<span class="string">&quot;interfaces&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; config.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 切分接口列表</span></span><br><span class="line">        String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);</span><br><span class="line">        <span class="keyword">if</span> (types != <span class="literal">null</span> &amp;&amp; types.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            interfaces = <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[types.length + <span class="number">2</span>];</span><br><span class="line">            <span class="comment">// 设置服务接口类和 EchoService.class 到 interfaces 中</span></span><br><span class="line">            interfaces[<span class="number">0</span>] = invoker.getInterface();</span><br><span class="line">            interfaces[<span class="number">1</span>] = EchoService.class;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; types.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 加载接口类</span></span><br><span class="line">                interfaces[i + <span class="number">1</span>] = ReflectUtils.forName(types[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (interfaces == <span class="literal">null</span>) &#123;</span><br><span class="line">        interfaces = <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;invoker.getInterface(), EchoService.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为 http 和 hessian 协议提供泛化调用支持，参考 pull request #1827</span></span><br><span class="line">    <span class="keyword">if</span> (!invoker.getInterface().equals(GenericService.class) &amp;&amp; generic) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> interfaces.length;</span><br><span class="line">        Class&lt;?&gt;[] temp = interfaces;</span><br><span class="line">        <span class="comment">// 创建新的 interfaces 数组</span></span><br><span class="line">        interfaces = <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[len + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(temp, <span class="number">0</span>, interfaces, <span class="number">0</span>, len);</span><br><span class="line">        <span class="comment">// 设置 GenericService.class 到数组中</span></span><br><span class="line">        interfaces[len] = GenericService.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> getProxy(invoker, interfaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] types)</span>;</span><br></pre></td></tr></table></figure><p>如上，上面大段代码都是用来获取 interfaces 数组的，因此我们需要继续往下看。getProxy(Invoker, Class&lt;&gt;[]) 这个方法是一个抽象方法，下面我们到 JavassistProxyFactory 类中看一下该方法的实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> &#123;</span><br><span class="line">    <span class="comment">// 生成 Proxy 子类（Proxy 是抽象类）。并调用Proxy 子类的 newInstance 方法生成 Proxy 实例</span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> <span class="title class_">InvokerInvocationHandler</span>(invoker));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码并不多，首先是通过 Proxy 的 getProxy 方法获取 Proxy 子类，然后创建 InvokerInvocationHandler 对象，并将该对象传给 newInstance 生成 Proxy 实例。InvokerInvocationHandler 实现自 JDK 的 InvocationHandler 接口，具体的用途是拦截接口类调用。该类逻辑比较简单，这里就不分析了。下面我们重点关注一下 Proxy 的 getProxy 方法，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Proxy <span class="title function_">getProxy</span><span class="params">(Class&lt;?&gt;... ics)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> getProxy(ClassHelper.getClassLoader(Proxy.class), ics);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Proxy <span class="title function_">getProxy</span><span class="params">(ClassLoader cl, Class&lt;?&gt;... ics)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ics.length &gt; <span class="number">65535</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;interface limit exceeded&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">// 遍历接口列表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ics.length; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">itf</span> <span class="operator">=</span> ics[i].getName();</span><br><span class="line">        <span class="comment">// 检测类型是否为接口</span></span><br><span class="line">        <span class="keyword">if</span> (!ics[i].isInterface())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(itf + <span class="string">&quot; is not a interface.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; tmp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 重新加载接口类</span></span><br><span class="line">            tmp = Class.forName(itf, <span class="literal">false</span>, cl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测接口是否相同，这里 tmp 有可能为空</span></span><br><span class="line">        <span class="keyword">if</span> (tmp != ics[i])</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(ics[i] + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接接口全限定名，分隔符为 ;</span></span><br><span class="line">        sb.append(itf).append(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用拼接后接口名作为 key</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; cache;</span><br><span class="line">    <span class="keyword">synchronized</span> (ProxyCacheMap) &#123;</span><br><span class="line">        cache = ProxyCacheMap.get(cl);</span><br><span class="line">        <span class="keyword">if</span> (cache == <span class="literal">null</span>) &#123;</span><br><span class="line">            cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">            ProxyCacheMap.put(cl, cache);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (cache) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 从缓存中获取 Reference&lt;Proxy&gt; 实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Reference&lt;?&gt;) &#123;</span><br><span class="line">                proxy = (Proxy) ((Reference&lt;?&gt;) value).get();</span><br><span class="line">                <span class="keyword">if</span> (proxy != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> proxy;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 多线程控制，保证只有一个线程可以进行后续操作</span></span><br><span class="line">            <span class="keyword">if</span> (value == PendingGenerationMarker) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 其他线程在此处进行等待</span></span><br><span class="line">                    cache.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 放置标志位到缓存中，并跳出 while 循环进行后续操作</span></span><br><span class="line">                cache.put(key, PendingGenerationMarker);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> PROXY_CLASS_COUNTER.getAndIncrement();</span><br><span class="line">    <span class="type">String</span> <span class="variable">pkg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ClassGenerator</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="literal">null</span>, ccm = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ClassGenerator 对象</span></span><br><span class="line">        ccp = ClassGenerator.newInstance(cl);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; worked = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        List&lt;Method&gt; methods = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Method&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ics.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 检测接口访问级别是否为 protected 或 privete</span></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(ics[i].getModifiers())) &#123;</span><br><span class="line">                <span class="comment">// 获取接口包名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">npkg</span> <span class="operator">=</span> ics[i].getPackage().getName();</span><br><span class="line">                <span class="keyword">if</span> (pkg == <span class="literal">null</span>) &#123;</span><br><span class="line">                    pkg = npkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!pkg.equals(npkg))</span><br><span class="line">                        <span class="comment">// 非 public 级别的接口必须在同一个包下，否者抛出异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加接口到 ClassGenerator 中</span></span><br><span class="line">            ccp.addInterface(ics[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历接口方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : ics[i].getMethods()) &#123;</span><br><span class="line">                <span class="comment">// 获取方法描述，可理解为方法签名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> ReflectUtils.getDesc(method);</span><br><span class="line">                <span class="comment">// 如果已包含在 worked 中，则忽略。考虑这种情况，</span></span><br><span class="line">                <span class="comment">// A 接口和 B 接口中包含一个完全相同的方法</span></span><br><span class="line">                <span class="keyword">if</span> (worked.contains(desc))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                worked.add(desc);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">ix</span> <span class="operator">=</span> methods.size();</span><br><span class="line">                <span class="comment">// 获取方法返回值类型</span></span><br><span class="line">                Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">                <span class="comment">// 获取参数列表</span></span><br><span class="line">                Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 生成 Object[] args = new Object[1...N]</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Object[] args = new Object[&quot;</span>).append(pts.length).append(<span class="string">&quot;];&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; pts.length; j++)</span><br><span class="line">                    <span class="comment">// 生成 args[1...N] = ($w)$1...N;</span></span><br><span class="line">                    code.append(<span class="string">&quot; args[&quot;</span>).append(j).append(<span class="string">&quot;] = ($w)$&quot;</span>).append(j + <span class="number">1</span>).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                <span class="comment">// 生成 InvokerHandler 接口的 invoker 方法调用语句，如下：</span></span><br><span class="line">                <span class="comment">// Object ret = handler.invoke(this, methods[1...N], args);</span></span><br><span class="line">                code.append(<span class="string">&quot; Object ret = handler.invoke(this, methods[&quot;</span> + ix + <span class="string">&quot;], args);&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回值不为 void</span></span><br><span class="line">                <span class="keyword">if</span> (!Void.TYPE.equals(rt))</span><br><span class="line">                    <span class="comment">// 生成返回语句，形如 return (java.lang.String) ret;</span></span><br><span class="line">                    code.append(<span class="string">&quot; return &quot;</span>).append(asArgument(rt, <span class="string">&quot;ret&quot;</span>)).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                methods.add(method);</span><br><span class="line">                <span class="comment">// 添加方法名、访问控制符、参数列表、方法代码等信息到 ClassGenerator 中 </span></span><br><span class="line">                ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pkg == <span class="literal">null</span>)</span><br><span class="line">            pkg = PACKAGE_NAME;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建接口代理类名称：pkg + &quot;.proxy&quot; + id，比如 com.tianxiaobo.proxy0</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pcn</span> <span class="operator">=</span> pkg + <span class="string">&quot;.proxy&quot;</span> + id;</span><br><span class="line">        ccp.setClassName(pcn);</span><br><span class="line">        ccp.addField(<span class="string">&quot;public static java.lang.reflect.Method[] methods;&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成 private java.lang.reflect.InvocationHandler handler;</span></span><br><span class="line">        ccp.addField(<span class="string">&quot;private &quot;</span> + InvocationHandler.class.getName() + <span class="string">&quot; handler;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为接口代理类添加带有 InvocationHandler 参数的构造方法，比如：</span></span><br><span class="line">        <span class="comment">// porxy0(java.lang.reflect.InvocationHandler arg0) &#123;</span></span><br><span class="line">        <span class="comment">//     handler=$1;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        ccp.addConstructor(Modifier.PUBLIC, <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;InvocationHandler.class&#125;, <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[<span class="number">0</span>], <span class="string">&quot;handler=$1;&quot;</span>);</span><br><span class="line">        <span class="comment">// 为接口代理类添加默认构造方法</span></span><br><span class="line">        ccp.addDefaultConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成接口代理类</span></span><br><span class="line">        Class&lt;?&gt; clazz = ccp.toClass();</span><br><span class="line">        clazz.getField(<span class="string">&quot;methods&quot;</span>).set(<span class="literal">null</span>, methods.toArray(<span class="keyword">new</span> <span class="title class_">Method</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 Proxy 子类名称，比如 Proxy1，Proxy2 等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fcn</span> <span class="operator">=</span> Proxy.class.getName() + id;</span><br><span class="line">        ccm = ClassGenerator.newInstance(cl);</span><br><span class="line">        ccm.setClassName(fcn);</span><br><span class="line">        ccm.addDefaultConstructor();</span><br><span class="line">        ccm.setSuperClass(Proxy.class);</span><br><span class="line">        <span class="comment">// 为 Proxy 的抽象方法 newInstance 生成实现代码，形如：</span></span><br><span class="line">        <span class="comment">// public Object newInstance(java.lang.reflect.InvocationHandler h) &#123; </span></span><br><span class="line">        <span class="comment">//     return new com.tianxiaobo.proxy0($1);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        ccm.addMethod(<span class="string">&quot;public Object newInstance(&quot;</span> + InvocationHandler.class.getName() + <span class="string">&quot; h)&#123; return new &quot;</span> + pcn + <span class="string">&quot;($1); &#125;&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成 Proxy 实现类</span></span><br><span class="line">        Class&lt;?&gt; pc = ccm.toClass();</span><br><span class="line">        <span class="comment">// 通过反射创建 Proxy 实例</span></span><br><span class="line">        proxy = (Proxy) pc.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ccp != <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            ccp.release();</span><br><span class="line">        <span class="keyword">if</span> (ccm != <span class="literal">null</span>)</span><br><span class="line">            ccm.release();</span><br><span class="line">        <span class="keyword">synchronized</span> (cache) &#123;</span><br><span class="line">            <span class="keyword">if</span> (proxy == <span class="literal">null</span>)</span><br><span class="line">                cache.remove(key);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 写缓存</span></span><br><span class="line">                cache.put(key, <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;Proxy&gt;(proxy));</span><br><span class="line">            <span class="comment">// 唤醒其他等待线程</span></span><br><span class="line">            cache.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码比较复杂，我也写了很多注释。大家在阅读这段代码时，要搞清楚 ccp 和 ccm 的用途，不然会被搞晕。ccp 用于为服务接口生成代理类，比如我们有一个 DemoService 接口，这个接口代理类就是由 ccp 生成的。ccm 则是用于为 org.apache.dubbo.common.bytecode.Proxy 抽象类生成子类，主要是实现 Proxy 的抽象方法。下面以 org.apache.dubbo.demo.DemoService 这个接口为例，来看一下该接口代理类代码大致是怎样的（忽略 EchoService 接口）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.dubbo.common.bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">proxy0</span> <span class="keyword">implements</span> <span class="title class_">org</span>.apache.dubbo.demo.DemoService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> java.lang.reflect.Method[] methods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> java.lang.reflect.InvocationHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">proxy0</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">proxy0</span><span class="params">(java.lang.reflect.InvocationHandler arg0)</span> &#123;</span><br><span class="line">        handler = $<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.lang.String <span class="title function_">sayHello</span><span class="params">(java.lang.String arg0)</span> &#123;</span><br><span class="line">        Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">        args[<span class="number">0</span>] = ($w) $<span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> handler.invoke(<span class="built_in">this</span>, methods[<span class="number">0</span>], args);</span><br><span class="line">        <span class="keyword">return</span> (java.lang.String) ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到这里代理类生成逻辑就分析完了。整个过程比较复杂，大家需要耐心看一下，本节点到这里。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>本篇文章对服务引用的过程进行了较为详尽的分析，之所以说是较为详尽，是因为还有一些地方没有分析到。比如 Directory、Cluster 等实现类的代码并未进行详细分析，由于这些类功能比较独立，因此我打算后续单独成文进行分析。暂时我们可以先把这些类看成黑盒，只要知道这些类的用途即可。引用服务过程涉及到的调用也非常多，大家在阅读相关代码的中耐心些，并多进行调试。</p><p>好了，本篇文章就先到这里了。谢谢阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四、Dubbo-源码分析-–-服务引用&quot;&gt;&lt;a href=&quot;#四、Dubbo-源码分析-–-服务引用&quot; class=&quot;headerlink&quot; title=&quot;四、Dubbo 源码分析 – 服务引用&quot;&gt;&lt;/a&gt;四、Dubbo 源码分析 – 服务引用&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 服务导出</title>
    <link href="https://hexo.tryrun.top/posts/bc8dae89.html"/>
    <id>https://hexo.tryrun.top/posts/bc8dae89.html</id>
    <published>2020-09-21T14:29:54.000Z</published>
    <updated>2020-09-21T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、Dubbo-源码分析-–-服务导出"><a href="#三、Dubbo-源码分析-–-服务导出" class="headerlink" title="三、Dubbo 源码分析 – 服务导出"></a>三、Dubbo 源码分析 – 服务导出</h1><h2 id="1-服务导出过程"><a href="#1-服务导出过程" class="headerlink" title="1.服务导出过程"></a>1.服务导出过程</h2><p>本篇文章，我们来研究一下 Dubbo 导出服务的过程。Dubbo 服务导出过程始于 Spring 容器发布刷新事件，Dubbo 在接收到事件后，会立即执行服务导出逻辑。整个逻辑大致可分为三个部分，第一是前置工作，主要用于检查参数，组装 URL。第二是导出服务，包含导出服务到本地 (JVM)，和导出服务到远程两个过程。第三是向注册中心注册服务，用于服务发现。本篇文章将会对这三个部分代码进行详细的分析，在分析之前，我们先来了解一下服务的导出过程。</p><p>Dubbo 支持两种服务导出方式，分别延迟导出和立即导出。延迟导出的入口是 ServiceBean 的 afterPropertiesSet 方法，立即导出的入口是 ServiceBean 的 onApplicationEvent 方法。本文打算分析服务延迟导出过程，因此不会分析 afterPropertiesSet 方法。下面从 onApplicationEvent 方法说起，该方法收到 Spring 容器的刷新事件后，会调用 export 方法执行服务导出操作。服务导出之前，要进行对一系列的配置进行检查，以及生成 URL。准备工作做完，随后开始导出服务。首先导出到本地，然后再导出到远程。导出到本地就是将服务导出到 JVM 中，此过程比较简单。导出到远程的过程则要复杂的多，以 dubbo 协议为例，DubboProtocol 类的 export 方法将会被调用。该方法主要用于创建 Exporter 和 ExchangeServer。ExchangeServer 本身并不具备通信能力，需要借助更底层的 Server 实现通信功能。因此，在创建 ExchangeServer 实例时，需要先创建 NettyServer 或者 MinaServer 实例，并将实例作为参数传给 ExchangeServer 实现类的构造方法。ExchangeServer 实例创建完成后，导出服务到远程的过程也就接近尾声了。服务导出结束后，服务消费者即可通过直联的方式消费服务。当然，一般我们不会使用直联的方式消费服务。所以，在服务导出结束后，紧接着要做的事情是向注册中心注册服务。此时，客户端即可从注册中心发现服务。</p><p>以上就是 Dubbo 服务导出的过程，比较复杂。下面开始分析源码，从源码的角度展现整个过程。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h2><p>一场 Dubbo 源码分析的马拉松比赛即将开始，现在我们站在赛道的起点进行热身准备。本次比赛的起点位置位于 ServiceBean 的 onApplicationEvent 方法处。好了，发令枪响了，我将和一些朋友从 onApplicationEvent 方法处出发，探索 Dubbo 服务导出的全过程。下面我们来看一下 onApplicationEvent 方法的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">// 是否有延迟导出 &amp;&amp; 是否已导出 &amp;&amp; 是不是已被取消导出</span></span><br><span class="line">    <span class="keyword">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123;</span><br><span class="line">        <span class="comment">// 导出服务</span></span><br><span class="line">        export();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onApplicationEvent 是一个事件响应方法，该方法会在收到 Spring 上下文刷新事件后执行。这个方法首先会根据条件决定是否导出服务，比如有些服务设置了延时导出，那么此时就不应该在此处导出。还有一些服务已经被导出了，或者当前服务被取消导出了，此时也不能再次导出相关服务。注意这里的 isDelay 方法，这个方法字面意思是“是否延迟导出服务”，返回 true 表示延迟导出，false 表示不延迟导出。但是该方法真实意思却并非如此，当方法返回 true 时，表示无需延迟导出。返回 false 时，表示需要延迟导出。与字面意思恰恰相反，让人觉得很奇怪。下面我们来看一下这个方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -☆- ServiceBean</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isDelay</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 delay</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">delay</span> <span class="operator">=</span> getDelay();</span><br><span class="line">    <span class="type">ProviderConfig</span> <span class="variable">provider</span> <span class="operator">=</span> getProvider();</span><br><span class="line">    <span class="keyword">if</span> (delay == <span class="literal">null</span> &amp;&amp; provider != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果前面获取的 delay 为空，这里继续获取</span></span><br><span class="line">        delay = provider.getDelay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断 delay 是否为空，或者等于 -1</span></span><br><span class="line">    <span class="keyword">return</span> supportedApplicationListener &amp;&amp; (delay == <span class="literal">null</span> || delay == -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时忽略 supportedApplicationListener 这个条件，当 delay 为空，或者等于-1时，该方法返回 true，而不是 false。这个方法的返回值让人有点困惑，因此我重构了该方法的代码，并给 Dubbo 提了一个 Pull Request，最终这个 PR 被合到了 Dubbo 主分支中。详细请参见 <a href="https://github.com/apache/incubator-dubbo/pull/2686">Dubbo #2686</a>。</p><p>现在解释一下 supportedApplicationListener 变量含义，该变量用于表示当前的 Spring 容器是否支持 ApplicationListener，这个值初始为 false。在 Spring 容器将自己设置到 ServiceBean 中时，ServiceBean 的 setApplicationContext 方法会检测 Spring 容器是否支持 ApplicationListener。若支持，则将 supportedApplicationListener 置为 true。代码就不分析了，大家自行查阅了解。</p><p>ServiceBean 是 Dubbo 与 Spring 框架进行整合的关键，可以看做是两个框架之间的桥梁。具有同样作用的类还有 ReferenceBean。ServiceBean 实现了 Spring 的一些拓展接口，有 FactoryBean、ApplicationContextAware、ApplicationListener、DisposableBean 和 BeanNameAware。这些接口我在 [Spring 源码分析系列][Spring]文章中介绍过，大家可以参考一下，这里就不赘述了。</p><p>现在我们知道了 Dubbo 服务导出过程的起点。那么接下来，我们快马加鞭，继续进行比赛。赛程预告，下一站是“服务导出的前置工作”。</p><h3 id="2-1-前置工作"><a href="#2-1-前置工作" class="headerlink" title="2.1 前置工作"></a>2.1 前置工作</h3><p>前置工作主要包含两个部分，分别是配置检查，以及 URL 装配。在导出服务之前，Dubbo 需要检查用户的配置是否合理，或者为用户补充缺省配置。配置检查完成后，接下来需要根据这些配置组装 URL。在 Dubbo 中，URL 的作用十分重要。Dubbo 使用 URL 作为配置载体，所有的拓展点都是通过 URL 获取配置。这一点，官方文档中有所说明。</p><blockquote><p>采用 URL 作为配置信息的统一格式，所有扩展点都通过传递 URL 携带配置信息。</p></blockquote><p>接下来，我们先来分析配置检查部分的源码，随后再来分析 URL 组装部分的源码。</p><h4 id="2-1-1-检查配置"><a href="#2-1-1-检查配置" class="headerlink" title="2.1.1 检查配置"></a>2.1.1 检查配置</h4><p>本节我们接着前面的源码向下分析，前面说过 onApplicationEvent 方法在经过一些判断后，会决定是否调用 export 方法导出服务。那么下面我们从 export 方法开始进行分析，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 export 和 delay 配置</span></span><br><span class="line">        <span class="keyword">if</span> (export == <span class="literal">null</span>) &#123;</span><br><span class="line">            export = provider.getExport();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delay == <span class="literal">null</span>) &#123;</span><br><span class="line">            delay = provider.getDelay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 export 为 false，则不导出服务</span></span><br><span class="line">    <span class="keyword">if</span> (export != <span class="literal">null</span> &amp;&amp; !export) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (delay != <span class="literal">null</span> &amp;&amp; delay &gt; <span class="number">0</span>) &#123;    <span class="comment">// delay &gt; 0，延时导出服务</span></span><br><span class="line">        delayExportExecutor.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                doExport();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, delay, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 立即导出服务</span></span><br><span class="line">        doExport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>export 对两个配置进行了检查，并配置执行相应的动作。首先是 export，这个配置决定了是否导出服务。有时候我们只是想本地启动服务进行一些调试工作，这个时候我们并不希望把本地启动的服务暴露出去给别人调用。此时，我们就可以通过配置 export 禁止服务导出，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">export</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>delay 见名知意了，用于延迟导出服务。下面，我们继续分析源码，这次要分析的是 doExport 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">doExport</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (unexported) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Already unexported!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (exported) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exported = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 检测 interfaceName 是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (interfaceName == <span class="literal">null</span> || interfaceName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;interface not allow null!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检测 provider 是否为空，为空则新建一个，并通过系统变量为其初始化</span></span><br><span class="line">    checkDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面几个 if 语句用于检测 provider、application 等核心配置类对象是否为空，</span></span><br><span class="line">    <span class="comment">// 若为空，则尝试从其他配置类对象中获取相应的实例。</span></span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (application == <span class="literal">null</span>) &#123;</span><br><span class="line">            application = provider.getApplication();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">module</span> = provider.getModule();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">        <span class="keyword">if</span> (protocols == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;</span><br><span class="line">            registries = <span class="keyword">module</span>.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (application != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (registries == <span class="literal">null</span>) &#123;</span><br><span class="line">            registries = application.getRegistries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (monitor == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测 ref 是否泛化服务类型</span></span><br><span class="line">    <span class="keyword">if</span> (ref <span class="keyword">instanceof</span> GenericService) &#123;</span><br><span class="line">        <span class="comment">// 设置 interfaceClass 为 GenericService.class</span></span><br><span class="line">        interfaceClass = GenericService.class;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(generic)) &#123;</span><br><span class="line">            <span class="comment">// 设置 generic = &quot;true&quot;</span></span><br><span class="line">            generic = Boolean.TRUE.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// ref 非 GenericService 类型</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            interfaceClass = Class.forName(interfaceName, <span class="literal">true</span>, Thread.currentThread()</span><br><span class="line">                    .getContextClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对 interfaceClass，以及 &lt;dubbo:method&gt; 必要字段进行检查</span></span><br><span class="line">        checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        <span class="comment">// 对 ref 合法性进行检测</span></span><br><span class="line">        checkRef();</span><br><span class="line">        <span class="comment">// 设置 generic = &quot;false&quot;</span></span><br><span class="line">        generic = Boolean.FALSE.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// local 属性 Dubbo 官方文档中没有说明，不过 local 和 stub 在功能应该是一致的，用于配置本地存根</span></span><br><span class="line">    <span class="keyword">if</span> (local != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(local)) &#123;</span><br><span class="line">            local = interfaceName + <span class="string">&quot;Local&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; localClass;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取本地存根类</span></span><br><span class="line">            localClass = ClassHelper.forNameWithThreadContextClassLoader(local);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检测本地存根类是否可赋值给接口类，若不可赋值则会抛出异常，提醒使用者本地存根类类型不合法</span></span><br><span class="line">        <span class="keyword">if</span> (!interfaceClass.isAssignableFrom(localClass)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;The local implementation class &quot;</span> + localClass.getName() + <span class="string">&quot; not implement interface &quot;</span> + interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stub 和 local 均用于配置本地存根</span></span><br><span class="line">    <span class="keyword">if</span> (stub != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 此处的代码和上一个 if 分支的代码基本一致，这里省略了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测各种对象是否为空，为空则新建，或者抛出异常</span></span><br><span class="line">    checkApplication();</span><br><span class="line">    checkRegistry();</span><br><span class="line">    checkProtocol();</span><br><span class="line">    appendProperties(<span class="built_in">this</span>);</span><br><span class="line">    checkStubAndMock(interfaceClass);</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span> || path.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        path = interfaceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出服务</span></span><br><span class="line">    doExportUrls();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ProviderModel 表示服务提供者模型，此对象中存储了和服务提供者相关的信息。</span></span><br><span class="line">    <span class="comment">// 比如服务的配置信息，服务实例等。每个被导出的服务对应一个 ProviderModel。</span></span><br><span class="line">    <span class="comment">// ApplicationModel 持有所有的 ProviderModel。</span></span><br><span class="line">    <span class="type">ProviderModel</span> <span class="variable">providerModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProviderModel</span>(getUniqueServiceName(), <span class="built_in">this</span>, ref);</span><br><span class="line">    ApplicationModel.initProviderModel(getUniqueServiceName(), providerModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是配置检查的相关分析，代码比较多，需要大家耐心看一下。下面对配置检查的逻辑进行简单的总结，如下：</p><ol><li>检测 标签的 interface 属性合法性，不合法则抛出异常</li><li>检测 ProviderConfig、ApplicationConfig 等核心配置类对象是否为空，若为空，则尝试从其他配置类对象中获取相应的实例。</li><li>检测并处理泛化服务和普通服务类</li><li>检测本地存根配置，并进行相应的处理</li><li>对 ApplicationConfig、RegistryConfig 等配置类进行检测，为空则尝试创建，若无法创建则抛出异常</li></ol><p>配置检查并非本文重点，因此我不打算对 doExport 方法所调用的方法进行分析（doExportUrls 方法除外）。在这些方法中，除了 appendProperties 方法稍微复杂一些，其他方法都还好。因此，大家可自行进行分析。好了，其他的就不多说了，继续向下分析。</p><h4 id="2-1-2-多协议多注册中心导出服务"><a href="#2-1-2-多协议多注册中心导出服务" class="headerlink" title="2.1.2 多协议多注册中心导出服务"></a>2.1.2 多协议多注册中心导出服务</h4><p>Dubbo 允许我们使用不同的协议导出服务，也允许我们向多个注册中心注册服务。Dubbo 在 doExportUrls 方法中对多协议，多注册中心进行了支持。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doExportUrls</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载注册中心链接</span></span><br><span class="line">    List&lt;URL&gt; registryURLs = loadRegistries(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 遍历 protocols，导出每个服务</span></span><br><span class="line">    <span class="keyword">for</span> (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class="line">        doExportUrlsFor1Protocol(protocolConfig, registryURLs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码比较简单，首先是通过 loadRegistries 加载注册中心链接，然后再遍历 ProtocolConfig 集合导出每个服务。并在导出服务的过程中，将服务注册到注册中心处。下面，我们先来看一下 loadRegistries 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;URL&gt; <span class="title function_">loadRegistries</span><span class="params">(<span class="type">boolean</span> provider)</span> &#123;</span><br><span class="line">    <span class="comment">// 检测是否存在注册中心配置类，不存在则抛出异常</span></span><br><span class="line">    checkRegistry();</span><br><span class="line">    List&lt;URL&gt; registryList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;URL&gt;();</span><br><span class="line">    <span class="keyword">if</span> (registries != <span class="literal">null</span> &amp;&amp; !registries.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (RegistryConfig config : registries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> config.getAddress();</span><br><span class="line">            <span class="keyword">if</span> (address == <span class="literal">null</span> || address.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 若 address 为空，则将其设为 0.0.0.0</span></span><br><span class="line">                address = Constants.ANYHOST_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从系统属性中加载注册中心地址</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sysaddress</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;dubbo.registry.address&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (sysaddress != <span class="literal">null</span> &amp;&amp; sysaddress.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                address = sysaddress;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断 address 是否合法</span></span><br><span class="line">            <span class="keyword">if</span> (address.length() &gt; <span class="number">0</span> &amp;&amp; !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) &#123;</span><br><span class="line">                Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">                <span class="comment">// 添加 ApplicationConfig 中的字段信息到 map 中</span></span><br><span class="line">                appendParameters(map, application);</span><br><span class="line">                <span class="comment">// 添加 RegistryConfig 字段信息到 map 中</span></span><br><span class="line">                appendParameters(map, config);</span><br><span class="line">                map.put(<span class="string">&quot;path&quot;</span>, RegistryService.class.getName());</span><br><span class="line">                map.put(<span class="string">&quot;dubbo&quot;</span>, Version.getProtocolVersion());</span><br><span class="line">                map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">                <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(<span class="string">&quot;protocol&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension(<span class="string">&quot;remote&quot;</span>)) &#123;</span><br><span class="line">                        map.put(<span class="string">&quot;protocol&quot;</span>, <span class="string">&quot;remote&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        map.put(<span class="string">&quot;protocol&quot;</span>, <span class="string">&quot;dubbo&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 解析得到 URL 列表，address 可能包含多个注册中心 ip，</span></span><br><span class="line">                <span class="comment">// 因此解析得到的是一个 URL 列表</span></span><br><span class="line">                List&lt;URL&gt; urls = UrlUtils.parseURLs(address, map);</span><br><span class="line">                <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                    url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());</span><br><span class="line">                    <span class="comment">// 将 URL 协议头设置为 registry</span></span><br><span class="line">                    url = url.setProtocol(Constants.REGISTRY_PROTOCOL);</span><br><span class="line">                    <span class="comment">// 通过判断条件，决定是否添加 url 到 registryList 中，条件如下：</span></span><br><span class="line">                    <span class="comment">// (服务提供者 &amp;&amp; register = true 或 null) </span></span><br><span class="line">                    <span class="comment">//    || (非服务提供者 &amp;&amp; subscribe = true 或 null)</span></span><br><span class="line">                    <span class="keyword">if</span> ((provider &amp;&amp; url.getParameter(Constants.REGISTER_KEY, <span class="literal">true</span>))</span><br><span class="line">                            || (!provider &amp;&amp; url.getParameter(Constants.SUBSCRIBE_KEY, <span class="literal">true</span>))) &#123;</span><br><span class="line">                        registryList.add(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> registryList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码不是很复杂，包含如下逻辑：</p><ol><li>检测是否存在注册中心配置类，不存在则抛出异常</li><li>构建参数映射集合，也就是 map</li><li>构建注册中心链接列表</li><li>遍历链接列表，并根据条件决定是否将其添加到 registryList 中</li></ol><p>关于多协议多注册中心导出服务就先分析到这，代码不是很多，就不过多叙述了。接下来分析 URL 组装过程。</p><h4 id="2-1-3-组装-URL"><a href="#2-1-3-组装-URL" class="headerlink" title="2.1.3 组装 URL"></a>2.1.3 组装 URL</h4><p>配置检查完毕后，紧接着要做的事情是根据配置，以及其他一些信息组装 URL。前面说过，URL 是 Dubbo 配置的载体，通过 URL 可让 Dubbo 的各种配置在各个模块之间传递。URL 之于 Dubbo，犹如水之于鱼，非常重要。大家在阅读 Dubbo 服务导出相关源码的过程中，要注意 URL 内容的变化。既然 URL 如此重要，那么下面我们来了解一下 URL 组装的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doExportUrlsFor1Protocol</span><span class="params">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> protocolConfig.getName();</span><br><span class="line">    <span class="comment">// 如果协议名为空，或空串，则将协议名变量设置为 dubbo</span></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        name = <span class="string">&quot;dubbo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">// 添加 side、版本、时间戳以及进程号等信息到 map 中</span></span><br><span class="line">    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);</span><br><span class="line">    map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());</span><br><span class="line">    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">    <span class="keyword">if</span> (ConfigUtils.getPid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反射将对象的字段信息到 map 中</span></span><br><span class="line">    appendParameters(map, application);</span><br><span class="line">    appendParameters(map, <span class="keyword">module</span>);</span><br><span class="line">    appendParameters(map, provider, Constants.DEFAULT_KEY);</span><br><span class="line">    appendParameters(map, protocolConfig);</span><br><span class="line">    appendParameters(map, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// methods 为 MethodConfig 集合，MethodConfig 中存储了 &lt;dubbo:method&gt; 标签的配置信息</span></span><br><span class="line">    <span class="keyword">if</span> (methods != <span class="literal">null</span> &amp;&amp; !methods.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 这段代码用于添加 Callback 配置到 map 中，代码太长，待会单独分析</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测 generic 是否为 &quot;true&quot;，并根据检测结果向 map 中添加不同的信息</span></span><br><span class="line">    <span class="keyword">if</span> (ProtocolUtils.isGeneric(generic)) &#123;</span><br><span class="line">        map.put(Constants.GENERIC_KEY, generic);</span><br><span class="line">        map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">revision</span> <span class="operator">=</span> Version.getVersion(interfaceClass, version);</span><br><span class="line">        <span class="keyword">if</span> (revision != <span class="literal">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;revision&quot;</span>, revision);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为接口生成包裹类 Wrapper，Wrapper 中包含了接口的详细信息，比如接口方法名数组，字段信息等</span></span><br><span class="line">        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">        <span class="comment">// 添加方法名到 map 中，如果包含多个方法名，则用逗号隔开，比如 method = init,destroy</span></span><br><span class="line">        <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;NO method found in service interface ...&quot;</span>);</span><br><span class="line">            map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将逗号作为分隔符连接方法名，并将连接后的字符串放入 map 中</span></span><br><span class="line">            map.put(Constants.METHODS_KEY, StringUtils.join(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;(Arrays.asList(methods)), <span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 token 到 map 中</span></span><br><span class="line">    <span class="keyword">if</span> (!ConfigUtils.isEmpty(token)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ConfigUtils.isDefault(token)) &#123;</span><br><span class="line">            map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(Constants.TOKEN_KEY, token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断协议名是否为 injvm</span></span><br><span class="line">    <span class="keyword">if</span> (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) &#123;</span><br><span class="line">        protocolConfig.setRegister(<span class="literal">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;notify&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取上下文路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> protocolConfig.getContextpath();</span><br><span class="line">    <span class="keyword">if</span> ((contextPath == <span class="literal">null</span> || contextPath.length() == <span class="number">0</span>) &amp;&amp; provider != <span class="literal">null</span>) &#123;</span><br><span class="line">        contextPath = provider.getContextpath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 host 和 port</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="built_in">this</span>.findConfigedHosts(protocolConfig, registryURLs, map);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="built_in">this</span>.findConfigedPorts(protocolConfig, name, map);</span><br><span class="line">    <span class="comment">// 组装 URL</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(name, host, port, (contextPath == <span class="literal">null</span> || contextPath.length() == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : contextPath + <span class="string">&quot;/&quot;</span>) + path, map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码首先是将一些信息，比如版本、时间戳、方法名以及各种配置对象的字段信息放入到 map 中，map 中的内容将作为 URL 的查询字符串。构建好 map 后，紧接着是获取上下文路径、主机名以及端口号等信息。最后将 map 和主机名等数据传给 URL 构造方法创建 URL 对象。需要注意的是，这里出现的 URL 并非 java.net.URL，而是 com.alibaba.dubbo.common.URL。</p><p>上面省略了一段代码，这里简单分析一下。这段代码用于检测 标签中的配置信息，并将相关配置添加到 map 中。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doExportUrlsFor1Protocol</span><span class="params">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// methods 为 MethodConfig 集合，MethodConfig 中存储了 &lt;dubbo:method&gt; 标签的配置信息</span></span><br><span class="line">    <span class="keyword">if</span> (methods != <span class="literal">null</span> &amp;&amp; !methods.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MethodConfig method : methods) &#123;</span><br><span class="line">            <span class="comment">// 添加 MethodConfig 对象的字段信息到 map 中，键 = 方法名.属性名。</span></span><br><span class="line">            <span class="comment">// 比如存储 &lt;dubbo:method name=&quot;sayHello&quot; retries=&quot;2&quot;&gt; 对应的 MethodConfig，</span></span><br><span class="line">            <span class="comment">// 键 = sayHello.retries，map = &#123;&quot;sayHello.retries&quot;: 2, &quot;xxx&quot;: &quot;yyy&quot;&#125;</span></span><br><span class="line">            appendParameters(map, method, method.getName());</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">retryKey</span> <span class="operator">=</span> method.getName() + <span class="string">&quot;.retry&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(retryKey)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">retryValue</span> <span class="operator">=</span> map.remove(retryKey);</span><br><span class="line">                <span class="comment">// 检测 MethodConfig retry 是否为 false，若是，则设置重试次数为0</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;false&quot;</span>.equals(retryValue)) &#123;</span><br><span class="line">                    map.put(method.getName() + <span class="string">&quot;.retries&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 ArgumentConfig 列表</span></span><br><span class="line">            List&lt;ArgumentConfig&gt; arguments = method.getArguments();</span><br><span class="line">            <span class="keyword">if</span> (arguments != <span class="literal">null</span> &amp;&amp; !arguments.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ArgumentConfig argument : arguments) &#123;</span><br><span class="line">                    <span class="comment">// 检测 type 属性是否为空，或者空串（分支1 ⭐️）</span></span><br><span class="line">                    <span class="keyword">if</span> (argument.getType() != <span class="literal">null</span> &amp;&amp; argument.getType().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Method[] methods = interfaceClass.getMethods();</span><br><span class="line">                        <span class="keyword">if</span> (methods != <span class="literal">null</span> &amp;&amp; methods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">                                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> methods[i].getName();</span><br><span class="line">                                <span class="comment">// 比对方法名，查找目标方法</span></span><br><span class="line">                                <span class="keyword">if</span> (methodName.equals(method.getName())) &#123;</span><br><span class="line">                                    Class&lt;?&gt;[] argtypes = methods[i].getParameterTypes();</span><br><span class="line">                                    <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="comment">// 检测 ArgumentConfig 中的 type 属性与方法参数列表</span></span><br><span class="line">                                        <span class="comment">// 中的参数名称是否一致，不一致则抛出异常(分支2 ⭐️)</span></span><br><span class="line">                                        <span class="keyword">if</span> (argtypes[argument.getIndex()].getName().equals(argument.getType())) &#123;</span><br><span class="line">                                            <span class="comment">// 添加 ArgumentConfig 字段信息到 map 中，</span></span><br><span class="line">                                            <span class="comment">// 键前缀 = 方法名.index，比如:</span></span><br><span class="line">                                            <span class="comment">// map = &#123;&quot;sayHello.3&quot;: true&#125;</span></span><br><span class="line">                                            appendParameters(map, argument, method.getName() + <span class="string">&quot;.&quot;</span> + argument.getIndex());</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;argument config error: ...&quot;</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 分支3 ⭐️</span></span><br><span class="line">                                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; argtypes.length; j++) &#123;</span><br><span class="line">                                            Class&lt;?&gt; argclazz = argtypes[j];</span><br><span class="line">                                            <span class="comment">// 从参数类型列表中查找类型名称为 argument.type 的参数</span></span><br><span class="line">                                            <span class="keyword">if</span> (argclazz.getName().equals(argument.getType())) &#123;</span><br><span class="line">                                                appendParameters(map, argument, method.getName() + <span class="string">&quot;.&quot;</span> + j);</span><br><span class="line">                                                <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span> &amp;&amp; argument.getIndex() != j) &#123;</span><br><span class="line">                                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;argument config error: ...&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 用户未配置 type 属性，但配置了 index 属性，且 index != -1</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span>) &#123;    <span class="comment">// 分支4 ⭐️</span></span><br><span class="line">                        <span class="comment">// 添加 ArgumentConfig 字段信息到 map 中</span></span><br><span class="line">                        appendParameters(map, argument, method.getName() + <span class="string">&quot;.&quot;</span> + argument.getIndex());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;argument config must set index or type&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码 for 循环和 if else 分支嵌套太多，导致层次太深，不利于阅读，需要耐心看一下。大家在看这段代码时，注意把几个重要的条件分支找出来。只要理解了这几个分支的意图，就可以弄懂这段代码。我在上面代码中用⭐️符号标识出了4个重要的分支，下面用伪代码解释一下这几个分支的含义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 ArgumentConfig 列表</span></span><br><span class="line"><span class="keyword">for</span> (遍历 ArgumentConfig 列表) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type 不为 <span class="literal">null</span>，也不为空串) &#123;    <span class="comment">// 分支1</span></span><br><span class="line">        <span class="number">1.</span> 通过反射获取 interfaceClass 的方法列表</span><br><span class="line">        <span class="keyword">for</span> (遍历方法列表) &#123;</span><br><span class="line">            <span class="number">1.</span> 比对方法名，查找目标方法</span><br><span class="line">            <span class="number">2.</span> 通过反射获取目标方法的参数类型数组 argtypes</span><br><span class="line">            <span class="title function_">if</span> <span class="params">(index != -<span class="number">1</span>)</span> &#123;    <span class="comment">// 分支2</span></span><br><span class="line">                <span class="number">1.</span> 从 argtypes 数组中获取下标 index 处的元素 argType</span><br><span class="line">                <span class="number">2.</span> 检测 argType 的名称与 ArgumentConfig 中的 type 属性是否一致</span><br><span class="line">                <span class="number">3.</span> 添加 ArgumentConfig 字段信息到 map 中，或抛出异常</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 分支3</span></span><br><span class="line">                <span class="number">1.</span> 遍历参数类型数组 argtypes，查找 argument.type 类型的参数</span><br><span class="line">                <span class="number">2.</span> 添加 ArgumentConfig 字段信息到 map 中</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;    <span class="comment">// 分支4</span></span><br><span class="line">        <span class="number">1.</span> 添加 ArgumentConfig 字段信息到 map 中</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本节分析的源码中，appendParameters 这个方法出现的次数比较多，该方法用于将对象字段信息添加到 map 中。实现上则是通过反射获取目标对象的 getter 方法，并调用该方法获取属性值。然后再通过 getter 方法名解析出属性名，比如从方法名 getName 中可解析出属性 name。如果用户传入了属性名前缀，此时需要将属性名加入前缀内容。最后将 &lt;属性名，属性值&gt; 键值对存入到 map 中就行了。限于篇幅原因，这里就不分析 appendParameters 方法的源码了，大家请自行分析。</p><h3 id="2-2-导出-Dubbo-服务"><a href="#2-2-导出-Dubbo-服务" class="headerlink" title="2.2 导出 Dubbo 服务"></a>2.2 导出 Dubbo 服务</h3><p>前置工作做完，接下来就可以进行服务导出工作。服务导出，分为导出到本地 (JVM)，和导出到远程。在深入分析服务导出源码前，我们先来从宏观层面上看一下服务导出逻辑。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doExportUrlsFor1Protocol</span><span class="params">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">            .hasExtension(url.getProtocol())) &#123;</span><br><span class="line">        <span class="comment">// 加载 ConfiguratorFactory，并生成 Configurator 配置 url</span></span><br><span class="line">        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)</span><br><span class="line">                .getExtension(url.getProtocol()).getConfigurator(url).configure(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> url.getParameter(Constants.SCOPE_KEY);</span><br><span class="line">    <span class="comment">// 如果 scope = none，则什么都不做</span></span><br><span class="line">    <span class="keyword">if</span> (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line">        <span class="comment">// scope != remote，导出到本地</span></span><br><span class="line">        <span class="keyword">if</span> (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line">            exportLocal(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// scope != local，导出到远程</span></span><br><span class="line">        <span class="keyword">if</span> (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (registryURLs != <span class="literal">null</span> &amp;&amp; !registryURLs.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (URL registryURL : registryURLs) &#123;</span><br><span class="line">                    url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY));</span><br><span class="line">                    <span class="comment">// 加载监视器链接</span></span><br><span class="line">                    <span class="type">URL</span> <span class="variable">monitorUrl</span> <span class="operator">=</span> loadMonitor(registryURL);</span><br><span class="line">                    <span class="keyword">if</span> (monitorUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将监视器链接作为参数添加到 url 中</span></span><br><span class="line">                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">proxy</span> <span class="operator">=</span> url.getParameter(Constants.PROXY_KEY);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotEmpty(proxy)) &#123;</span><br><span class="line">                        registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 为服务提供类(ref)生成 Invoker</span></span><br><span class="line">                    Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));</span><br><span class="line">                    <span class="comment">// DelegateProviderMetaDataInvoker 仅用于持有 Invoker 和 ServiceConfig</span></span><br><span class="line">                    <span class="type">DelegateProviderMetaDataInvoker</span> <span class="variable">wrapperInvoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelegateProviderMetaDataInvoker</span>(invoker, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 导出服务，并生成 Exporter</span></span><br><span class="line">                    Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">                    exporters.add(exporter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 不存在注册中心，仅导出服务</span></span><br><span class="line">                Invoker&lt;?&gt; invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);</span><br><span class="line">                <span class="type">DelegateProviderMetaDataInvoker</span> <span class="variable">wrapperInvoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelegateProviderMetaDataInvoker</span>(invoker, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">                exporters.add(exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.urls.add(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码根据 url 中的 scope 参数决定服务导出方式，分别如下：</p><ul><li>scope &#x3D; none，不导出服务</li><li>scope !&#x3D; remote，导出到本地</li><li>scope !&#x3D; local，导出到远程</li></ul><p>不管是导出到本地，还是远程。进行服务导出之前，均需要先创建 Invoker。这是一个很重要的步骤，因此接下来我会先分析 Invoker 的创建过程。</p><h3 id="2-2-1-Invoker-创建过程"><a href="#2-2-1-Invoker-创建过程" class="headerlink" title="2.2.1 Invoker 创建过程"></a>2.2.1 Invoker 创建过程</h3><p>在 Dubbo 中，Invoker 是一个非常重要的模型。在服务提供端，以及服务引用端均会出现 Invoker。Dubbo 官方文档中对 Invoker 进行了说明，这里引用一下。</p><blockquote><p>Invoker 是实体域，它是 Dubbo 的核心模型，其它模型都向它靠扰，或转换成它，它代表一个可执行体，可向它发起 invoke 调用，它有可能是一个本地的实现，也可能是一个远程的实现，也可能一个集群实现。</p></blockquote><p>既然 Invoker 如此重要，那么我们很有必要搞清楚 Invoker 的用途。Invoker 是由 ProxyFactory 创建而来，Dubbo 默认的 ProxyFactory 实现类是 JavassistProxyFactory。下面我们到 JavassistProxyFactory 代码中，探索 Invoker 的创建过程。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- JavassistProxyFactory</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; Invoker&lt;T&gt; <span class="title function_">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> &#123;</span><br><span class="line">    <span class="comment">// 为目标类创建 Wrapper</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">&#x27;$&#x27;</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">    <span class="comment">// 创建匿名 Invoker 类对象，并实现 doInvoke 方法。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractProxyInvoker</span>&lt;T&gt;(proxy, type, url) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Object <span class="title function_">doInvoke</span><span class="params">(T proxy, String methodName,</span></span><br><span class="line"><span class="params">                                  Class&lt;?&gt;[] parameterTypes,</span></span><br><span class="line"><span class="params">                                  Object[] arguments)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="comment">// 调用 Wrapper 的 invokeMethod 方法，invokeMethod 最终会调用目标方法</span></span><br><span class="line">            <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，JavassistProxyFactory 创建了一个继承自 AbstractProxyInvoker 类的匿名对象，并覆写了抽象方法 doInvoke。覆写后的 doInvoke 逻辑比较简单，仅是将调用请求转发给了 Wrapper 类的 invokeMethod 方法。Wrapper 用于“包裹”目标类，Wrapper 是一个抽象类，仅可通过 getWrapper(Class) 方法创建子类。在创建 Wrapper 子类的过程中，子类代码生成逻辑会对 getWrapper 方法传入的 Class 对象进行解析，拿到诸如类方法，类成员变量等信息。以及生成 invokeMethod 方法代码，和其他一些方法代码。代码生成完毕后，通过 Javassist 生成 Class 对象，最后再通过反射创建 Wrapper 实例。相关的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Wrapper <span class="title function_">getWrapper</span><span class="params">(Class&lt;?&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (ClassGenerator.isDynamicClass(c))</span><br><span class="line">        c = c.getSuperclass();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == Object.class)</span><br><span class="line">        <span class="keyword">return</span> OBJECT_WRAPPER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访存</span></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">ret</span> <span class="operator">=</span> WRAPPER_MAP.get(c);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 缓存未命中，创建 Wrapper</span></span><br><span class="line">        ret = makeWrapper(c);</span><br><span class="line">        <span class="comment">// 写入缓存</span></span><br><span class="line">        WRAPPER_MAP.put(c, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getWrapper 方法只是包含了一些缓存操作逻辑，非重点。下面我们重点关注 makeWrapper 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Wrapper <span class="title function_">makeWrapper</span><span class="params">(Class&lt;?&gt; c)</span> &#123;</span><br><span class="line">    <span class="comment">// 检测 c 是否为私有类型，若是则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (c.isPrimitive())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Can not create wrapper for primitive type: &quot;</span> + c);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> c.getName();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> ClassHelper.getClassLoader(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// c1 用于存储 setPropertyValue 方法代码</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;public void setPropertyValue(Object o, String n, Object v)&#123; &quot;</span>);</span><br><span class="line">    <span class="comment">// c2 用于存储 getPropertyValue 方法代码</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;public Object getPropertyValue(Object o, String n)&#123; &quot;</span>);</span><br><span class="line">    <span class="comment">// c3 用于存储 invokeMethod 方法代码</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws &quot;</span> + InvocationTargetException.class.getName() + <span class="string">&quot;&#123; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成类型转换代码及异常捕捉代码，比如：</span></span><br><span class="line">    <span class="comment">//   DemoService w; try &#123; w = ((DemoServcie) $1); &#125;&#125;catch(Throwable e)&#123; throw new IllegalArgumentException(e); &#125;</span></span><br><span class="line">    c1.append(name).append(<span class="string">&quot; w; try&#123; w = ((&quot;</span>).append(name).append(<span class="string">&quot;)$1); &#125;catch(Throwable e)&#123; throw new IllegalArgumentException(e); &#125;&quot;</span>);</span><br><span class="line">    c2.append(name).append(<span class="string">&quot; w; try&#123; w = ((&quot;</span>).append(name).append(<span class="string">&quot;)$1); &#125;catch(Throwable e)&#123; throw new IllegalArgumentException(e); &#125;&quot;</span>);</span><br><span class="line">    c3.append(name).append(<span class="string">&quot; w; try&#123; w = ((&quot;</span>).append(name).append(<span class="string">&quot;)$1); &#125;catch(Throwable e)&#123; throw new IllegalArgumentException(e); &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pts 用于存储成员变量名和类型</span></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; pts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// ms 用于存储方法描述信息（可理解为方法签名）及 Method 实例</span></span><br><span class="line">    Map&lt;String, Method&gt; ms = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Method&gt;();</span><br><span class="line">    <span class="comment">// mns 为方法名列表</span></span><br><span class="line">    List&lt;String&gt; mns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">// dmns 用于存储定义在当前类中的方法的名称</span></span><br><span class="line">    List&lt;String&gt; dmns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------✨ 分割线1 ✨-------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 public 访问级别的字段，并为所有字段生成条件判断语句</span></span><br><span class="line">    <span class="keyword">for</span> (Field f : c.getFields()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fn</span> <span class="operator">=</span> f.getName();</span><br><span class="line">        Class&lt;?&gt; ft = f.getType();</span><br><span class="line">        <span class="keyword">if</span> (Modifier.isStatic(f.getModifiers()) || Modifier.isTransient(f.getModifiers()))</span><br><span class="line">            <span class="comment">// 忽略关键字 static 或 transient 修饰的变量</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成条件判断及赋值语句，比如：</span></span><br><span class="line">        <span class="comment">// if( $2.equals(&quot;name&quot;) ) &#123; w.name = (java.lang.String) $3; return;&#125;</span></span><br><span class="line">        <span class="comment">// if( $2.equals(&quot;age&quot;) ) &#123; w.age = ((Number) $3).intValue(); return;&#125;</span></span><br><span class="line">        c1.append(<span class="string">&quot; if( $2.equals(\&quot;&quot;</span>).append(fn).append(<span class="string">&quot;\&quot;) )&#123; w.&quot;</span>).append(fn).append(<span class="string">&quot;=&quot;</span>).append(arg(ft, <span class="string">&quot;$3&quot;</span>)).append(<span class="string">&quot;; return; &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成条件判断及返回语句，比如：</span></span><br><span class="line">        <span class="comment">// if( $2.equals(&quot;name&quot;) ) &#123; return ($w)w.name; &#125;</span></span><br><span class="line">        c2.append(<span class="string">&quot; if( $2.equals(\&quot;&quot;</span>).append(fn).append(<span class="string">&quot;\&quot;) )&#123; return ($w)w.&quot;</span>).append(fn).append(<span class="string">&quot;; &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储 &lt;字段名, 字段类型&gt; 键值对到 pts 中</span></span><br><span class="line">        pts.put(fn, ft);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------✨ 分割线2 ✨-------------------------------------</span></span><br><span class="line"></span><br><span class="line">    Method[] methods = c.getMethods();</span><br><span class="line">    <span class="comment">// 检测 c 中是否包含在当前类中声明的方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasMethod</span> <span class="operator">=</span> hasMethods(methods);</span><br><span class="line">    <span class="keyword">if</span> (hasMethod) &#123;</span><br><span class="line">        c3.append(<span class="string">&quot; try&#123;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m.getDeclaringClass() == Object.class)</span><br><span class="line">            <span class="comment">// 忽略 Object 中定义的方法</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">mn</span> <span class="operator">=</span> m.getName();</span><br><span class="line">        <span class="comment">// 生成方法名判断语句，示例如下：</span></span><br><span class="line">        <span class="comment">// if ( &quot;sayHello&quot;.equals( $2 )</span></span><br><span class="line">        c3.append(<span class="string">&quot; if( \&quot;&quot;</span>).append(mn).append(<span class="string">&quot;\&quot;.equals( $2 ) &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> m.getParameterTypes().length;</span><br><span class="line">        <span class="comment">// 生成运行时传入参数的数量与方法的参数列表长度判断语句，示例如下：</span></span><br><span class="line">        <span class="comment">// &amp;&amp; $3.length == 2</span></span><br><span class="line">        c3.append(<span class="string">&quot; &amp;&amp; &quot;</span>).append(<span class="string">&quot; $3.length == &quot;</span>).append(len);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">override</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method m2 : methods) &#123;</span><br><span class="line">            <span class="comment">// 检测方法是否存在重载情况，条件为：方法对象不同 &amp;&amp; 方法名相同</span></span><br><span class="line">            <span class="keyword">if</span> (m != m2 &amp;&amp; m.getName().equals(m2.getName())) &#123;</span><br><span class="line">                override = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对重载方法进行处理，考虑下面的方法：</span></span><br><span class="line">        <span class="comment">//    1. void sayHello(Integer, String)</span></span><br><span class="line">        <span class="comment">//    2. void sayHello(Integer, Integer)</span></span><br><span class="line">        <span class="comment">// 方法名相同，参数列表长度也相同，因此不能仅通过这两项判断两个方法是否相等。</span></span><br><span class="line">        <span class="comment">// 需要进一步判断方法的参数类型</span></span><br><span class="line">        <span class="keyword">if</span> (override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; len; l++) &#123;</span><br><span class="line">                    <span class="comment">// &amp;&amp; $3[0].getName().equals(&quot;java.lang.Integer&quot;) </span></span><br><span class="line">                    <span class="comment">//    &amp;&amp; $3[1].getName().equals(&quot;java.lang.String&quot;)</span></span><br><span class="line">                    c3.append(<span class="string">&quot; &amp;&amp; &quot;</span>).append(<span class="string">&quot; $3[&quot;</span>).append(l).append(<span class="string">&quot;].getName().equals(\&quot;&quot;</span>)</span><br><span class="line">                            .append(m.getParameterTypes()[l].getName()).append(<span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 ) &#123;，完成方法判断语句，此时生成的方法可能如下（已格式化）：</span></span><br><span class="line">        <span class="comment">// if (&quot;sayHello&quot;.equals($2) </span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3.length == 2</span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3[0].getName().equals(&quot;java.lang.Integer&quot;) </span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3[1].getName().equals(&quot;java.lang.String&quot;)) &#123;</span></span><br><span class="line">        c3.append(<span class="string">&quot; ) &#123; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据返回值类型生成目标方法调用语句</span></span><br><span class="line">        <span class="keyword">if</span> (m.getReturnType() == Void.TYPE)</span><br><span class="line">            <span class="comment">// w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); return null;</span></span><br><span class="line">            c3.append(<span class="string">&quot; w.&quot;</span>).append(mn).append(<span class="string">&#x27;(&#x27;</span>).append(args(m.getParameterTypes(), <span class="string">&quot;$4&quot;</span>)).append(<span class="string">&quot;);&quot;</span>).append(<span class="string">&quot; return null;&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// return w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]);</span></span><br><span class="line">            c3.append(<span class="string">&quot; return ($w)w.&quot;</span>).append(mn).append(<span class="string">&#x27;(&#x27;</span>).append(args(m.getParameterTypes(), <span class="string">&quot;$4&quot;</span>)).append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 &#125;, 当前”方法判断条件“代码生成完毕，示例代码如下（已格式化）：</span></span><br><span class="line">        <span class="comment">// if (&quot;sayHello&quot;.equals($2) </span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3.length == 2</span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3[0].getName().equals(&quot;java.lang.Integer&quot;) </span></span><br><span class="line">        <span class="comment">//     &amp;&amp; $3[1].getName().equals(&quot;java.lang.String&quot;)) &#123;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     w.sayHello((java.lang.Integer)$4[0], (java.lang.String)$4[1]); </span></span><br><span class="line">        <span class="comment">//     return null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        c3.append(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加方法名到 mns 集合中</span></span><br><span class="line">        mns.add(mn);</span><br><span class="line">        <span class="comment">// 检测当前方法是否在 c 中被声明的</span></span><br><span class="line">        <span class="keyword">if</span> (m.getDeclaringClass() == c)</span><br><span class="line">            <span class="comment">// 若是，则将当前方法名添加到 dmns 中</span></span><br><span class="line">            dmns.add(mn);</span><br><span class="line">        ms.put(ReflectUtils.getDesc(m), m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasMethod) &#123;</span><br><span class="line">        <span class="comment">// 添加异常捕捉语句</span></span><br><span class="line">        c3.append(<span class="string">&quot; &#125; catch(Throwable e) &#123; &quot;</span>);</span><br><span class="line">        c3.append(<span class="string">&quot;     throw new java.lang.reflect.InvocationTargetException(e); &quot;</span>);</span><br><span class="line">        c3.append(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 NoSuchMethodException 异常抛出代码</span></span><br><span class="line">    c3.append(<span class="string">&quot; throw new &quot;</span> + NoSuchMethodException.class.getName() + <span class="string">&quot;(\&quot;Not found method \\\&quot;\&quot;+$2+\&quot;\\\&quot; in class &quot;</span> + c.getName() + <span class="string">&quot;.\&quot;); &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------✨ 分割线3 ✨-------------------------------------</span></span><br><span class="line"></span><br><span class="line">    Matcher matcher;</span><br><span class="line">    <span class="comment">// 处理 get/set 方法</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Method&gt; entry : ms.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">md</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> (Method) entry.getValue();</span><br><span class="line">        <span class="comment">// 匹配以 get 开头的方法</span></span><br><span class="line">        <span class="keyword">if</span> ((matcher = ReflectUtils.GETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) &#123;</span><br><span class="line">            <span class="comment">// 获取属性名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pn</span> <span class="operator">=</span> propertyName(matcher.group(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 生成属性判断以及返回语句，示例如下：</span></span><br><span class="line">            <span class="comment">// if( $2.equals(&quot;name&quot;) ) &#123; return ($w).w.getName(); &#125;</span></span><br><span class="line">            c2.append(<span class="string">&quot; if( $2.equals(\&quot;&quot;</span>).append(pn).append(<span class="string">&quot;\&quot;) )&#123; return ($w)w.&quot;</span>).append(method.getName()).append(<span class="string">&quot;(); &#125;&quot;</span>);</span><br><span class="line">            pts.put(pn, method.getReturnType());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配以 is/has/can 开头的方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((matcher = ReflectUtils.IS_HAS_CAN_METHOD_DESC_PATTERN.matcher(md)).matches()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pn</span> <span class="operator">=</span> propertyName(matcher.group(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 生成属性判断以及返回语句，示例如下：</span></span><br><span class="line">            <span class="comment">// if( $2.equals(&quot;dream&quot;) ) &#123; return ($w).w.hasDream(); &#125;</span></span><br><span class="line">            c2.append(<span class="string">&quot; if( $2.equals(\&quot;&quot;</span>).append(pn).append(<span class="string">&quot;\&quot;) )&#123; return ($w)w.&quot;</span>).append(method.getName()).append(<span class="string">&quot;(); &#125;&quot;</span>);</span><br><span class="line">            pts.put(pn, method.getReturnType());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配以 set 开头的方法</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((matcher = ReflectUtils.SETTER_METHOD_DESC_PATTERN.matcher(md)).matches()) &#123;</span><br><span class="line">            Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">pn</span> <span class="operator">=</span> propertyName(matcher.group(<span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 生成属性判断以及 setter 调用语句，示例如下：</span></span><br><span class="line">            <span class="comment">// if( $2.equals(&quot;name&quot;) ) &#123; w.setName((java.lang.String)$3); return; &#125;</span></span><br><span class="line">            c1.append(<span class="string">&quot; if( $2.equals(\&quot;&quot;</span>).append(pn).append(<span class="string">&quot;\&quot;) )&#123; w.&quot;</span>).append(method.getName()).append(<span class="string">&quot;(&quot;</span>).append(arg(pt, <span class="string">&quot;$3&quot;</span>)).append(<span class="string">&quot;); return; &#125;&quot;</span>);</span><br><span class="line">            pts.put(pn, pt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 NoSuchPropertyException 异常抛出代码</span></span><br><span class="line">    c1.append(<span class="string">&quot; throw new &quot;</span> + NoSuchPropertyException.class.getName() + <span class="string">&quot;(\&quot;Not found property \\\&quot;\&quot;+$2+\&quot;\\\&quot; filed or setter method in class &quot;</span> + c.getName() + <span class="string">&quot;.\&quot;); &#125;&quot;</span>);</span><br><span class="line">    c2.append(<span class="string">&quot; throw new &quot;</span> + NoSuchPropertyException.class.getName() + <span class="string">&quot;(\&quot;Not found property \\\&quot;\&quot;+$2+\&quot;\\\&quot; filed or setter method in class &quot;</span> + c.getName() + <span class="string">&quot;.\&quot;); &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------✨ 分割线4 ✨-------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> WRAPPER_CLASS_COUNTER.getAndIncrement();</span><br><span class="line">    <span class="comment">// 创建类生成器</span></span><br><span class="line">    <span class="type">ClassGenerator</span> <span class="variable">cc</span> <span class="operator">=</span> ClassGenerator.newInstance(cl);</span><br><span class="line">    <span class="comment">// 设置类名及超类</span></span><br><span class="line">    cc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + <span class="string">&quot;$sw&quot;</span>) + id);</span><br><span class="line">    cc.setSuperClass(Wrapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加默认构造方法</span></span><br><span class="line">    cc.addDefaultConstructor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加字段</span></span><br><span class="line">    cc.addField(<span class="string">&quot;public static String[] pns;&quot;</span>);</span><br><span class="line">    cc.addField(<span class="string">&quot;public static &quot;</span> + Map.class.getName() + <span class="string">&quot; pts;&quot;</span>);</span><br><span class="line">    cc.addField(<span class="string">&quot;public static String[] mns;&quot;</span>);</span><br><span class="line">    cc.addField(<span class="string">&quot;public static String[] dmns;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = ms.size(); i &lt; len; i++)</span><br><span class="line">        cc.addField(<span class="string">&quot;public static Class[] mts&quot;</span> + i + <span class="string">&quot;;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加方法代码</span></span><br><span class="line">    cc.addMethod(<span class="string">&quot;public String[] getPropertyNames()&#123; return pns; &#125;&quot;</span>);</span><br><span class="line">    cc.addMethod(<span class="string">&quot;public boolean hasProperty(String n)&#123; return pts.containsKey($1); &#125;&quot;</span>);</span><br><span class="line">    cc.addMethod(<span class="string">&quot;public Class getPropertyType(String n)&#123; return (Class)pts.get($1); &#125;&quot;</span>);</span><br><span class="line">    cc.addMethod(<span class="string">&quot;public String[] getMethodNames()&#123; return mns; &#125;&quot;</span>);</span><br><span class="line">    cc.addMethod(<span class="string">&quot;public String[] getDeclaredMethodNames()&#123; return dmns; &#125;&quot;</span>);</span><br><span class="line">    cc.addMethod(c1.toString());</span><br><span class="line">    cc.addMethod(c2.toString());</span><br><span class="line">    cc.addMethod(c3.toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 生成类</span></span><br><span class="line">        Class&lt;?&gt; wc = cc.toClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字段值</span></span><br><span class="line">        wc.getField(<span class="string">&quot;pts&quot;</span>).set(<span class="literal">null</span>, pts);</span><br><span class="line">        wc.getField(<span class="string">&quot;pns&quot;</span>).set(<span class="literal">null</span>, pts.keySet().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        wc.getField(<span class="string">&quot;mns&quot;</span>).set(<span class="literal">null</span>, mns.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        wc.getField(<span class="string">&quot;dmns&quot;</span>).set(<span class="literal">null</span>, dmns.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        <span class="type">int</span> <span class="variable">ix</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method m : ms.values())</span><br><span class="line">            wc.getField(<span class="string">&quot;mts&quot;</span> + ix++).set(<span class="literal">null</span>, m.getParameterTypes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Wrapper 实例</span></span><br><span class="line">        <span class="keyword">return</span> (Wrapper) wc.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        cc.release();</span><br><span class="line">        ms.clear();</span><br><span class="line">        mns.clear();</span><br><span class="line">        dmns.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码很长，大家耐心看一下。我在上面代码中做了大量的注释，并按功能对代码进行了分块，以帮助大家理解代码逻辑。下面对这段代码进行讲解。首先我们把目光移到分割线1之上的代码，这段代码主要用于进行一些初始化操作。比如创建 c1、c2、c3 以及 pts、ms、mns 等变量，以及向 c1、c2、c3 中添加方法定义和类型类型转换代码。接下来是分割线1到分割线2之间的代码，这段代码用于为 public 级别的字段生成条件判断取值与赋值代码。这段代码不是很难看懂，就不多说了。继续向下看，分割线2和分隔线3之间的代码用于为定义在当前类中的方法生成判断语句，和方法调用语句。因为需要对方法重载进行校验，因此到这这段代码看起来有点复杂。不过耐心开一下，也不是很难理解。接下来是分割线3和分隔线4之间的代码，这段代码用于处理 getter、setter 以及以 is&#x2F;has&#x2F;can 开头的方法。处理方式是通过正则表达式获取方法类型（get&#x2F;set&#x2F;is&#x2F;…），以及属性名。之后为属性名生成判断语句，然后为方法生成调用语句。最后我们再来看一下分隔线4以下的代码，这段代码通过 ClassGenerator 为刚刚生成的代码构建 Class 类，并通过反射创建对象。ClassGenerator 是 Dubbo 自己封装的，该类的核心是 toClass() 的重载方法 toClass(ClassLoader, ProtectionDomain)，该方法通过 javassist 构建 Class。这里就不分析 toClass 方法了，大家请自行分析。</p><p>阅读 Wrapper 类代码需要对 javassist 框架有所了解。关于 javassist，大家如果不熟悉，请自行查阅资料，本节不打算介绍 javassist 相关内容。</p><p>好了，关于 Wrapper 类生成过程就分析到这。如果大家看的不是很明白，可以单独为 Wrapper 创建单元测试，然后单步调试。并将生成的代码拷贝出来，格式化后再进行观察和理解。好了，本节先到这。</p><h3 id="2-2-2-导出服务到本地"><a href="#2-2-2-导出服务到本地" class="headerlink" title="2.2.2 导出服务到本地"></a>2.2.2 导出服务到本地</h3><p>本节我们来看一下服务导出相关的代码，按照代码执行顺序，本节先来分析导出服务到本地的过程。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exportLocal</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 URL 的协议头等于 injvm，说明已经导出到本地了，无需再次导出</span></span><br><span class="line">    <span class="keyword">if</span> (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">local</span> <span class="operator">=</span> URL.valueOf(url.toFullString())</span><br><span class="line">            .setProtocol(Constants.LOCAL_PROTOCOL)    <span class="comment">// 设置协议头为 injvm</span></span><br><span class="line">            .setHost(LOCALHOST)</span><br><span class="line">            .setPort(<span class="number">0</span>);</span><br><span class="line">        ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref));</span><br><span class="line">        <span class="comment">// 创建 Invoker，并导出服务，这里的 protocol 会在运行时调用 InjvmProtocol 的 export 方法</span></span><br><span class="line">        Exporter&lt;?&gt; exporter = protocol.export(</span><br><span class="line">            proxyFactory.getInvoker(ref, (Class) interfaceClass, local));</span><br><span class="line">        exporters.add(exporter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exportLocal 方法比较简单，首先根据 URL 协议头决定是否导出服务。若需导出，则创建一个新的 URL 并将协议头、主机名以及端口设置成新的值。然后创建 Invoker，并调用 InjvmProtocol 的 export 方法导出服务。下面我们来看一下 InjvmProtocol 的 export 方法都做了哪些事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Exporter&lt;T&gt; <span class="title function_">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="comment">// 创建 InjvmExporter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InjvmExporter</span>&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，InjvmProtocol 的 export 方法仅创建了一个 InjvmExporter，无其他逻辑。到此导出服务到本地就分析完了，接下来，我们继续分析导出服务到远程的过程。</p><h3 id="2-2-3-导出服务到远程"><a href="#2-2-3-导出服务到远程" class="headerlink" title="2.2.3 导出服务到远程"></a>2.2.3 导出服务到远程</h3><p>与导出服务到本地相比，导出服务到远程的过程要复杂不少，其包含了服务导出与服务注册两个过程。这两个过程涉及到了大量的调用，因此比较复杂。不过不管再难，我们都要看一下，万一看懂了呢。按照代码执行顺序，本节先来分析服务导出逻辑，服务注册逻辑将在下一节进行分析。下面开始分析，我们把目光移动到 RegistryProtocol 的 export 方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Exporter&lt;T&gt; <span class="title function_">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="comment">// 导出服务</span></span><br><span class="line">    <span class="keyword">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取注册中心 URL，以 zookeeper 注册中心为例，得到的示例 URL 如下：</span></span><br><span class="line">    <span class="comment">// zookeeper://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.2&amp;export=dubbo%3A%2F%2F172.17.48.52%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">registryUrl</span> <span class="operator">=</span> getRegistryUrl(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 URL 加载 Registry 实现类，比如 ZookeeperRegistry</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> getRegistry(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取已注册的服务提供者 URL，比如：</span></span><br><span class="line">    <span class="comment">// dubbo://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">URL</span> <span class="variable">registeredProviderUrl</span> <span class="operator">=</span> getRegisteredProviderUrl(originInvoker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 register 参数</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">register</span> <span class="operator">=</span> registeredProviderUrl.getParameter(<span class="string">&quot;register&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向服务提供者与消费者注册表中注册服务提供者</span></span><br><span class="line">    ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 register 的值决定是否注册服务</span></span><br><span class="line">    <span class="keyword">if</span> (register) &#123;</span><br><span class="line">        <span class="comment">// 向注册中心注册服务</span></span><br><span class="line">        register(registryUrl, registeredProviderUrl);</span><br><span class="line">        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取订阅 URL，比如：</span></span><br><span class="line">    <span class="comment">// provider://172.17.48.52:20880/com.alibaba.dubbo.demo.DemoService?category=configurators&amp;check=false&amp;anyhost=true&amp;application=demo-provider&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.alibaba.dubbo.demo.DemoService&amp;methods=sayHello</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">URL</span> <span class="variable">overrideSubscribeUrl</span> <span class="operator">=</span> getSubscribedOverrideUrl(registeredProviderUrl);</span><br><span class="line">    <span class="comment">// 创建监听器</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">OverrideListener</span> <span class="variable">overrideSubscribeListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverrideListener</span>(overrideSubscribeUrl, originInvoker);</span><br><span class="line">    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">// 向注册中心进行订阅 override 数据</span></span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">// 创建并返回 DestroyableExporter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DestroyableExporter</span>&lt;T&gt;(exporter, originInvoker, overrideSubscribeUrl, registeredProviderUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码看起来比较复杂，主要做如下一些操作：</p><ol><li>调用 doLocalExport 导出服务</li><li>向注册中心注册服务</li><li>向注册中心进行订阅 override 数据</li><li>创建并返回 DestroyableExporter</li></ol><p>在以上操作中，除了创建并返回 DestroyableExporter 没啥难度外，其他几步操作都不是很简单。这其中，导出服务和注册服务是本章要重点分析的逻辑。 订阅 override 数据这个是非重点内容，后面会简单介绍一下。下面开始本节的分析，先来分析 doLocalExport 方法的逻辑，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; ExporterChangeableWrapper&lt;T&gt; <span class="title function_">doLocalExport</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> getCacheKey(originInvoker);</span><br><span class="line">    <span class="comment">// 访问缓存</span></span><br><span class="line">    ExporterChangeableWrapper&lt;T&gt; exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">    <span class="keyword">if</span> (exporter == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (bounds) &#123;</span><br><span class="line">            exporter = (ExporterChangeableWrapper&lt;T&gt;) bounds.get(key);</span><br><span class="line">            <span class="keyword">if</span> (exporter == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建 Invoker 为委托类对象</span></span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;?&gt; invokerDelegete = <span class="keyword">new</span> <span class="title class_">InvokerDelegete</span>&lt;T&gt;(originInvoker, getProviderUrl(originInvoker));</span><br><span class="line">                <span class="comment">// 调用 protocol 的 export 方法导出服务</span></span><br><span class="line">                exporter = <span class="keyword">new</span> <span class="title class_">ExporterChangeableWrapper</span>&lt;T&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegete), originInvoker);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 写缓存</span></span><br><span class="line">                bounds.put(key, exporter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是典型的双重检查，这个大家应该都知道。接下来，我们把重点放在 Protocol 的 export 方法上。假设运行时协议为 dubbo，此处的 protocol 会在运行时加载 DubboProtocol，并调用 DubboProtocol 的 export 方法。我们目光转移到 DubboProtocol 的 export 方法上，相关分析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Exporter&lt;T&gt; <span class="title function_">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> invoker.getUrl();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取服务标识，理解成服务坐标也行。由服务组名，服务名，服务版本号以及端口组成。比如：</span></span><br><span class="line">    <span class="comment">// demoGroup/com.alibaba.dubbo.demo.DemoService:1.0.1:20880</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> serviceKey(url);</span><br><span class="line">    <span class="comment">// 创建 DubboExporter</span></span><br><span class="line">    DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> <span class="title class_">DubboExporter</span>&lt;T&gt;(invoker, key, exporterMap);</span><br><span class="line">    <span class="comment">// 将 &lt;key, exporter&gt; 键值对放入缓存中</span></span><br><span class="line">    exporterMap.put(key, exporter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下代码应该和本地存根有关，代码不难看懂，但具体用途暂时不清楚，先忽略</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isStubSupportEvent</span> <span class="operator">=</span> url.getParameter(Constants.STUB_EVENT_KEY, Constants.DEFAULT_STUB_EVENT);</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isCallbackservice</span> <span class="operator">=</span> url.getParameter(Constants.IS_CALLBACK_SERVICE, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stubServiceMethods</span> <span class="operator">=</span> url.getParameter(Constants.STUB_EVENT_METHODS_KEY);</span><br><span class="line">        <span class="keyword">if</span> (stubServiceMethods == <span class="literal">null</span> || stubServiceMethods.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 省略日志打印代码</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动服务器</span></span><br><span class="line">    openServer(url);</span><br><span class="line">    <span class="comment">// 优化序列化</span></span><br><span class="line">    optimizeSerialization(url);</span><br><span class="line">    <span class="keyword">return</span> exporter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们重点关注 DubboExporter 的创建以及 openServer 方法，其他逻辑看不懂也没关系，不影响理解服务导出过程。另外，DubboExporter 的代码比较简单，就不分析了。下面分析 openServer 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">openServer</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 host:port，并将其作为服务器实例的 key，用于标识当前的服务器实例</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> url.getAddress();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isServer</span> <span class="operator">=</span> url.getParameter(Constants.IS_SERVER_KEY, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">        <span class="comment">// 访问缓存</span></span><br><span class="line">        <span class="type">ExchangeServer</span> <span class="variable">server</span> <span class="operator">=</span> serverMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建服务器实例</span></span><br><span class="line">            serverMap.put(key, createServer(url));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 服务器已创建，则根据 url 中的配置重置服务器</span></span><br><span class="line">            server.reset(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，在同一台机器上（单网卡），同一个端口上仅允许启动一个服务器实例。若某个端口上已有服务器实例，此时则调用 reset 方法重置服务器的一些配置。考虑到篇幅问题，关于服务器实例重置的代码就不分析了。接下来分析服务器实例的创建过程。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ExchangeServer <span class="title function_">createServer</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CHANNEL_READONLYEVENT_SENT_KEY,</span><br><span class="line">    <span class="comment">// 添加心跳检测配置到 url 中</span></span><br><span class="line">    url = url.addParameterIfAbsent(Constants.HEARTBEAT_KEY, String.valueOf(Constants.DEFAULT_HEARTBEAT));</span><br><span class="line">    <span class="comment">// 获取 server 参数，默认为 netty</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> url.getParameter(Constants.SERVER_KEY, Constants.DEFAULT_REMOTING_SERVER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 SPI 检测是否存在 server 参数所代表的 Transporter 拓展，不存在则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter.class).hasExtension(str))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Unsupported server type: &quot;</span> + str + <span class="string">&quot;, url: &quot;</span> + url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加编码解码器参数</span></span><br><span class="line">    url = url.addParameter(Constants.CODEC_KEY, DubboCodec.NAME);</span><br><span class="line">    ExchangeServer server;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ExchangeServer</span></span><br><span class="line">        server = Exchangers.bind(url, requestHandler);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Fail to start server...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 client 参数，可指定 netty，mina</span></span><br><span class="line">    str = url.getParameter(Constants.CLIENT_KEY);</span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取所有的 Transporter 实现类名称集合，比如 supportedTypes = [netty, mina]</span></span><br><span class="line">        Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions();</span><br><span class="line">        <span class="comment">// 检测当前 Dubbo 所支持的 Transporter 实现类名称列表中，</span></span><br><span class="line">        <span class="comment">// 是否包含 client 所表示的 Transporter，若不包含，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Unsupported client type...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，createServer 包含三个核心的操作。第一是检测是否存在 server 参数所代表的 Transporter 拓展，不存在则抛出异常。第二是创建服务器实例。第三是检测是否支持 client 参数所表示的 Transporter 拓展，不存在也是抛出异常。两次检测操作所对应的代码比较直白了，无需多说。但创建服务器的操作目前还不是很清晰，我们继续往下看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeServer <span class="title function_">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取 Exchanger，默认为 HeaderExchanger。</span></span><br><span class="line">    <span class="comment">// 紧接着调用 HeaderExchanger 的 bind 方法创建 ExchangeServer 实例</span></span><br><span class="line">    <span class="keyword">return</span> getExchanger(url).bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码比较简单，就不多说了。下面看一下 HeaderExchanger 的 bind 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ExchangeServer <span class="title function_">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="comment">// 创建 HeaderExchangeServer 实例，该方法包含了多步操作，本别如下：</span></span><br><span class="line">    <span class="comment">//   1. new HeaderExchangeHandler(handler)</span></span><br><span class="line">    <span class="comment">//     2. new DecodeHandler(new HeaderExchangeHandler(handler))</span></span><br><span class="line">    <span class="comment">//   3. Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler)))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeaderExchangeServer</span>(Transporters.bind(url, <span class="keyword">new</span> <span class="title class_">DecodeHandler</span>(<span class="keyword">new</span> <span class="title class_">HeaderExchangeHandler</span>(handler))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeaderExchanger 的 bind 方法包含的逻辑比较多，但目前我们仅需关心 Transporters 的 bind 方法逻辑即可。该方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title function_">bind</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handlers == <span class="literal">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handlers == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ChannelHandler handler;</span><br><span class="line">    <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">        handler = handlers[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 handlers 元素数量大于1，则创建 ChannelHandler 分发器</span></span><br><span class="line">        handler = <span class="keyword">new</span> <span class="title class_">ChannelHandlerDispatcher</span>(handlers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取自适应 Transporter 实例，并调用实例方法</span></span><br><span class="line">    <span class="keyword">return</span> getTransporter().bind(url, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，getTransporter() 方法获取的 Transporter 是在运行时动态创建的，类名为 TransporterAdaptive，也就是自适应拓展类。我在<a href="%5Bhttp://www.tianxiaobo.com/2018/10/13/Dubbo-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%93%E5%B1%95%E5%8E%9F%E7%90%86/%5D(http://www.tianxiaobo.com/2018/10/13/Dubbo-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%87%AA%E9%80%82%E5%BA%94%E6%8B%93%E5%B1%95%E5%8E%9F%E7%90%86/)">上一篇文章</a>中详细分析了自适应拓展类的生成过程，对自适应拓展类不了解的同学可以参考我之前的文章，这里不再赘述。TransporterAdaptive 会在运行时根据传入的 URL 参数决定加载什么类型的 Transporter，默认为 NettyTransporter。下面我们继续跟下去，这次分析的是 NettyTransporter 的 bind 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Server <span class="title function_">bind</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">    <span class="comment">// 创建 NettyServer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NettyServer</span>(url, listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仅有一句创建 NettyServer 的代码，没啥好讲的，我们继续向下看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> <span class="keyword">extends</span> <span class="title class_">AbstractServer</span> <span class="keyword">implements</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="built_in">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractServer</span> <span class="keyword">extends</span> <span class="title class_">AbstractEndpoint</span> <span class="keyword">implements</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="comment">// 调用父类构造方法，这里就不用跟进去了，没什么复杂逻辑</span></span><br><span class="line">        <span class="built_in">super</span>(url, handler);</span><br><span class="line">        localAddress = getUrl().toInetSocketAddress();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 ip 和端口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bindIp</span> <span class="operator">=</span> getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost());</span><br><span class="line">        <span class="type">int</span> <span class="variable">bindPort</span> <span class="operator">=</span> getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort());</span><br><span class="line">        <span class="keyword">if</span> (url.getParameter(Constants.ANYHOST_KEY, <span class="literal">false</span>) || NetUtils.isInvalidLocalHost(bindIp)) &#123;</span><br><span class="line">            <span class="comment">// 设置 ip 为 0.0.0.0</span></span><br><span class="line">            bindIp = NetUtils.ANYHOST;</span><br><span class="line">        &#125;</span><br><span class="line">        bindAddress = <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(bindIp, bindPort);</span><br><span class="line">        <span class="comment">// 获取最大可接受连接数</span></span><br><span class="line">        <span class="built_in">this</span>.accepts = url.getParameter(Constants.ACCEPTS_KEY, Constants.DEFAULT_ACCEPTS);</span><br><span class="line">        <span class="built_in">this</span>.idleTimeout = url.getParameter(Constants.IDLE_TIMEOUT_KEY, Constants.DEFAULT_IDLE_TIMEOUT);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用模板方法 doOpen 启动服务器</span></span><br><span class="line">            doOpen();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemotingException</span>(<span class="string">&quot;Failed to bind &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">DataStore</span> <span class="variable">dataStore</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(DataStore.class).getDefaultExtension();</span><br><span class="line">        executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doClose</span><span class="params">()</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面多数代码为赋值代码，不需要多讲。我们重点关注 doOpen 抽象方法，该方法需要子类实现。下面回到 NettyServer 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    NettyHelper.setNettyLoggerFactory();</span><br><span class="line">    <span class="comment">// 创建 boss 和 worker 线程池</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">boss</span> <span class="operator">=</span> Executors.newCachedThreadPool(<span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;NettyServerBoss&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">worker</span> <span class="operator">=</span> Executors.newCachedThreadPool(<span class="keyword">new</span> <span class="title class_">NamedThreadFactory</span>(<span class="string">&quot;NettyServerWorker&quot;</span>, <span class="literal">true</span>));</span><br><span class="line">    <span class="type">ChannelFactory</span> <span class="variable">channelFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioServerSocketChannelFactory</span>(boss, worker, getUrl().getPositiveParameter(Constants.IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ServerBootstrap</span></span><br><span class="line">    bootstrap = <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>(channelFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">NettyHandler</span> <span class="variable">nettyHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyHandler</span>(getUrl(), <span class="built_in">this</span>);</span><br><span class="line">    channels = nettyHandler.getChannels();</span><br><span class="line">    bootstrap.setOption(<span class="string">&quot;child.tcpNoDelay&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 设置 PipelineFactory</span></span><br><span class="line">    bootstrap.setPipelineFactory(<span class="keyword">new</span> <span class="title class_">ChannelPipelineFactory</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ChannelPipeline <span class="title function_">getPipeline</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">NettyCodecAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NettyCodecAdapter</span>(getCodec(), getUrl(), NettyServer.<span class="built_in">this</span>);</span><br><span class="line">            <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> Channels.pipeline();</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, adapter.getDecoder());</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, adapter.getEncoder());</span><br><span class="line">            pipeline.addLast(<span class="string">&quot;handler&quot;</span>, nettyHandler);</span><br><span class="line">            <span class="keyword">return</span> pipeline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绑定到指定的 ip 和端口上</span></span><br><span class="line">    channel = bootstrap.bind(getBindAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 NettyServer 创建的过程，dubbo 默认使用的 NettyServer 是基于 netty 3.x 版本实现的，比较老了。因此 Dubbo 中另外提供了 netty 4.x 版本的 NettyServer，大家可在使用 Dubbo 的过程中按需进行配置。</p><p>到此，关于服务导出的过程就分析完了。整个过程比较复杂，大家在分析的过程中耐心一些。并且多写 Demo 进行进行调试，以便能够更好的理解代码逻辑。好了，本节内容先到这里，接下来分析服务导出的另一块逻辑 – 服务注册。</p><h3 id="2-2-4-服务注册"><a href="#2-2-4-服务注册" class="headerlink" title="2.2.4 服务注册"></a>2.2.4 服务注册</h3><p>本节我们来分析服务注册过程，服务注册操作对于 Dubbo 来说不是必需的，通过服务直连的方式就可以绕过注册中心。但通常我们不会这么做，直连方式不利于服务治理，仅推荐在测试环境测试服务时使用。对于 Dubbo 来说，注册中心虽不是必需，但却是必要的。因此，关于注册中心以及服务注册相关逻辑，我们也需要搞懂。</p><p>本节内容以 Zookeeper 注册中心作为分析目标，其他类型注册中心大家可自行分析。下面从服务注册的入口方法开始分析，我们把目光再次移到 RegistryProtocol 的 export 方法上。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Exporter&lt;T&gt; <span class="title function_">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// $&#123;导出服务&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">register</span> <span class="operator">=</span> registeredProviderUrl.getParameter(<span class="string">&quot;register&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (register) &#123;</span><br><span class="line">        <span class="comment">// 注册服务</span></span><br><span class="line">        register(registryUrl, registeredProviderUrl);</span><br><span class="line">        ProviderConsumerRegTable.getProviderWrapper(originInvoker).setReg(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">URL</span> <span class="variable">overrideSubscribeUrl</span> <span class="operator">=</span> getSubscribedOverrideUrl(registeredProviderUrl);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">OverrideListener</span> <span class="variable">overrideSubscribeListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverrideListener</span>(overrideSubscribeUrl, originInvoker);</span><br><span class="line">    overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">    <span class="comment">// 订阅 override 数据</span></span><br><span class="line">    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegistryProtocol 的 export 方法包含了服务导出，注册，以及数据订阅等逻辑。其中服务导出逻辑上一节已经分析过了，本节将分析服务注册逻辑，数据订阅逻辑将在下一节进行分析。下面开始本节的分析，相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(URL registryUrl, URL registedProviderUrl)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取 Registry</span></span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> registryFactory.getRegistry(registryUrl);</span><br><span class="line">    <span class="comment">// 注册服务</span></span><br><span class="line">    registry.register(registedProviderUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>register 方法包含两步操作，第一步是获取注册中心实例，第二步是向注册中心注册服务。接下来，我分两节内容对这两步操作进行分析。按照顺序，先来分析获取注册中心的逻辑。</p><h4 id="2-2-4-1-创建注册中心"><a href="#2-2-4-1-创建注册中心" class="headerlink" title="2.2.4.1 创建注册中心"></a>2.2.4.1 创建注册中心</h4><p>本节内容以 Zookeeper 注册中心为例进行分析。下面先来看一下 getRegistry 方法的源码，这个方法由 AbstractRegistryFactory 实现。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Registry <span class="title function_">getRegistry</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    url = url.setPath(RegistryService.class.getName())</span><br><span class="line">            .addParameter(Constants.INTERFACE_KEY, RegistryService.class.getName())</span><br><span class="line">            .removeParameters(Constants.EXPORT_KEY, Constants.REFER_KEY);</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> url.toServiceString();</span><br><span class="line">    LOCK.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 访问缓存</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> REGISTRIES.get(key);</span><br><span class="line">        <span class="keyword">if</span> (registry != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> registry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缓存未命中，创建 Registry 实例</span></span><br><span class="line">        registry = createRegistry(url);</span><br><span class="line">        <span class="keyword">if</span> (registry == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Can not create registry...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入缓存</span></span><br><span class="line">        REGISTRIES.put(key, registry);</span><br><span class="line">        <span class="keyword">return</span> registry;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        LOCK.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> Registry <span class="title function_">createRegistry</span><span class="params">(URL url)</span>;</span><br></pre></td></tr></table></figure><p>如上，getRegistry 方法先访问缓存，缓存未命中则调用 createRegistry 创建 Registry，然后写入缓存。这里的 createRegistry 是一个模板方法，由具体的子类实现。因此，下面我们到 ZookeeperRegistryFactory 中探究一番。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZookeeperRegistryFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractRegistryFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// zookeeperTransporter 由 SPI 在运行时注入，类型为 ZookeeperTransporter$Adaptive</span></span><br><span class="line">    <span class="keyword">private</span> ZookeeperTransporter zookeeperTransporter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZookeeperTransporter</span><span class="params">(ZookeeperTransporter zookeeperTransporter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zookeeperTransporter = zookeeperTransporter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Registry <span class="title function_">createRegistry</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 ZookeeperRegistry</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ZookeeperRegistry</span>(url, zookeeperTransporter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZookeeperRegistryFactory 的 createRegistry 方法仅包含一句代码，无需解释，继续跟下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ZookeeperRegistry</span><span class="params">(URL url, ZookeeperTransporter zookeeperTransporter)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(url);</span><br><span class="line">    <span class="keyword">if</span> (url.isAnyHost()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;registry address == null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取组名，默认为 dubbo</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);</span><br><span class="line">    <span class="keyword">if</span> (!group.startsWith(Constants.PATH_SEPARATOR)) &#123;</span><br><span class="line">        <span class="comment">// group = &quot;/&quot; + group</span></span><br><span class="line">        group = Constants.PATH_SEPARATOR + group;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.root = group;</span><br><span class="line">    <span class="comment">// 创建 Zookeeper 客户端，默认为 CuratorZookeeperTransporter</span></span><br><span class="line">    zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">    <span class="comment">// 添加状态监听器</span></span><br><span class="line">    zkClient.addStateListener(<span class="keyword">new</span> <span class="title class_">StateListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateChanged</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (state == RECONNECTED) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    recover();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码代码中，我们重点关注 ZookeeperTransporter 的 connect 方法调用，这个方法用于创建 Zookeeper 客户端。创建好 Zookeeper 客户端，意味着注册中心的创建过程就结束了。不过，显然我们不能就此停止，难道大家没有兴趣了解一下 Zookeeper 客户端的创建过程吗？如果有，那么继续向下看。没有的话，直接跳到下一节。那我接着分析了。</p><p>前面说过，这里的 zookeeperTransporter 类型为自适应拓展类，因此 connect 方法会在被调用时决定加载什么类型的 ZookeeperTransporter 拓展，默认为 CuratorZookeeperTransporter。下面我们到 CuratorZookeeperTransporter 中看一看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ZookeeperClient <span class="title function_">connect</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 CuratorZookeeperClient</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CuratorZookeeperClient</span>(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法仅用于创建 CuratorZookeeperClient 实例，没什么好说的，继续往下看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorZookeeperClient</span> <span class="keyword">extends</span> <span class="title class_">AbstractZookeeperClient</span>&lt;CuratorWatcher&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CuratorZookeeperClient</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 CuratorFramework 构造器</span></span><br><span class="line">            CuratorFrameworkFactory.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> CuratorFrameworkFactory.builder()</span><br><span class="line">                    .connectString(url.getBackupAddress())</span><br><span class="line">                    .retryPolicy(<span class="keyword">new</span> <span class="title class_">RetryNTimes</span>(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">                    .connectionTimeoutMs(<span class="number">5000</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">authority</span> <span class="operator">=</span> url.getAuthority();</span><br><span class="line">            <span class="keyword">if</span> (authority != <span class="literal">null</span> &amp;&amp; authority.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                builder = builder.authorization(<span class="string">&quot;digest&quot;</span>, authority.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 构建 CuratorFramework 实例</span></span><br><span class="line">            client = builder.build();</span><br><span class="line">            <span class="comment">// 添加监听器</span></span><br><span class="line">            client.getConnectionStateListenable().addListener(<span class="keyword">new</span> <span class="title class_">ConnectionStateListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState state)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (state == ConnectionState.LOST) &#123;</span><br><span class="line">                        CuratorZookeeperClient.<span class="built_in">this</span>.stateChanged(StateListener.DISCONNECTED);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == ConnectionState.CONNECTED) &#123;</span><br><span class="line">                        CuratorZookeeperClient.<span class="built_in">this</span>.stateChanged(StateListener.CONNECTED);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == ConnectionState.RECONNECTED) &#123;</span><br><span class="line">                        CuratorZookeeperClient.<span class="built_in">this</span>.stateChanged(StateListener.RECONNECTED);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动客户端</span></span><br><span class="line">            client.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CuratorZookeeperClient 构造方法主要用于创建和启动 CuratorFramework 实例。以上基本上都是 Curator 框架的代码，大家如果对 Curator 框架不是很了解，可以参考 Curator 官方文档，并写点 Demo 跑跑。</p><p>本节分析了 ZookeeperRegistry 实例的创建过程，整个过程并不是很复杂。大家在看完分析后，可以自行调试，以加深印象。现在注册中心实例创建好了，接下来要做的事情是向注册中心注册服务，我们继续往下看。</p><h4 id="2-2-4-2-节点创建"><a href="#2-2-4-2-节点创建" class="headerlink" title="2.2.4.2 节点创建"></a>2.2.4.2 节点创建</h4><p>以 Zookeeper 为例，所谓的服务注册，本质上是将服务配置数据写入到 Zookeeper 的某个路径的节点下。为了验证这个说法，下面我们将 Dobbo 官方提供提供的实例跑起来，然后通过 Zookeeper 可视化客户端 <a href="https://github.com/apache/zookeeper/tree/b79af153d0f98a4f3f3516910ed47234d7b3d74e/src/contrib/zooinspector">ZooInspector</a> 查看节点数据。</p><p>可以看到 com.alibaba.dubbo.demo.DemoService 这个服务对应的配置信息（存储在 URL 中）最终被注册到了 &#x2F;dubbo&#x2F;com.alibaba.dubbo.demo.DemoService&#x2F;providers&#x2F; 节点下。搞懂了服务注册的本质，那么接下来我们就可以去阅读服务注册的代码了。服务注册的接口为 register(URL)，这个方法定义在 FailbackRegistry 抽象类中。方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.register(url);</span><br><span class="line">    failedRegistered.remove(url);</span><br><span class="line">    failedUnregistered.remove(url);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 模板方法，由子类实现</span></span><br><span class="line">        doRegister(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> e;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 check 参数，若 check = true 将会直接抛出异常</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> getUrl().getParameter(Constants.CHECK_KEY, <span class="literal">true</span>)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class="literal">true</span>)</span><br><span class="line">                &amp;&amp; !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">skipFailback</span> <span class="operator">=</span> t <span class="keyword">instanceof</span> SkipFailbackWrapperException;</span><br><span class="line">        <span class="keyword">if</span> (check || skipFailback) &#123;</span><br><span class="line">            <span class="keyword">if</span> (skipFailback) &#123;</span><br><span class="line">                t = t.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Failed to register&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;Failed to register&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录注册失败的链接</span></span><br><span class="line">        failedRegistered.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">(URL url)</span>;</span><br></pre></td></tr></table></figure><p>如上，我们重点关注 doRegister 方法调用即可，其他的代码先忽略。doRegister 方法是一个模板方法，因此我们到 FailbackRegistry 子类 ZookeeperRegistry 中进行分析。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 Zookeeper 客户端创建节点，节点路径由 toUrlPath 方法生成，路径格式如下:</span></span><br><span class="line">        <span class="comment">//   /$&#123;group&#125;/$&#123;serviceInterface&#125;/providers/$&#123;url&#125;</span></span><br><span class="line">        <span class="comment">// 比如</span></span><br><span class="line">        <span class="comment">//   /dubbo/com.tianxiaobo.DemoService/providers/dubbo%3A%2F%2F127.0.0.1......</span></span><br><span class="line">        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class="literal">true</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(<span class="string">&quot;Failed to register...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，ZookeeperRegistry 在 doRegister 中调用了 Zookeeper 客户端创建服务节点。节点路径由 toUrlPath 方法生成，该方法逻辑不难理解，就不分析了。接下来分析 create 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(String path, <span class="type">boolean</span> ephemeral)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ephemeral) &#123;</span><br><span class="line">        <span class="comment">// 如果要创建的节点类型非临时节点，那么这里要检测节点是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (checkExists(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> path.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        create(path.substring(<span class="number">0</span>, i), <span class="literal">false</span>);    <span class="comment">// 递归创建上一级路径</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 ephemeral 的值创建临时或持久节点</span></span><br><span class="line">    <span class="keyword">if</span> (ephemeral) &#123;</span><br><span class="line">        createEphemeral(path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createPersistent(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法先是通过递归创建当前节点的上一级路径，然后再根据 ephemeral 的值决定创建临时还是持久节点。createEphemeral 和 createPersistent 这两个方法都比较简单，这里简单分析其中的一个。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createEphemeral</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 Curator 框架创建节点</span></span><br><span class="line">        client.create().withMode(CreateMode.EPHEMERAL).forPath(path);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NodeExistsException e) &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，到此关于服务注册的过程就分析完了。整个过程可简单总结为：先创建注册中心实例，之后再通过注册中心实例注册服务。本节先到这，接下来分析数据订阅过程。</p><h3 id="2-2-5-订阅-override-数据"><a href="#2-2-5-订阅-override-数据" class="headerlink" title="2.2.5 订阅 override 数据"></a>2.2.5 订阅 override 数据</h3><p>订阅 override 数据对应的代码我粗略看了一遍，这部分代码的主要目的是为了在服务配置发生变化时，重新导出服务。具体的使用场景应该当我们通过 Dubbo 管理后台修改了服务配置后，Dubbo 得到服务配置被修改的通知，然后重新导出服务。这个使用场景只是猜测，我并未进行过验证。如果大家有兴趣可以自行验证。</p><p>override 数据订阅相关代码也不是很少，考虑到文章篇幅问题以及重要性，遂决定不对此逻辑进行详细的分析。如果大家有兴趣，可自行分析。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>本篇文章详细分析了 Dubbo 服务导出过程，包括配置检测，URL 组装，Invoker 创建过程、导出服务以及注册服务等等。篇幅比较大，需要大家耐心阅读。对于这篇文章，我建议大家当成一个工具书使用。需要的时候跳到指定章节看一下，通读可能会有点累。由于文章篇幅比较大，因此可能会隐藏一些我没意识到的错误。若大家在阅读的过程中发现了错误，还请指出。如果能够不吝赐教，那就更好了，先在这里说声谢谢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三、Dubbo-源码分析-–-服务导出&quot;&gt;&lt;a href=&quot;#三、Dubbo-源码分析-–-服务导出&quot; class=&quot;headerlink&quot; title=&quot;三、Dubbo 源码分析 – 服务导出&quot;&gt;&lt;/a&gt;三、Dubbo 源码分析 – 服务导出&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – 自适应拓展原理</title>
    <link href="https://hexo.tryrun.top/posts/cf451fe.html"/>
    <id>https://hexo.tryrun.top/posts/cf451fe.html</id>
    <published>2020-09-20T14:29:54.000Z</published>
    <updated>2020-09-20T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、Dubbo-源码分析-–-自适应拓展原理"><a href="#二、Dubbo-源码分析-–-自适应拓展原理" class="headerlink" title="二、Dubbo 源码分析 – 自适应拓展原理"></a>二、Dubbo 源码分析 – 自适应拓展原理</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>我在上一篇文章中分析了 Dubbo 的 SPI 机制，Dubbo SPI 是 Dubbo 框架的核心。Dubbo 中的很多拓展都是通过 SPI 机制进行加载的，比如 Protocol、Cluster、LoadBalance 等。有时，有些拓展并非想在框架启动阶段被加载，而是希望在拓展方法被调用时，根据运行时参数进行加载。这听起来有些矛盾。拓展未被加载，那么拓展方法就无法被调用（静态方法除外）。拓展方法未被调用，就无法进行加载，这似乎是个死结。不过好在也有相应的解决办法，通过代理模式就可以解决这个问题，这里我们将具有代理功能的拓展称之为自适应拓展。Dubbo 并未直接通过代理模式实现自适应拓展，而是代理代理模式基础上，封装了一个更炫的实现方式。Dubbo 首先会为拓展接口生成具有代理功能的代码，然后通过 javassist 或 jdk 编译这段代码，得到 Class 类，最后在通过反射创建代理类。整个过程比较复杂、炫丽。如此复杂的过程最终的目的是为拓展生成代理对象，但实际上每个代理对象的代理逻辑基本一致，均是从 URL 中获取欲加载实现类的名称。因此，我们完全可以把代理逻辑抽出来，并通过动态代理的方式实现自适应拓展。这样做的好处显而易见，方便维护，也方便源码学习者学习和调试代码。本文将在随后实现一个动态代理版的自适应拓展，有兴趣的同学可以继续往下读。</p><p>接下来，我们通过一个示例演示自适应拓展类。这个示例取自 Dubbo 官方文档，我这里进行了一定的拓展。这是一个与汽车相关的例子，我们有一个车轮制造厂接口 WheelMaker：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WheelMaker</span> &#123;</span><br><span class="line">    Wheel <span class="title function_">makeWheel</span><span class="params">(URL url)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WheelMaker 接口的 Adaptive 实现类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdaptiveWheelMaker</span> <span class="keyword">implements</span> <span class="title class_">WheelMaker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Wheel <span class="title function_">makeWheel</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.从 URL 中获取 WheelMaker 名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">wheelMakerName</span> <span class="operator">=</span> url.getParameter(<span class="string">&quot;Wheel.maker&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;wheelMakerName == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.通过 SPI 加载具体的 WheelMaker</span></span><br><span class="line">        <span class="type">WheelMaker</span> <span class="variable">wheelMaker</span> <span class="operator">=</span> ExtensionLoader</span><br><span class="line">            .getExtensionLoader(WheelMaker.class).getExtension(wheelMakerName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.调用目标方法</span></span><br><span class="line">        <span class="keyword">return</span> wheelMaker.makeWheel(URL url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AdaptiveWheelMaker 是一个代理类，它主要做了三件事情：</p><ol><li>从 URL 中获取 WheelMaker 名称</li><li>通过 SPI 加载具体的 WheelMaker</li><li>调用目标方法</li></ol><p>接下来，我们来看看汽车制造厂 CarMaker 接口与其实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarMaker</span> &#123;</span><br><span class="line">    Car <span class="title function_">makeCar</span><span class="params">(URL url)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RaceCarMaker</span> <span class="keyword">implements</span> <span class="title class_">CarMaker</span> &#123;</span><br><span class="line">    WheelMaker wheelMaker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 setter 注入 AdaptiveWheelMaker</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">setWheelMaker</span><span class="params">(WheelMaker wheelMaker)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wheelMaker = wheelMaker;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">makeCar</span><span class="params">(URL url)</span> &#123;</span><br><span class="line">        <span class="type">Wheel</span> <span class="variable">wheel</span> <span class="operator">=</span> wheelMaker.makeWheel(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RaceCar</span>(wheel, ...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RaceCarMaker 持有一个 WheelMaker 类型从成员变量，在程序启动时，我们可以将 AdaptiveWheelMaker 通过 setter 方法注入到 RaceCarMaker 中。在运行时，假设有这样一个 URL 类型的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo://192.168.0.101:20880/XxxService?wheel.maker=MichelinWheelMaker</span><br></pre></td></tr></table></figure><p>RaceCarMaker 的 makeCar 方法将上面的 url 作为参数传给 AdaptiveWheelMaker 的 makeWheel 方法，makeWheel 方法从 url 中提取 wheel.maker 参数，得到 MichelinWheelMaker。之后再通过 SPI 加载名为 MichelinWheelMaker 的实现类，得到具体的 WheelMaker 实例。</p><p>上面这个示例展示了自适应拓展类的核心实现 – 在组件方法被调用时，通过代理的方式加载指定的实现类，并调用被代理的方法。</p><p>经过以上说明，大家应该搞懂了自适应拓展的原理。接下来，我们深入到源码中，探索自适应拓展生成的过程。</p><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h2><p>在对自适应拓展生成过程进行深入分析之前，我们先来看一下与自适应拓展息息相关的一个注解，即 Adaptive 注解。该注解的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Adaptive &#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可知，Adaptive 可注解在类或方法上。注解在类上时，Dubbo 不会为该类生成代理类。注解上方法（接口方法）上时，Dubbo 会为为该方法生成代理逻辑。Adaptive 注解在类上的情况很少，在 Dubbo 中，仅有两个类被 Adaptive 注解了，分别是 AdaptiveCompiler 和 AdaptiveExtensionFactory。此种情况表示拓展的加载逻辑由人工编码完成。更多时候，Adaptive 是注解在接口方法上的，表示拓展的加载逻辑需由框架自动生成。Adaptive 注解的地方不同，相应的处理逻辑也是不同的。注解在类上时，处理逻辑比较简单，本文就不分析了。注解在接口方法上时，处理逻辑较为复杂，本章将会重点分析此块逻辑。接下来，我们从 getAdaptiveExtension 方法进行分析。代码如下：</p><h3 id="2-1-获取自适应拓展"><a href="#2-1-获取自适应拓展" class="headerlink" title="2.1 获取自适应拓展"></a>2.1 获取自适应拓展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">getAdaptiveExtension</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取自适应拓展</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> cachedAdaptiveInstance.get();</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;    <span class="comment">// 缓存未命中</span></span><br><span class="line">        <span class="keyword">if</span> (createAdaptiveInstanceError == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (cachedAdaptiveInstance) &#123;</span><br><span class="line">                instance = cachedAdaptiveInstance.get();</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 创建自适应拓展</span></span><br><span class="line">                        instance = createAdaptiveExtension();</span><br><span class="line">                        <span class="comment">// 设置拓展到缓存中</span></span><br><span class="line">                        cachedAdaptiveInstance.set(instance);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        createAdaptiveInstanceError = t;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getAdaptiveExtension 方法首先会检查缓存，缓存未命中，则调用 createAdaptiveExtension 方法创建自适应拓展。下面，我们看一下 createAdaptiveExtension 方法的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">createAdaptiveExtension</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取自适应拓展类，并通过反射实例化</span></span><br><span class="line">        <span class="keyword">return</span> injectExtension((T) getAdaptiveExtensionClass().newInstance());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createAdaptiveExtension 方法代码比较少，但却包含了三个动作，分别如下：</p><ol><li>调用 getAdaptiveExtensionClass 方法获取自适应拓展 Class 对象</li><li>通过反射进行实例化</li><li>调用 injectExtension 方法向拓展实例中注入依赖</li></ol><p>前两个动作比较好理解，第三个动作不好理解，这里简单说明一下。injectExtension 方法通过 setter 方法向目标对象中注入依赖，可以看做是一个简单 IOC 的实现。前面说过，Dubbo 中有两种类型的自适应拓展，一种是手工编码的，一种是自动生成的。手工编码的 Adaptive 拓展中可能存在着一些依赖，而自动生成的 Adaptive 拓展则不会依赖其他类。这里调用 injectExtension 方法的目的是为手工编码的自适应拓展注入依赖，这一点需要大家注意一下。关于 injectExtension 方法，我在上一篇文章中已经分析过了，这里不再赘述。接下来，分析 getAdaptiveExtensionClass 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 通过 SPI 获取所有的拓展类</span></span><br><span class="line">    getExtensionClasses();</span><br><span class="line">    <span class="comment">// 检查缓存，若缓存不为空，则直接返回缓存</span></span><br><span class="line">    <span class="keyword">if</span> (cachedAdaptiveClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cachedAdaptiveClass;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建自适应拓展类</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">cachedAdaptiveClass</span> <span class="operator">=</span> createAdaptiveExtensionClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getAdaptiveExtensionClass 方法也包含了三个步骤，如下：</p><ol><li>调用 getExtensionClasses 获取所有的拓展类</li><li>检查缓存，若缓存不为空，则返回缓存</li><li>若缓存为空，则调用 createAdaptiveExtensionClass 创建自适应拓展类</li></ol><p>这三个步骤看起来平淡无奇，似乎没有多讲的必要。但是这些平淡无奇的代码中隐藏了一些细节，需要说明一下。首先从第一个步骤说起，getExtensionClasses 这个方法用于获取某个接口的所有实现类。比如该方法可以获取 Protocol 接口的 DubboProtocol、HttpProtocol、InjvmProtocol 等实现类。在获取实现类的过程中，如果某个某个实现类被 Adaptive 注解修饰了，那么该类就会被赋值给 cachedAdaptiveClass 变量。此时，上面步骤中的第二步条件成立（缓存不为空），直接返回 cachedAdaptiveClass 即可。如果所有的实现类均未被 Adaptive 注解修饰，那么执行第三步逻辑，创建自适应拓展类。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">    <span class="comment">// 构建自适应拓展代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> createAdaptiveExtensionClassCode();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> findClassLoader();</span><br><span class="line">    <span class="comment">// 获取编译器实现类</span></span><br><span class="line">    com.alibaba.dubbo.common.compiler.<span class="type">Compiler</span> <span class="variable">compiler</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">    <span class="comment">// 编译代码，生成 Class</span></span><br><span class="line">    <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createAdaptiveExtensionClass 方法用于生成自适应拓展类，该方法首先会生成自适应拓展类的源码，然后通过 Compiler 实例（Dubbo 默认使用 javassist 作为编译器）编译源码，得到代理类 Class 实例。接下来，我将重点分析代理类代码生成逻辑。至于代码编译的过程，并非本文范畴，这里就不分析了，大家有兴趣可以自己看看。下面，我们把目光聚焦在 createAdaptiveExtensionClassCode 方法上。</p><h3 id="2-2-自适应拓展类代码生成"><a href="#2-2-自适应拓展类代码生成" class="headerlink" title="2.2 自适应拓展类代码生成"></a>2.2 自适应拓展类代码生成</h3><p>createAdaptiveExtensionClassCode 方法代码略多，约有两百行代码。因此在本节中，我将会对该方法的代码进行拆分分析，以帮助大家更好的理解代码含义。</p><h4 id="2-2-1-Adaptive-注解检测"><a href="#2-2-1-Adaptive-注解检测" class="headerlink" title="2.2.1 Adaptive 注解检测"></a>2.2.1 Adaptive 注解检测</h4><p>在生成代理类源码之前，createAdaptiveExtensionClassCode 方法首先会通过反射检测接口方法是否包含 Adaptive 注解。对于要生成自适应拓展的接口，Dubbo 要求该接口至少有一个方法被 Adaptive 注解修饰。若不满足此条件，就会抛出运行时异常。相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取所有的方法</span></span><br><span class="line">Method[] methods = type.getMethods();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasAdaptiveAnnotation</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 遍历方法列表</span></span><br><span class="line"><span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">    <span class="comment">// 检测方法上是否有 Adaptive 注解</span></span><br><span class="line">    <span class="keyword">if</span> (m.isAnnotationPresent(Adaptive.class)) &#123;</span><br><span class="line">        hasAdaptiveAnnotation = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hasAdaptiveAnnotation)</span><br><span class="line">    <span class="comment">// 若所有的方法上均无 Adaptive 注解，则抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-2-生成类"><a href="#2-2-2-生成类" class="headerlink" title="2.2.2 生成类"></a>2.2.2 生成类</h4><p>通过 Adaptive 注解检测后，即可开始生成代码。代码生成的顺序与 Java 文件内容顺序一致，首先会生成 package 语句，然后生成 import 语句，紧接着生成类名等代码。整个逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 package 代码：package + type 所在包</span></span><br><span class="line">codeBuilder.append(<span class="string">&quot;package &quot;</span>).append(type.getPackage().getName()).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"><span class="comment">// 生成 import 代码：import + ExtensionLoader 全限定名</span></span><br><span class="line">codeBuilder.append(<span class="string">&quot;\nimport &quot;</span>).append(ExtensionLoader.class.getName()).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line"><span class="comment">// 生成类代码：public class + type简单名称 + $Adaptive + implements + type全限定名 + &#123;</span></span><br><span class="line">codeBuilder.append(<span class="string">&quot;\npublic class &quot;</span>)</span><br><span class="line">    .append(type.getSimpleName())</span><br><span class="line">    .append(<span class="string">&quot;$Adaptive&quot;</span>)</span><br><span class="line">    .append(<span class="string">&quot; implements &quot;</span>)</span><br><span class="line">    .append(type.getCanonicalName())</span><br><span class="line">    .append(<span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $&#123;生成方法&#125;</span></span><br><span class="line"></span><br><span class="line">codeBuilder.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里，我用 ${…} 占位符代表其他代码的生成逻辑，该部分逻辑我将在随后进行分析。上面代码不是很难理解，这里我直接通过一个例子展示该段代码所生成的内容。以 Dubbo 的 Protocol 接口为例，生成的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Protocol$Adaptive</span> <span class="keyword">implements</span> <span class="title class_">com</span>.alibaba.dubbo.rpc.Protocol &#123;</span><br><span class="line">    <span class="comment">// 省略方法代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-生成方法"><a href="#2-2-3-生成方法" class="headerlink" title="2.2.3 生成方法"></a>2.2.3 生成方法</h4><p>一个方法可以被 Adaptive 注解修饰，也可以不被修饰。这里将未被 Adaptive 注解修饰的方法称为“无 Adaptive 注解方法”，下面我们先来看看此种方法的代码生成逻辑是怎样的。</p><h5 id="2-2-3-1-无-Adaptive-注解方法代码生成"><a href="#2-2-3-1-无-Adaptive-注解方法代码生成" class="headerlink" title="2.2.3.1 无 Adaptive 注解方法代码生成"></a>2.2.3.1 无 Adaptive 注解方法代码生成</h5><p>对于接口方法，我们可以按照需求标注 Adaptive 注解。以 Protocol 接口为例，该接口的 destroy 和 getDefaultPort 未标注 Adaptive 注解，其他方法均标注了 Adaptive 注解。Dubbo 不会为没有标注 Adaptive 注解的方法生成代理逻辑，对于该种类型的方法，仅会生成一句抛出异常的代码。生成逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="comment">// 如果方法上无 Adaptive 注解，则生成 throw new UnsupportedOperationException(...) 代码</span></span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 生成规则：</span></span><br><span class="line">        <span class="comment">// throw new UnsupportedOperationException(</span></span><br><span class="line">        <span class="comment">//     &quot;method &quot; + 方法签名 + of interface + 全限定接口名 + is not adaptive method!”)</span></span><br><span class="line">        code.append(<span class="string">&quot;throw new UnsupportedOperationException(\&quot;method &quot;</span>)</span><br><span class="line">            .append(method.toString()).append(<span class="string">&quot; of interface &quot;</span>)</span><br><span class="line">            .append(type.getName()).append(<span class="string">&quot; is not adaptive method!\&quot;);&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 省略无关逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 Protocol 接口的 destroy 方法为例，上面代码生成的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(</span><br><span class="line">            <span class="string">&quot;method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-2-3-2-获取-URL-数据"><a href="#2-2-3-2-获取-URL-数据" class="headerlink" title="2.2.3.2 获取 URL 数据"></a>2.2.3.2 获取 URL 数据</h5><p>前面说过方法代理逻辑会从 URL 中提取目标拓展的名称，因此代码生成逻辑的一个重要的任务是从方法的参数列表获取其他参数中获取 URL 数据。举个例子说明一下，我们要为 Protocol 接口的 refer 和 export 方法生成代理逻辑。在运行时，通过反射得到的方法定义大致如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invoker <span class="title function_">refer</span><span class="params">(Class&lt;T&gt; arg0, URL arg1)</span> <span class="keyword">throws</span> RpcException;</span><br><span class="line">Exporter <span class="title function_">export</span><span class="params">(Invoker&lt;T&gt; arg0)</span> <span class="keyword">throws</span> RpcException;</span><br></pre></td></tr></table></figure><p>对于 refer 方法，通过遍历 refer 的参数列表即可获取 URL 数据，这个还比较简单。对于 export 方法，获取 URL 数据则要麻烦一些。export 参数列表中没有 URL 参数，因此需要从 Invoker 参数中获取 URL 数据。获取方式是调用 Invoker 中可返回 URL 的 getter 方法，比如 getUrl。如果 Invoker 中无相关 getter 方法，此时则会抛出异常。整个逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $&#123;无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">urlTypeIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历参数列表，确定 URL 参数位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pts[i].equals(URL.class)) &#123;</span><br><span class="line">                urlTypeIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (urlTypeIndex != -<span class="number">1</span>) &#123;    <span class="comment">// 参数列表中存在 URL 参数</span></span><br><span class="line">            <span class="comment">// 为 URL 类型参数生成判空代码，格式如下：</span></span><br><span class="line">            <span class="comment">// if (arg + urlTypeIndex == null) </span></span><br><span class="line">            <span class="comment">//     throw new IllegalArgumentException(&quot;url == null&quot;);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;url == null\&quot;);&quot;</span>,</span><br><span class="line">                                     urlTypeIndex);</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为 URL 类型参数生成赋值代码，即 URL url = arg1 或 arg2，或 argN</span></span><br><span class="line">            s = String.format(<span class="string">&quot;\n%s url = arg%d;&quot;</span>, URL.class.getName(), urlTypeIndex);</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 参数列表中不存在 URL 类型参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">attribMethod</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            LBL_PTS:</span><br><span class="line">            <span class="comment">// 遍历方法的参数类型列表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">                <span class="comment">// 获取某一类型参数的全部方法</span></span><br><span class="line">                Method[] ms = pts[i].getMethods();</span><br><span class="line">                <span class="comment">// 遍历方法列表，寻找可返回 URL 的 getter 方法</span></span><br><span class="line">                <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> m.getName();</span><br><span class="line">                    <span class="comment">// 1. 方法名以 get 开头，或方法名大于3个字符</span></span><br><span class="line">                    <span class="comment">// 2. 方法的访问权限为 public</span></span><br><span class="line">                    <span class="comment">// 3. 方法非静态类型</span></span><br><span class="line">                    <span class="comment">// 4. 方法参数数量为0</span></span><br><span class="line">                    <span class="comment">// 5. 方法返回值类型为 URL</span></span><br><span class="line">                    <span class="keyword">if</span> ((name.startsWith(<span class="string">&quot;get&quot;</span>) || name.length() &gt; <span class="number">3</span>)</span><br><span class="line">                        &amp;&amp; Modifier.isPublic(m.getModifiers())</span><br><span class="line">                        &amp;&amp; !Modifier.isStatic(m.getModifiers())</span><br><span class="line">                        &amp;&amp; m.getParameterTypes().length == <span class="number">0</span></span><br><span class="line">                        &amp;&amp; m.getReturnType() == URL.class) &#123;</span><br><span class="line">                        urlTypeIndex = i;</span><br><span class="line">                        attribMethod = name;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 结束 for (int i = 0; i &lt; pts.length; ++i) 循环</span></span><br><span class="line">                        <span class="keyword">break</span> LBL_PTS;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (attribMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果所有参数中均不包含可返回 URL 的 getter 方法，则抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为包含可返回 URL 的参数生成判空代码，格式如下：</span></span><br><span class="line">            <span class="comment">// if (arg + urlTypeIndex == null) </span></span><br><span class="line">            <span class="comment">//     throw new IllegalArgumentException(&quot;参数全限定名 + argument == null&quot;);</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;%s argument == null\&quot;);&quot;</span>,</span><br><span class="line">                                     urlTypeIndex, pts[urlTypeIndex].getName());</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为 getter 方法返回的 URL 生成判空代码，格式如下：</span></span><br><span class="line">            <span class="comment">// if (argN.getter方法名() == null) </span></span><br><span class="line">            <span class="comment">//     throw new IllegalArgumentException(参数全限定名 + argument getUrl() == null);</span></span><br><span class="line">            s = String.format(<span class="string">&quot;\nif (arg%d.%s() == null) throw new IllegalArgumentException(\&quot;%s argument %s() == null\&quot;);&quot;</span>,</span><br><span class="line">                              urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod);</span><br><span class="line">            code.append(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成赋值语句，格式如下：</span></span><br><span class="line">            <span class="comment">// URL全限定名 url = argN.getter方法名()，比如 </span></span><br><span class="line">            <span class="comment">// com.alibaba.dubbo.common.URL url = invoker.getUrl();</span></span><br><span class="line">            s = String.format(<span class="string">&quot;%s url = arg%d.%s();&quot;</span>, URL.class.getName(), urlTypeIndex, attribMethod);</span><br><span class="line">            code.append(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略无关代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码有点多，但并不是很难看懂。这段代码主要是为了获取 URL 数据，并为之生成判空和赋值代码。以 Protocol 的 refer 和 export 方法为例，上面代码会为它们生成如下内容（代码已格式化）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">refer:</span><br><span class="line"><span class="keyword">if</span> (arg1 == <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">com.alibaba.dubbo.common.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> arg1;</span><br><span class="line"></span><br><span class="line">export:</span><br><span class="line"><span class="keyword">if</span> (arg0 == <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;com.alibaba.dubbo.rpc.Invoker argument == null&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (arg0.getUrl() == <span class="literal">null</span>) </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;com.alibaba.dubbo.rpc.Invoker argument getUrl() == null&quot;</span>);</span><br><span class="line">com.alibaba.dubbo.common.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> arg0.getUrl();</span><br></pre></td></tr></table></figure><h5 id="2-2-3-3-获取-Adaptive-注解值"><a href="#2-2-3-3-获取-Adaptive-注解值" class="headerlink" title="2.2.3.3 获取 Adaptive 注解值"></a>2.2.3.3 获取 Adaptive 注解值</h5><p>Adaptive 注解值 value 类型为 String[]，可填写多个值，默认情况下为空数组。若 value 为非空数组，直接获取数组内容即可。若 value 为空数组，则需进行额外处理。处理的过程是将类名转换为字符数组，然后遍历字符数组，并将字符加入到 StringBuilder 中。若字符为大写字母，则向 StringBuilder 中添加点号，随后将字符变为小写存入 StringBuilder 中。比如 LoadBalance 经过处理后，得到 load.balance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $&#123;无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $&#123;获取 URL 数据&#125;</span></span><br><span class="line"></span><br><span class="line">        String[] value = adaptiveAnnotation.value();</span><br><span class="line">        <span class="comment">// value 为空数组</span></span><br><span class="line">        <span class="keyword">if</span> (value.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取类名，并将类名转换为字符数组</span></span><br><span class="line">            <span class="type">char</span>[] charArray = type.getSimpleName().toCharArray();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">            <span class="comment">// 遍历字节数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 检测当前字符是否为大写字母</span></span><br><span class="line">                <span class="keyword">if</span> (Character.isUpperCase(charArray[i])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 向 sb 中添加点号</span></span><br><span class="line">                        sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将字符变为小写，并添加到 sb 中</span></span><br><span class="line">                    sb.append(Character.toLowerCase(charArray[i]));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 添加字符到 sb 中</span></span><br><span class="line">                    sb.append(charArray[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            value = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;sb.toString()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略无关代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-4-检测-Invocation-参数"><a href="#2-2-3-4-检测-Invocation-参数" class="headerlink" title="2.2.3.4 检测 Invocation 参数"></a>2.2.3.4 检测 Invocation 参数</h5><p>此段逻辑是检测方法列表中是否存在 Invocation 类型的参数，若存在，则为其生成判空代码和其他一些代码。相应的逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();    <span class="comment">// 获取参数类型列表</span></span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $&#123;无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $&#123;获取 URL 数据&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;获取 Adaptive 注解值&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasInvocation</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 遍历参数类型列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">            <span class="comment">// 判断当前参数名称是否等于 com.alibaba.dubbo.rpc.Invocation</span></span><br><span class="line">            <span class="keyword">if</span> (pts[i].getName().equals(<span class="string">&quot;com.alibaba.dubbo.rpc.Invocation&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 为 Invocation 类型参数生成判空代码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;\nif (arg%d == null) throw new IllegalArgumentException(\&quot;invocation == null\&quot;);&quot;</span>, i);</span><br><span class="line">                code.append(s);</span><br><span class="line">                <span class="comment">// 生成 getMethodName 方法调用代码，格式为：</span></span><br><span class="line">                <span class="comment">//    String methodName = argN.getMethodName();</span></span><br><span class="line">                s = String.format(<span class="string">&quot;\nString methodName = arg%d.getMethodName();&quot;</span>, i);</span><br><span class="line">                code.append(s);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置 hasInvocation 为 true</span></span><br><span class="line">                hasInvocation = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-3-5-生成拓展名获取逻辑"><a href="#2-2-3-5-生成拓展名获取逻辑" class="headerlink" title="2.2.3.5 生成拓展名获取逻辑"></a>2.2.3.5 生成拓展名获取逻辑</h5><p>本段逻辑用于根据 SPI 和 Adaptive 注解值生成“拓展名获取逻辑”，同时生成逻辑也受 Invocation 类型参数影响，综合因素导致本段逻辑相对复杂。本段逻辑可以会生成但不限于下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> (url.getProtocol() == <span class="literal">null</span> ? <span class="string">&quot;dubbo&quot;</span> : url.getProtocol());</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> url.getMethodParameter(methodName, <span class="string">&quot;loadbalance&quot;</span>, <span class="string">&quot;random&quot;</span>);</span><br></pre></td></tr></table></figure><p>亦或是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br></pre></td></tr></table></figure><p>本段逻辑复杂指出在于条件分支比较多，大家在阅读源码时需要知道每个条件分支的意义是什么，否则不太容易看懂相关代码。好了，其他的就不多说了，开始分析本段逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $&#123;获取 URL 数据&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;获取 Adaptive 注解值&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;检测 Invocation 参数&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认拓展名，cachedDefaultName = SPI 注解值，比如 Protocol 接口上标注的 </span></span><br><span class="line">        <span class="comment">// SPI 注解值为 dubbo。默认情况下，SPI 注解值为空串，此时 cachedDefaultName = null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">defaultExtName</span> <span class="operator">=</span> cachedDefaultName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">getNameCode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 value，这里的 value 是 Adaptive 的注解值，2.2.3.3 节分析过 value 变量的获取过程。</span></span><br><span class="line">        <span class="comment">// 此处循环目的是生成从 URL 中获取拓展名的代码，生成的代码会赋值给 getNameCode 变量。注意这</span></span><br><span class="line">        <span class="comment">// 个循环的遍历顺序是由后向前遍历的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> value.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == value.length - <span class="number">1</span>) &#123;    <span class="comment">// 当 i 为最后一个元素的坐标时</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != defaultExtName) &#123;   <span class="comment">// 默认拓展名非空</span></span><br><span class="line">                    <span class="comment">// protocol 是 url 的一部分，可通过 getProtocol 方法获取，其他的则是从</span></span><br><span class="line">                    <span class="comment">// URL 参数中获取。所以这里要判断 value[i] 是否为 protocol</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                        <span class="comment">// hasInvocation 用于标识方法参数列表中是否有 Invocation 类型参数</span></span><br><span class="line">                        <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                            <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                            <span class="comment">//   url.getMethodParameter(methodName, value[i], defaultExtName)</span></span><br><span class="line">                            <span class="comment">// 以 LoadBalance 接口的 select 方法为例，最终生成的代码如下：</span></span><br><span class="line">                            <span class="comment">//   url.getMethodParameter(methodName, &quot;loadbalance&quot;, &quot;random&quot;)</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                            <span class="comment">//   url.getParameter(value[i], defaultExtName)</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                        <span class="comment">//   ( url.getProtocol() == null ? defaultExtName : url.getProtocol() )</span></span><br><span class="line">                        getNameCode = String.format(<span class="string">&quot;( url.getProtocol() == null ? \&quot;%s\&quot; : url.getProtocol() )&quot;</span>, defaultExtName);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 默认拓展名为空</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                        <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                            <span class="comment">// 生成代码格式同上</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                            <span class="comment">//   url.getParameter(value[i])</span></span><br><span class="line">                            getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;)&quot;</span>, value[i]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 生成从 url 中获取协议的代码，比如 &quot;dubbo&quot;</span></span><br><span class="line">                        getNameCode = <span class="string">&quot;url.getProtocol()&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i]))</span><br><span class="line">                    <span class="keyword">if</span> (hasInvocation)</span><br><span class="line">                        <span class="comment">// 生成代码格式同上</span></span><br><span class="line">                        getNameCode = String.format(<span class="string">&quot;url.getMethodParameter(methodName, \&quot;%s\&quot;, \&quot;%s\&quot;)&quot;</span>, value[i], defaultExtName);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                        <span class="comment">//   url.getParameter(value[i], getNameCode)</span></span><br><span class="line">                        <span class="comment">// 以 Transporter 接口的 connect 方法为例，最终生成的代码如下：</span></span><br><span class="line">                        <span class="comment">//   url.getParameter(&quot;client&quot;, url.getParameter(&quot;transporter&quot;, &quot;netty&quot;))</span></span><br><span class="line">                        getNameCode = String.format(<span class="string">&quot;url.getParameter(\&quot;%s\&quot;, %s)&quot;</span>, value[i], getNameCode);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">// 生成的代码功能等价于下面的代码：</span></span><br><span class="line">                    <span class="comment">//   url.getProtocol() == null ? getNameCode : url.getProtocol()</span></span><br><span class="line">                    <span class="comment">// 以 Protocol 接口的 connect 方法为例，最终生成的代码如下：</span></span><br><span class="line">                    <span class="comment">//   url.getProtocol() == null ? &quot;dubbo&quot; : url.getProtocol()</span></span><br><span class="line">                    getNameCode = String.format(<span class="string">&quot;url.getProtocol() == null ? (%s) : url.getProtocol()&quot;</span>, getNameCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成 extName 赋值代码</span></span><br><span class="line">        code.append(<span class="string">&quot;\nString extName = &quot;</span>).append(getNameCode).append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成 extName 判空代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.format(<span class="string">&quot;\nif(extName == null) &quot;</span> +</span><br><span class="line">                                 <span class="string">&quot;throw new IllegalStateException(\&quot;Fail to get extension(%s) name from url(\&quot; + url.toString() + \&quot;) use keys(%s)\&quot;);&quot;</span>,</span><br><span class="line">                                 type.getName(), Arrays.toString(value));</span><br><span class="line">        code.append(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码已经进行了大量的注释，不过看起来任然不是很好理解。既然如此，那么建议大家写点测试代码，对 Protocol、LoadBalance 以及 Transporter 等接口的自适应拓展类代码生成过程进行调试。这里我以 Transporter 接口的自适应拓展类代码生成过程进行分析。首先看一下 Transporter 接口的定义，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(&quot;netty&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transporter</span> &#123;</span><br><span class="line">    <span class="comment">// @Adaptive(&#123;server, transporter&#125;)</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.SERVER_KEY, Constants.TRANSPORTER_KEY&#125;)</span> </span><br><span class="line">    Server <span class="title function_">bind</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Adaptive(&#123;client, transporter&#125;)</span></span><br><span class="line">    <span class="meta">@Adaptive(&#123;Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY&#125;)</span></span><br><span class="line">    Client <span class="title function_">connect</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对 connect 方法代理逻辑生成的过程进行分析，此时生成代理逻辑所用到的变量和值如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">defaultExtName</span> <span class="operator">=</span> <span class="string">&quot;netty&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hasInvocation</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">getNameCode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">String[] value = [<span class="string">&quot;client&quot;</span>, <span class="string">&quot;transporter&quot;</span>];</span><br></pre></td></tr></table></figure><p>下面对 value 数组进行遍历，此时 i &#x3D; 1, value[i] &#x3D; “transporter”，生成的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getNameCode = url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>);</span><br></pre></td></tr></table></figure><p>接下来，for 循环继续执行，此时 i &#x3D; 0, value[i] &#x3D; “client”，生成的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getNameCode = url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br></pre></td></tr></table></figure><p>for 循环结束运行，现在生成 extName 变量及判空代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> url.getParameter(<span class="string">&quot;client&quot;</span>, url.getParameter(<span class="string">&quot;transporter&quot;</span>, <span class="string">&quot;netty&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (extName == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">        <span class="string">&quot;Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(&quot;</span> + url.toString()</span><br><span class="line">        + <span class="string">&quot;) use keys([client, transporter])&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，connect 方法的拓展名获取代码就生成好了。如果大家不是很明白，建议自己调试走一遍。好了，本节先到这里。</p><h5 id="2-2-3-6-生成拓展加载与目标方法调用逻辑"><a href="#2-2-3-6-生成拓展加载与目标方法调用逻辑" class="headerlink" title="2.2.3.6 生成拓展加载与目标方法调用逻辑"></a>2.2.3.6 生成拓展加载与目标方法调用逻辑</h5><p>上一节的逻辑生成拓展名 extName 获取逻辑，接下来要做的是根据拓展名加载拓展实例，并调用拓展实例的目标方法。相关逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $&#123;获取 URL 数据&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;获取 Adaptive 注解值&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;检测 Invocation 参数&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;生成拓展名获取逻辑&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成拓展获取代码，格式如下：</span></span><br><span class="line">        <span class="comment">// type全限定名 extension = (type全限定名)ExtensionLoader全限定名</span></span><br><span class="line">        <span class="comment">//     .getExtensionLoader(type全限定名.class).getExtension(extName);</span></span><br><span class="line">        <span class="comment">// Tips: 格式化字符串中的 %&lt;s 表示使用前一个转换符所描述的参数，即 type 全限定名</span></span><br><span class="line">        s = String.format(<span class="string">&quot;\n%s extension = (%&lt;s)%s.getExtensionLoader(%s.class).getExtension(extName);&quot;</span>,</span><br><span class="line">                        type.getName(), ExtensionLoader.class.getSimpleName(), type.getName());</span><br><span class="line">        code.append(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果方法有返回值类型非 void，则生成 return 语句。</span></span><br><span class="line">        <span class="keyword">if</span> (!rt.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">            code.append(<span class="string">&quot;\nreturn &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成目标方法调用逻辑，格式为：</span></span><br><span class="line">        <span class="comment">//     extension.方法名(arg0, arg2, ..., argN);</span></span><br><span class="line">        s = String.format(<span class="string">&quot;extension.%s(&quot;</span>, method.getName());</span><br><span class="line">        code.append(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                code.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            code.append(<span class="string">&quot;arg&quot;</span>).append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        code.append(<span class="string">&quot;);&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略无关逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 Protocol 接口举例说明，上面代码生成的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.rpc.<span class="type">Protocol</span> <span class="variable">extension</span> <span class="operator">=</span> (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class="line">            .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);</span><br><span class="line"><span class="keyword">return</span> extension.refer(arg0, arg1);</span><br></pre></td></tr></table></figure><h5 id="2-2-3-7-生成完整的方法"><a href="#2-2-3-7-生成完整的方法" class="headerlink" title="2.2.3.7 生成完整的方法"></a>2.2.3.7 生成完整的方法</h5><p>本节进行代码生成的收尾工作，主要用于生成方法定义的代码。相关逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    Class&lt;?&gt; rt = method.getReturnType();</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt;[] ets = method.getExceptionTypes();</span><br><span class="line"></span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">512</span>);</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// $无 Adaptive 注解方法代码生成&#125;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// $&#123;获取 URL 数据&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;获取 Adaptive 注解值&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;检测 Invocation 参数&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;生成拓展名获取逻辑&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// $&#123;生成拓展加载与目标方法调用逻辑&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// public + 返回值全限定名 + 方法名 + (</span></span><br><span class="line">codeBuilder.append(<span class="string">&quot;\npublic &quot;</span>)</span><br><span class="line">    .append(rt.getCanonicalName())</span><br><span class="line">    .append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    .append(method.getName())</span><br><span class="line">    .append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加参数列表代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        codeBuilder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    codeBuilder.append(pts[i].getCanonicalName());</span><br><span class="line">    codeBuilder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    codeBuilder.append(<span class="string">&quot;arg&quot;</span>).append(i);</span><br><span class="line">&#125;</span><br><span class="line">codeBuilder.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加异常抛出代码</span></span><br><span class="line"><span class="keyword">if</span> (ets.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    codeBuilder.append(<span class="string">&quot; throws &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ets.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            codeBuilder.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        codeBuilder.append(ets[i].getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">codeBuilder.append(<span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line">codeBuilder.append(code.toString());</span><br><span class="line">codeBuilder.append(<span class="string">&quot;\n&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>以 Protocol 的 refer 方法为例，上面代码生成的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> com.alibaba.dubbo.rpc.Invoker <span class="title function_">refer</span><span class="params">(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1)</span> &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-基于动态代理实现知识与拓展"><a href="#3-基于动态代理实现知识与拓展" class="headerlink" title="3.基于动态代理实现知识与拓展"></a>3.基于动态代理实现知识与拓展</h2><p>我在第一章介绍自适应拓展原理时说过，Dubbo 通过生成和编译代码实现自适应拓展的方式有点复杂，不利于维护。另外，这样做对源码学习读者来说，也不是很友好。我敢肯定，有同学会像我一样，在开始调试 Dubbo 源码时，不知道如何调试各种自适应拓展类，比如 Protocol$Adaptive。如果你也有类似的困惑，这里教大家一个方法。如下：</p><ol><li>在 createAdaptiveExtensionClass 方法的第一行打个断点</li><li>启动测试代码，代码运行到端点处，单步越过断点，此时可以得到生成的代码。</li><li>拷贝出刚刚获取到的代码，到指定的包下创建同名类，并将代码拷过去，格式化一下即可</li></ol><p>从调试信息中可知，ProtocolAdaptive 所在包为 com.alibaba.dubbo.rpc。因此接下来到 com.alibaba.dubbo.rpc 包下创建 ProtocolAdaptive 类，并把 code 变量值拷贝到刚创建的文件中。</p><p>既然 Dubbo 实现的 Adaptive 机制不利于调试，那么我们可以对其进行改造。改造后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdaptiveInvokeHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String defaultExtName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdaptiveInvokeHandler</span><span class="params">(String defaultExtName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.defaultExtName = defaultExtName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!clazz.isInterface()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Only create the proxy for interface.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clazz&#125;, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Class&lt;?&gt; type = method.getDeclaringClass();</span><br><span class="line">        <span class="keyword">if</span> (type.equals(Object.class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Cannot invoke the method of Object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">        <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;method &quot;</span> + method.toString() + <span class="string">&quot; of interface &quot;</span> + type.getName() + <span class="string">&quot; is not adaptive method!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 URL 数据</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> getUrlData(method, args);</span><br><span class="line">        <span class="comment">// 获取 Adaptive 注解值</span></span><br><span class="line">        String[] value = getAdaptiveAnnotationValue(method);</span><br><span class="line">        <span class="comment">// 获取 Invocation 参数</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invocation</span> <span class="operator">=</span> getInvocationArgument(method, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取拓展名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> getExtensionName(url, value, invocation);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(extName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">&quot;Fail to get extension(&quot;</span> + type.getName() + <span class="string">&quot;) name from url(&quot;</span> + url.toString()</span><br><span class="line">                    + <span class="string">&quot;) use keys(&quot;</span> + Arrays.toString(value) +<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取拓展实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">extension</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(type).getExtension(extName);</span><br><span class="line">        Class&lt;?&gt; extType = extension.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> extType.getMethod(method.getName(), method.getParameterTypes());</span><br><span class="line">        <span class="comment">// 通过反射调用目标方法</span></span><br><span class="line">        <span class="keyword">return</span> targetMethod.invoke(extension, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来是不是简单了一些，不过这并不是全部的代码。我将 URL 数据以及 Adaptive 注解值的获取逻辑封装在了私有方法中，相应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> URL <span class="title function_">getUrlData</span><span class="params">(Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pts[i].equals(URL.class)) &#123;</span><br><span class="line">            url = (URL) args[i];</span><br><span class="line">            <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;url == null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">urlTypeIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        LBL_PTS:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">            Method[] ms = pts[i].getMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method m : ms) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> m.getName();</span><br><span class="line">                <span class="keyword">if</span> ((name.startsWith(<span class="string">&quot;get&quot;</span>) || name.length() &gt; <span class="number">3</span>)</span><br><span class="line">                    &amp;&amp; Modifier.isPublic(m.getModifiers())</span><br><span class="line">                    &amp;&amp; !Modifier.isStatic(m.getModifiers())</span><br><span class="line">                    &amp;&amp; m.getParameterTypes().length == <span class="number">0</span></span><br><span class="line">                    &amp;&amp; m.getReturnType() == URL.class) &#123;</span><br><span class="line"></span><br><span class="line">                    urlTypeIndex = i;</span><br><span class="line">                    getter = m;</span><br><span class="line">                    <span class="keyword">break</span> LBL_PTS;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (urlTypeIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot find URL argument.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args[urlTypeIndex] == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(pts[urlTypeIndex].getName() + <span class="string">&quot; argument == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        url = (URL) getter.invoke(args[urlTypeIndex]);</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(pts[urlTypeIndex].getName() + <span class="string">&quot; argument &quot;</span> + getter.getName() + <span class="string">&quot;() == null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String[] getAdaptiveAnnotationValue(Method method) &#123;</span><br><span class="line">    <span class="type">Adaptive</span> <span class="variable">adaptiveAnnotation</span> <span class="operator">=</span> method.getAnnotation(Adaptive.class);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> method.getDeclaringClass();</span><br><span class="line">    <span class="keyword">if</span> (adaptiveAnnotation == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;method &quot;</span> + method.toString() + <span class="string">&quot; of interface &quot;</span> + type.getName() + <span class="string">&quot; is not adaptive method!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] value = adaptiveAnnotation.value();</span><br><span class="line">    <span class="keyword">if</span> (value.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span>[] charArray = type.getSimpleName().toCharArray();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(charArray[i])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(Character.toLowerCase(charArray[i]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(charArray[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;sb.toString()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">getInvocationArgument</span><span class="params">(Method method, Object[] args)</span> &#123;</span><br><span class="line">    Class&lt;?&gt;[] pts = method.getParameterTypes();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pts.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pts[i].getName().equals(<span class="string">&quot;com.alibaba.dubbo.rpc.Invocation&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">invocation</span> <span class="operator">=</span> args[i];</span><br><span class="line">            <span class="keyword">if</span> (invocation == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;invocation == null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> invocation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getExtensionName</span><span class="params">(URL url, String[] value, Invocation invocation)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasInvocation</span> <span class="operator">=</span> invocation != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (hasInvocation) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = invocation.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getMethodName&quot;</span>);</span><br><span class="line">        methodName = (String) method.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">extName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;protocol&quot;</span>.equals(value[i])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasInvocation) &#123;</span><br><span class="line">                extName = url.getMethodParameter(methodName, value[i], defaultExtName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                extName = url.getParameter(value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            extName = url.getProtocol();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(extName)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == value.length -<span class="number">1</span> &amp;&amp; StringUtils.isEmpty(extName)) &#123;</span><br><span class="line">            extName = defaultExtName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> extName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们将 AdaptiveInvokeHandler 放置到 ExtensionLoader 所在包下，并对 ExtensionLoader 的 createAdaptiveExtension 方法代码进行改造。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">createAdaptiveExtension</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getExtensionClasses();</span><br><span class="line">        <span class="type">T</span> <span class="variable">extension</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cachedAdaptiveClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            extension = (T) cachedAdaptiveClass.newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (extension == <span class="literal">null</span>) &#123;</span><br><span class="line">            extension = (T) <span class="keyword">new</span> <span class="title class_">AdaptiveInvokeHandler</span>(cachedDefaultName).getProxy(type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> injectExtension(extension);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Can not create adaptive extension &quot;</span> + type + <span class="string">&quot;, cause: &quot;</span> + e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是改造后的代码，需要特别说明的是，上面的代码仅供演示使用，代码逻辑并不是十分严谨。如果你有更好的写法，欢迎分享。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>到此，关于自适应拓展的原理，实现以及改造过程就分析完了。总的来说自适应拓展整个逻辑还是很复杂的，并不是很容易弄懂。因此，大家在阅读该部分源码时，耐心一些，同时多进行调试。亦或是通过生成好的代码思考生成逻辑。当然，大家也可以将代码生成逻辑看成一个黑盒，不懂细节也没关系，只要知道自适应拓展原理即可。</p><p>好了，本篇文章先到这里，感谢大家的阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二、Dubbo-源码分析-–-自适应拓展原理&quot;&gt;&lt;a href=&quot;#二、Dubbo-源码分析-–-自适应拓展原理&quot; class=&quot;headerlink&quot; title=&quot;二、Dubbo 源码分析 – 自适应拓展原理&quot;&gt;&lt;/a&gt;二、Dubbo 源码分析 – 自适应拓展</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dubbo 源码分析 – SPI 机制</title>
    <link href="https://hexo.tryrun.top/posts/910f48a0.html"/>
    <id>https://hexo.tryrun.top/posts/910f48a0.html</id>
    <published>2020-09-19T14:29:54.000Z</published>
    <updated>2020-09-19T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Dubbo-源码分析-–-SPI-机制"><a href="#一、Dubbo-源码分析-–-SPI-机制" class="headerlink" title="一、Dubbo 源码分析 – SPI 机制"></a>一、Dubbo 源码分析 – SPI 机制</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口 加载实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。SPI 机制在第三方框架中也有所应用，比如 Dubbo 就是通过 SPI 机制加载所有的组件。不过，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。在 Dubbo 中，SPI 是一个非常重要的模块。如果大家想要学习 Dubbo 的源码，SPI 机制务必弄懂。下面，我们先来了解一下 Java SPI 与 Dubbo SPI 的使用方法，然后再来分析 Dubbo SPI 的源码。</p><h2 id="2-SPI-示例"><a href="#2-SPI-示例" class="headerlink" title="2.SPI 示例"></a>2.SPI 示例</h2><h3 id="2-1-Java-SPI-示例"><a href="#2-1-Java-SPI-示例" class="headerlink" title="2.1 Java SPI 示例"></a>2.1 Java SPI 示例</h3><p>前面简单介绍了 SPI 机制的原理，本节通过一个示例来演示 JAVA SPI 的使用方法。首先，我们定义一个接口，名称为 Robot。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Robot</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义两个实现类，分别为擎天柱 OptimusPrime 和大黄蜂 Bumblebee。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptimusPrime</span> <span class="keyword">implements</span> <span class="title class_">Robot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I am Optimus Prime.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bumblebee</span> <span class="keyword">implements</span> <span class="title class_">Robot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I am Bumblebee.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来 META-INF&#x2F;services 文件夹下创建一个文件，名称为 Robot 的全限定名 com.tianxiaobo.spi.Robot。文件内容为实现类的全限定的类名，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.tianxiaobo.spi.OptimusPrime</span><br><span class="line">com.tianxiaobo.spi.Bumblebee</span><br></pre></td></tr></table></figure><p>做好了所需的准备工作，接下来编写代码进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaSPITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ServiceLoader&lt;Robot&gt; serviceLoader = ServiceLoader.load(Robot.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;Java SPI&quot;</span>);</span><br><span class="line">        serviceLoader.forEach(Robot::sayHello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从测试结果可以看出，我们的两个实现类被成功的加载，并输出了相应的内容。关于 Java SPI 的演示先到这，接下来演示 Dubbo SPI。</p><h3 id="2-2-Dubbo-SPI-示例"><a href="#2-2-Dubbo-SPI-示例" class="headerlink" title="2.2 Dubbo SPI 示例"></a>2.2 Dubbo SPI 示例</h3><p>Dubbo 并未使用 Java SPI，而是重新实现了一套功能更强的 SPI 机制。Dubbo SPI 的相关逻辑被封装在了 ExtensionLoader 类中，通过 ExtensionLoader，我们可以加载指定的实现类。Dubbo SPI 的实现类配置放置在 META-INF&#x2F;dubbo 路径下，下面来看一下配置内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optimusPrime = com.tianxiaobo.spi.<span class="type">OptimusPrime</span></span><br><span class="line"><span class="variable">bumblebee</span> <span class="operator">=</span> com.tianxiaobo.spi.Bumblebee</span><br></pre></td></tr></table></figure><p>与 Java SPI 实现类配置不同，Dubbo SPI 是通过键值对的方式进行配置，这样我们就可以按需加载指定的实现类了。另外，在测试 Dubbo SPI 时，需要在 Robot 接口上标注 @SPI 注解。下面来演示一下 Dubbo SPI 的使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboSPITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ExtensionLoader&lt;Robot&gt; extensionLoader = </span><br><span class="line">            ExtensionLoader.getExtensionLoader(Robot.class);</span><br><span class="line">        <span class="type">Robot</span> <span class="variable">optimusPrime</span> <span class="operator">=</span> extensionLoader.getExtension(<span class="string">&quot;optimusPrime&quot;</span>);</span><br><span class="line">        optimusPrime.sayHello();</span><br><span class="line">        <span class="type">Robot</span> <span class="variable">bumblebee</span> <span class="operator">=</span> extensionLoader.getExtension(<span class="string">&quot;bumblebee&quot;</span>);</span><br><span class="line">        bumblebee.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示完 Dubbo SPI，下面来看看 Dubbo SPI 对 Java SPI 做了哪些改进，以下内容引用至 Dubbo 官方文档。</p><ul><li>JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。</li><li>如果扩展点加载失败，连扩展点的名称都拿不到了。比如：JDK 标准的 ScriptEngine，通过 getName() 获取脚本类型的名称，但如果 RubyScriptEngine 因为所依赖的 jruby.jar 不存在，导致 RubyScriptEngine 类加载失败，这个失败原因被吃掉了，和 ruby 对应不起来，当用户执行 ruby 脚本时，会报不支持 ruby，而不是真正失败的原因。</li><li>增加了对扩展点 IOC 和 AOP 的支持，一个扩展点可以直接 setter 注入其它扩展点。</li></ul><p>在以上改进项中，第一个改进项比较好理解。第二个改进项没有进行验证，就不多说了。第三个改进项是增加了对 IOC 和 AOP 的支持，这是什么意思呢？这里简单解释一下，Dubbo SPI 加载完拓展实例后，会通过该实例的 setter 方法解析出实例依赖项的名称。比如通过 setProtocol 方法名，可知道目标实例依赖 Protocal。知道了具体的依赖，接下来即可到 IOC 容器中寻找或生成一个依赖对象，并通过 setter 方法将依赖注入到目标实例中。说完 Dubbo IOC，接下来说说 Dubbo AOP。Dubbo AOP 是指使用 Wrapper 类（可自定义实现）对拓展对象进行包装，Wrapper 类中包含了一些自定义逻辑，这些逻辑可在目标方法前行前后被执行，类似 AOP。Dubbo AOP 实现的很简单，其实就是个代理模式。这个官方文档中有所说明，大家有兴趣可以查阅一下。</p><p>关于 Dubbo SPI 的演示，以及与 Java SPI 的对比就先这么多，接下来加入源码分析阶段。</p><h2 id="3-Dubbo-SPI-源码分析"><a href="#3-Dubbo-SPI-源码分析" class="headerlink" title="3. Dubbo SPI 源码分析"></a>3. Dubbo SPI 源码分析</h2><p>上一章，我简单演示了 Dubbo SPI 的使用方法。我们首先通过 ExtensionLoader 的 getExtensionLoader 方法获取一个 ExtensionLoader 实例，然后再通过 ExtensionLoader 的 getExtension 方法获取拓展类对象。这其中，getExtensionLoader 用于从缓存中获取与拓展类对应的 ExtensionLoader，若缓存未命中，则创建一个新的实例。该方法的逻辑比较简单，本章就不就行分析了。下面我们从 ExtensionLoader 的 getExtension 方法作为入口，对拓展类对象的获取过程进行详细的分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">getExtension</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span> || name.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Extension name == null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equals(name)) &#123;</span><br><span class="line">        <span class="comment">// 获取默认的拓展实现类</span></span><br><span class="line">        <span class="keyword">return</span> getDefaultExtension();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Holder 仅用于持有目标对象，没其他什么逻辑</span></span><br><span class="line">    Holder&lt;Object&gt; holder = cachedInstances.get(name);</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">        cachedInstances.putIfAbsent(name, <span class="keyword">new</span> <span class="title class_">Holder</span>&lt;Object&gt;());</span><br><span class="line">        holder = cachedInstances.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> holder.get();</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (holder) &#123;</span><br><span class="line">            instance = holder.get();</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建拓展实例，并设置到 holder 中</span></span><br><span class="line">                instance = createExtension(name);</span><br><span class="line">                holder.set(instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的逻辑比较简单，首先检查缓存，缓存未命中则创建拓展对象。下面我们来看一下创建拓展对象的过程是怎样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">createExtension</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 从配置文件中加载所有的拓展类，形成配置项名称到配置类的映射关系</span></span><br><span class="line">    Class&lt;?&gt; clazz = getExtensionClasses().get(name);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> findException(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通过反射创建实例</span></span><br><span class="line">            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class="line">            instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向实例中注入依赖</span></span><br><span class="line">        injectExtension(instance);</span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; wrapperClasses = cachedWrapperClasses;</span><br><span class="line">        <span class="keyword">if</span> (wrapperClasses != <span class="literal">null</span> &amp;&amp; !wrapperClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 循环创建 Wrapper 实例</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; wrapperClass : wrapperClasses) &#123;</span><br><span class="line">                <span class="comment">// 将当前 instance 作为参数创建 Wrapper 实例，然后向 Wrapper 实例中注入属性值，</span></span><br><span class="line">                <span class="comment">// 并将 Wrapper 实例赋值给 instance</span></span><br><span class="line">                instance = injectExtension(</span><br><span class="line">                    (T) wrapperClass.getConstructor(type).newInstance(instance));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>createExtension 方法的逻辑稍复杂一下，包含了如下的步骤：</p><ol><li>通过 getExtensionClasses 获取所有的拓展类</li><li>通过反射创建拓展对象</li><li>向拓展对象中注入依赖</li><li>将拓展对象包裹在相应的 Wrapper 对象中</li></ol><p>以上步骤中，第一个步骤是加载拓展类的关键，第三和第四个步骤是 Dubbo IOC 与 AOP 的具体实现。在接下来的章节中，我将会重点分析 getExtensionClasses 方法的逻辑，以及简单分析 Dubbo IOC 的具体实现。</p><h3 id="3-1-获取所有的拓展类"><a href="#3-1-获取所有的拓展类" class="headerlink" title="3.1 获取所有的拓展类"></a>3.1 获取所有的拓展类</h3><p>我们在通过名称获取拓展类之前，首先需要根据配置文件解析出名称到拓展类的映射，也就是 Map&lt;名称, 拓展类&gt;。之后再从 Map 中取出相应的拓展类即可。相关过程的代码分析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getExtensionClasses() &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取已加载的拓展类</span></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">    <span class="keyword">if</span> (classes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (cachedClasses) &#123;</span><br><span class="line">            classes = cachedClasses.get();</span><br><span class="line">            <span class="keyword">if</span> (classes == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 加载拓展类</span></span><br><span class="line">                classes = loadExtensionClasses();</span><br><span class="line">                cachedClasses.set(classes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也是先检查缓存，若缓存未命中，则通过 synchronized 加锁。加锁后再次检查缓存，并判空。此时如果 classes 仍为 null，则加载拓展类。以上代码的写法是典型的双重检查锁，前面所分析的 getExtension 方法中有相似的代码。关于双重检查就说这么多，下面分析 loadExtensionClasses 方法的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">    <span class="comment">// 获取 SPI 注解，这里的 type 是在调用 getExtensionLoader 方法时传入的</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SPI</span> <span class="variable">defaultAnnotation</span> <span class="operator">=</span> type.getAnnotation(SPI.class);</span><br><span class="line">    <span class="keyword">if</span> (defaultAnnotation != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> defaultAnnotation.value();</span><br><span class="line">        <span class="keyword">if</span> ((value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 对 SPI 注解内容进行切分</span></span><br><span class="line">            String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">            <span class="comment">// 检测 SPI 注解内容是否合法，不合法则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置默认名称，cachedDefaultName 用于加载默认实现，参考 getDefaultExtension 方法</span></span><br><span class="line">            <span class="keyword">if</span> (names.length == <span class="number">1</span>) &#123;</span><br><span class="line">                cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">    <span class="comment">// 加载指定文件夹配置文件</span></span><br><span class="line">    loadDirectory(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">    loadDirectory(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">    loadDirectory(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">    <span class="keyword">return</span> extensionClasses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadExtensionClasses 方法总共做了两件事情，一是对 SPI 注解进行解析，二是调用 loadDirectory 方法加载指定文件夹配置文件。SPI 注解解析过程比较简单，无需多说。下面我们来看一下 loadDirectory 做了哪些事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDirectory</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, String dir)</span> &#123;</span><br><span class="line">    <span class="comment">// fileName = 文件夹路径 + type 全限定名 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> dir + type.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Enumeration&lt;java.net.URL&gt; urls;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> findClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 根据文件名加载所有的同名文件</span></span><br><span class="line">            urls = classLoader.getResources(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            urls = ClassLoader.getSystemResources(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (urls != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                java.net.<span class="type">URL</span> <span class="variable">resourceURL</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">                <span class="comment">// 加载资源</span></span><br><span class="line">                loadResource(extensionClasses, classLoader, resourceURL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadDirectory 方法代码不多，理解起来不难。该方法先通过 classLoader 获取所有资源链接，然后再通过 loadResource 方法加载资源。我们继续跟下去，看一下 loadResource 方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadResource</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, </span></span><br><span class="line"><span class="params">    ClassLoader classLoader, java.net.URL resourceURL)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(resourceURL.openStream(), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="comment">// 按行读取配置内容</span></span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ci</span> <span class="operator">=</span> line.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 截取 # 之前的字符串，# 之后的内容为注释</span></span><br><span class="line">                    line = line.substring(<span class="number">0</span>, ci);</span><br><span class="line">                &#125;</span><br><span class="line">                line = line.trim();</span><br><span class="line">                <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> line.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 以 = 为界，截取键与值。比如 dubbo=com.alibaba....DubboProtocol</span></span><br><span class="line">                            name = line.substring(<span class="number">0</span>, i).trim();</span><br><span class="line">                            line = line.substring(i + <span class="number">1</span>).trim();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (line.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 加载解析出来的限定类名</span></span><br><span class="line">                            loadClass(extensionClasses, resourceURL, </span><br><span class="line">                                      Class.forName(line, <span class="literal">true</span>, classLoader), name);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        <span class="type">IllegalStateException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadResource 方法用于读取和解析配置文件，并通过反射加载类，最后调用 loadClass 方法进行其他操作。loadClass 方法有点名不副实，它的功能只是操作缓存，而非加载类。该方法的逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadClass</span><span class="params">(Map&lt;String, Class&lt;?&gt;&gt; extensionClasses, java.net.URL resourceURL, </span></span><br><span class="line"><span class="params">    Class&lt;?&gt; clazz, String name)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!type.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(Adaptive.class)) &#123;    <span class="comment">// 检测目标类上是否有 Adaptive 注解</span></span><br><span class="line">        <span class="keyword">if</span> (cachedAdaptiveClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置 cachedAdaptiveClass缓存</span></span><br><span class="line">            cachedAdaptiveClass = clazz;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cachedAdaptiveClass.equals(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWrapperClass(clazz)) &#123;    <span class="comment">// 检测 clazz 是否是 Wrapper 类型</span></span><br><span class="line">        Set&lt;Class&lt;?&gt;&gt; wrappers = cachedWrapperClasses;</span><br><span class="line">        <span class="keyword">if</span> (wrappers == <span class="literal">null</span>) &#123;</span><br><span class="line">            cachedWrapperClasses = <span class="keyword">new</span> <span class="title class_">ConcurrentHashSet</span>&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">            wrappers = cachedWrapperClasses;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存储 clazz 到 cachedWrapperClasses 缓存中</span></span><br><span class="line">        wrappers.add(clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// 程序进入此分支，表明是一个普通的拓展类</span></span><br><span class="line">        <span class="comment">// 检测 clazz 是否有默认的构造方法，如果没有，则抛出异常</span></span><br><span class="line">        clazz.getConstructor();</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 name 为空，则尝试从 Extension 注解获取 name，或使用小写的类名作为 name</span></span><br><span class="line">            name = findAnnotationName(clazz);</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 切分 name</span></span><br><span class="line">        String[] names = NAME_SEPARATOR.split(name);</span><br><span class="line">        <span class="keyword">if</span> (names != <span class="literal">null</span> &amp;&amp; names.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Activate</span> <span class="variable">activate</span> <span class="operator">=</span> clazz.getAnnotation(Activate.class);</span><br><span class="line">            <span class="keyword">if</span> (activate != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果类上有 Activate 注解，则使用 names 数组的第一个元素作为键，</span></span><br><span class="line">                <span class="comment">// 存储 name 到 Activate 注解对象的映射关系</span></span><br><span class="line">                cachedActivates.put(names[<span class="number">0</span>], activate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String n : names) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!cachedNames.containsKey(clazz)) &#123;</span><br><span class="line">                    <span class="comment">// 存储 Class 到名称的映射关系</span></span><br><span class="line">                    cachedNames.put(clazz, n);</span><br><span class="line">                &#125;</span><br><span class="line">                Class&lt;?&gt; c = extensionClasses.get(n);</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 存储名称到 Class 的映射关系</span></span><br><span class="line">                    extensionClasses.put(n, clazz);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != clazz) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，loadClass 方法操作了不同的缓存，比如 cachedAdaptiveClass、cachedWrapperClasses 和 cachedNames 等等。除此之外，该方法没有其他什么逻辑了，就不多说了。</p><p>到此，关于缓存类加载的过程就分析完了。整个过程没什么特别复杂的地方，大家按部就班的分析就行了，不懂的地方可以调试一下。接下来，我们来聊聊 Dubbo IOC 方面的内容。</p><h3 id="3-2-Dubbo-IOC"><a href="#3-2-Dubbo-IOC" class="headerlink" title="3.2 Dubbo IOC"></a>3.2 Dubbo IOC</h3><p>Dubbo IOC 是基于 setter 方法注入依赖。Dubbo 首先会通过反射获取到实例的所有方法，然后再遍历方法列表，检测方法名是否具有 setter 方法特征。若有，则通过 ObjectFactory 获取依赖对象，最后通过反射调用 setter 方法将依赖设置到目标对象中。整个过程对应的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">injectExtension</span><span class="params">(T instance)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (objectFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历目标类的所有方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : instance.getClass().getMethods()) &#123;</span><br><span class="line">                <span class="comment">// 检测方法是否以 set 开头，且方法仅有一个参数，且方法访问级别为 public</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().startsWith(<span class="string">&quot;set&quot;</span>)</span><br><span class="line">                    &amp;&amp; method.getParameterTypes().length == <span class="number">1</span></span><br><span class="line">                    &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                    <span class="comment">// 获取 setter 方法参数类型</span></span><br><span class="line">                    Class&lt;?&gt; pt = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取属性名</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> method.getName().length() &gt; <span class="number">3</span> ? </span><br><span class="line">                            method.getName().substring(<span class="number">3</span>, <span class="number">4</span>).toLowerCase() + </span><br><span class="line">                                method.getName().substring(<span class="number">4</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="comment">// 从 ObjectFactory 中获取依赖对象</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objectFactory.getExtension(pt, property);</span><br><span class="line">                        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 通过反射调用 setter 方法设置依赖</span></span><br><span class="line">                            method.invoke(instance, object);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.error(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中，objectFactory 变量的类型为 AdaptiveExtensionFactory，AdaptiveExtensionFactory 内部维护了一个 ExtensionFactory 列表，用于存储其他类型的 ExtensionFactory。Dubbo 目前提供了两种 ExtensionFactory，分别是 SpiExtensionFactory 和 SpringExtensionFactory。前者用于创建自适应的拓展，关于自适应拓展，我将会在下一篇文章中进行说明。SpringExtensionFactory 则是到 Spring 的 IOC 容器中获取所需拓展，该类的实现并不复杂，大家自行分析源码，这里就不多说了。</p><p>Dubbo IOC 的实现比较简单，仅支持 setter 方式注入。总的来说，逻辑简单易懂。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>本篇文章简单介绍了 Java SPI 与 Dubbo SPI 用法与区别，并对 Dubbo SPI 的部分源码进行了分析。在 Dubbo SPI 中还有一块重要的逻辑没有进行分析，那就是 Dubbo SPI 的扩展点自适应机制。该机制的逻辑较为复杂，我将会在下一篇文章中进行分析。好了，其他的就不多说了，本篇文件就先到这里了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Dubbo-源码分析-–-SPI-机制&quot;&gt;&lt;a href=&quot;#一、Dubbo-源码分析-–-SPI-机制&quot; class=&quot;headerlink&quot; title=&quot;一、Dubbo 源码分析 – SPI 机制&quot;&gt;&lt;/a&gt;一、Dubbo 源码分析 – SPI 机制&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper 应用程序</title>
    <link href="https://hexo.tryrun.top/posts/ea448247.html"/>
    <id>https://hexo.tryrun.top/posts/ea448247.html</id>
    <published>2020-09-18T14:29:54.000Z</published>
    <updated>2020-09-18T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八、Zookeeper-应用程序"><a href="#八、Zookeeper-应用程序" class="headerlink" title="八、Zookeeper 应用程序"></a>八、Zookeeper 应用程序</h1><p>Zookeeper为分布式环境提供灵活的协调基础架构。ZooKeeper框架支持许多当今最好的工业应用程序。我们将在本章中讨论ZooKeeper的一些最显着的应用。</p><h2 id="雅虎"><a href="#雅虎" class="headerlink" title="雅虎"></a>雅虎</h2><p>ZooKeeper框架最初是在“Yahoo!”中构建的。设计良好的分布式应用程序需要满足诸如数据透明度，更好的性能，稳健性，集中配置和协调等要求。所以，他们设计了ZooKeeper框架来满足这些要求。</p><h2 id="Apache-Hadoop"><a href="#Apache-Hadoop" class="headerlink" title="Apache Hadoop"></a>Apache Hadoop</h2><p>Apache Hadoop是大数据行业发展的推动力。Hadoop依靠ZooKeeper进行配置管理和协调。让我们来了解一下ZooKeeper在Hadoop中的作用。</p><p>假设 <strong>Hadoop集群</strong> 桥接100个或更多的商品服务器。那么，就需要协调和命名服务。因此涉及大量节点的计算，每个节点需要彼此同步，知道在哪里访问服务器，以及知道如何配置它们。在这个时间点，Hadoop集群需要跨节点服务器。ZooKeeper提供<strong>跨节点同步</strong>的功能，并确保跨越Hadoop项目的任务被序列化和同步化。</p><p>多个ZooKeeper服务器支持大型Hadoop集群。每个客户端机器与ZooKeeper服务器之一通信以检索和更新其同步信息。一些实时示例如下：</p><ul><li><strong>人类基因组计划</strong> - 人类基因组计划包含兆兆字节数据。Hadoop MapReduce框架可用于分析数据集并为人类发展找到有趣的事实。</li><li><strong>医疗保健</strong> - 医院可以存储，检索和分析大量患者医疗记录，通常为兆兆字节。</li></ul><h2 id="Apache-HBase"><a href="#Apache-HBase" class="headerlink" title="Apache HBase"></a>Apache HBase</h2><p>Apache HBase是一个开源的，分布式的NoSQL数据库，用于大型数据集的实时读&#x2F;写访问，并在HDFS上运行。HBase遵循<strong>主从架构</strong>，HBase主控制所有从机。从机称为<strong>区域服务器</strong>。</p><p>HBase分布式应用程序安装取决于运行的ZooKeeper集群。Apache HBase使用ZooKeeper通过<strong>集中式配置管理</strong>和<strong>分布式互斥</strong>机制来帮助主机和区域服务器跟踪分布式数据的状态。以下是一些HBase的用例：</p><ul><li><strong>电信</strong> - 电信行业存储数十亿条移动通话记录（约30TB&#x2F;月），实时访问这些通话记录成为一项巨大的任务。HBase可以用来实时，轻松，高效地处理所有记录。</li><li><strong>社交网络</strong> - 与电信行业类似，Twitter，LinkedIn和Facebook等网站通过用户创建的帖子接收大量数据。HBase可以用来查找最近的趋势和其他有趣的事实。</li></ul><h2 id="Apache-Solr"><a href="#Apache-Solr" class="headerlink" title="Apache Solr"></a>Apache Solr</h2><p>Apache Solr是一个用Java编写的快速，开源的搜索平台。它是一个快速，容错的分布式搜索引擎。建立在 <strong>Lucene</strong> 之上，是一个高性能，全功能的文本搜索引擎。</p><p>Solr广泛使用ZooKeeper的每个功能，如配置管理，leader选举，节点管理，数据锁定和同步化。</p><p>Solr有两个不同的部分，<strong>索引</strong>和<strong>搜索</strong>。索引是以适当格式存储数据以便后续可以搜索的过程。Solr使用ZooKeeper对多个节点中的数据进行索引和搜索。ZooKeeper提供以下功能：</p><ul><li>根据需要添加&#x2F;删除节点</li><li>在节点之间复制数据，随后最小化数据丢失</li><li>在多个节点之间共享数据，随后从多个节点搜索以获得更快的搜索结果</li></ul><p>Apache Solr的一些用例包括电子商务，求职搜索等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;八、Zookeeper-应用程序&quot;&gt;&lt;a href=&quot;#八、Zookeeper-应用程序&quot; class=&quot;headerlink&quot; title=&quot;八、Zookeeper 应用程序&quot;&gt;&lt;/a&gt;八、Zookeeper 应用程序&lt;/h1&gt;&lt;p&gt;Zookeeper为分布式环</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper API</title>
    <link href="https://hexo.tryrun.top/posts/51210225.html"/>
    <id>https://hexo.tryrun.top/posts/51210225.html</id>
    <published>2020-09-17T14:29:54.000Z</published>
    <updated>2020-09-17T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、Zookeeper-API"><a href="#七、Zookeeper-API" class="headerlink" title="七、Zookeeper API"></a>七、Zookeeper API</h1><p>ZooKeeper有一个绑定Java和C的官方API。Zookeeper社区为大多数语言（.NET，python等）提供非官方API。使用ZooKeeper API，应用程序可以连接，交互，操作数据，协调，最后断开与ZooKeeper集合的连接。</p><p>ZooKeeper API具有丰富的功能，以简单和安全的方式获得ZooKeeper集合的所有功能。ZooKeeper API提供同步和异步方法。</p><p>ZooKeeper集合和ZooKeeper API在各个方面都完全相辅相成，对开发人员有很大的帮助。让我们在本章讨论Java绑定。</p><h2 id="ZooKeeper-API的基础知识"><a href="#ZooKeeper-API的基础知识" class="headerlink" title="ZooKeeper API的基础知识"></a>ZooKeeper API的基础知识</h2><p>与ZooKeeper集合进行交互的应用程序称为 <strong>ZooKeeper客户端</strong>或简称<strong>客户端</strong>。</p><p>Znode是ZooKeeper集合的核心组件，ZooKeeper API提供了一小组方法使用ZooKeeper集合来操纵znode的所有细节。</p><p>客户端应该遵循以步骤，与ZooKeeper集合进行清晰和干净的交互。</p><ul><li>连接到ZooKeeper集合。ZooKeeper集合为客户端分配会话ID。</li><li>定期向服务器发送心跳。否则，ZooKeeper集合将过期会话ID，客户端需要重新连接。</li><li>只要会话ID处于活动状态，就可以获取&#x2F;设置znode。</li><li>所有任务完成后，断开与ZooKeeper集合的连接。如果客户端长时间不活动，则ZooKeeper集合将自动断开客户端。</li></ul><h2 id="Java绑定"><a href="#Java绑定" class="headerlink" title="Java绑定"></a>Java绑定</h2><p>让我们来了解本章中最重要的一组ZooKeeper API。ZooKeeper API的核心部分是<strong>ZooKeeper类</strong>。它提供了在其构造函数中连接ZooKeeper集合的选项，并具有以下方法：</p><ul><li><strong>connect</strong> - 连接到ZooKeeper集合</li><li><strong>create</strong>- 创建znode</li><li><strong>exists</strong>- 检查znode是否存在及其信息</li><li><strong>getData</strong> - 从特定的znode获取数据</li><li><strong>setData</strong> - 在特定的znode中设置数据</li><li><strong>getChildren</strong> - 获取特定znode中的所有子节点</li><li><strong>delete</strong> - 删除特定的znode及其所有子项</li><li><strong>close</strong> - 关闭连接</li></ul><h2 id="连接到ZooKeeper集合"><a href="#连接到ZooKeeper集合" class="headerlink" title="连接到ZooKeeper集合"></a>连接到ZooKeeper集合</h2><p>ZooKeeper类通过其构造函数提供connect功能。构造函数的签名如下 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper(String connectionString, <span class="type">int</span> sessionTimeout, Watcher watcher)</span><br></pre></td></tr></table></figure><ul><li><strong>connectionString</strong> - ZooKeeper集合主机。</li><li><strong>sessionTimeout</strong> - 会话超时（以毫秒为单位）。</li><li><strong>watcher</strong> - 实现“监视器”界面的对象。ZooKeeper集合通过监视器对象返回连接状态。</li></ul><p>让我们创建一个新的帮助类 <strong>ZooKeeperConnection</strong> ，并添加一个方法 <strong>connect</strong> 。 <strong>connect</strong> 方法创建一个ZooKeeper对象，连接到ZooKeeper集合，然后返回对象。</p><p>这里 <strong>CountDownLatch</strong> 用于停止（等待）主进程，直到客户端与ZooKeeper集合连接。</p><p>ZooKeeper集合通过监视器回调来回复连接状态。一旦客户端与ZooKeeper集合连接，监视器回调就会被调用，并且监视器回调函数调用<strong>CountDownLatch</strong>的<strong>countDown</strong>方法来释放锁，在主进程中<strong>await</strong>。</p><p>以下是与ZooKeeper集合连接的完整代码。</p><h3 id="编码：ZooKeeperConnection-java"><a href="#编码：ZooKeeperConnection-java" class="headerlink" title="编码：ZooKeeperConnection.java"></a>编码：ZooKeeperConnection.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import java classes</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import zookeeper classes</span></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback.StatCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException.Code;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZooKeeperConnection</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// declare zookeeper instance to access ZooKeeper ensemble</span></span><br><span class="line">   <span class="keyword">private</span> ZooKeeper zoo;</span><br><span class="line">   <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">connectedSignal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to connect zookeeper ensemble.</span></span><br><span class="line">   <span class="keyword">public</span> ZooKeeper <span class="title function_">connect</span><span class="params">(String host)</span> <span class="keyword">throws</span> IOException,InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">      zoo = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(host,<span class="number">5000</span>,<span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent we)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (we.getState() == KeeperState.SyncConnected) &#123;</span><br><span class="line">               connectedSignal.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      connectedSignal.await();</span><br><span class="line">      <span class="keyword">return</span> zoo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to disconnect from zookeeper server</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      zoo.close();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存上面的代码，它将在下一节中用于连接ZooKeeper集合。</p><h2 id="创建Znode"><a href="#创建Znode" class="headerlink" title="创建Znode"></a>创建Znode</h2><p>ZooKeeper类提供了在ZooKeeper集合中创建一个新的znode的<strong>create</strong>方法。 <strong>create</strong> 方法的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create(String path, <span class="type">byte</span>[] data, List&lt;ACL&gt; acl, CreateMode createMode)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong> - Znode路径。例如，&#x2F;myapp1，&#x2F;myapp2，&#x2F;myapp1&#x2F;mydata1，myapp2&#x2F;mydata1&#x2F;myanothersubdata</li><li><strong>data</strong> - 要存储在指定znode路径中的数据</li><li><strong>acl</strong> - 要创建的节点的访问控制列表。ZooKeeper API提供了一个静态接口 <strong>ZooDefs.Ids</strong> 来获取一些基本的acl列表。例如，ZooDefs.Ids.OPEN_ACL_UNSAFE返回打开znode的acl列表。</li><li><strong>createMode</strong> - 节点的类型，即临时，顺序或两者。这是一个<strong>枚举</strong>。</li></ul><p>让我们创建一个新的Java应用程序来检查ZooKeeper API的 <strong>create</strong> 功能。创建文件 <strong>ZKCreate.java</strong> 。在main方法中，创建一个类型为 <strong>ZooKeeperConnection</strong> 的对象，并调用 <strong>connect</strong> 方法连接到ZooKeeper集合。</p><p>connect方法将返回ZooKeeper对象 <strong>zk</strong> 。现在，请使用自定义<strong>path</strong>和<strong>data</strong>调用 <strong>zk</strong> 对象的 <strong>create</strong> 方法。</p><p>创建znode的完整程序代码如下：</p><h3 id="编码：ZKCreate-java"><a href="#编码：ZKCreate-java" class="headerlink" title="编码：ZKCreate.java"></a>编码：ZKCreate.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKCreate</span> &#123;</span><br><span class="line">   <span class="comment">// create static instance for zookeeper class.</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// create static instance for ZooKeeperConnection class.</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to create znode in zookeeper ensemble</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(String path, <span class="type">byte</span>[] data)</span> <span class="keyword">throws</span> </span><br><span class="line">      KeeperException,InterruptedException &#123;</span><br><span class="line">      zk.create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">      CreateMode.PERSISTENT);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// znode path</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign path to znode</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// data in byte array</span></span><br><span class="line">      <span class="type">byte</span>[] data = <span class="string">&quot;My first zookeeper app&quot;</span>.getBytes(); <span class="comment">// Declare data</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         create(path, data); <span class="comment">// Create the data to the specified path</span></span><br><span class="line">         conn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">//Catch error message</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦编译和执行应用程序，将在ZooKeeper集合中创建具有指定数据的znode。你可以使用ZooKeeper CLI <strong>zkCli.sh</strong> 进行检查。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line">&gt;&gt;&gt; get /MyFirstZnode</span><br></pre></td></tr></table></figure><h2 id="Exists-–-检查Znode的存在"><a href="#Exists-–-检查Znode的存在" class="headerlink" title="Exists – 检查Znode的存在"></a>Exists – 检查Znode的存在</h2><p>ZooKeeper类提供了 <strong>exists</strong> 方法来检查znode的存在。如果指定的znode存在，则返回一个znode的元数据。<strong>exists</strong>方法的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists(String path, <span class="type">boolean</span> watcher)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong>- Znode路径</li><li><strong>watcher</strong> - 布尔值，用于指定是否监视指定的znode</li></ul><p>让我们创建一个新的Java应用程序来检查ZooKeeper API的“exists”功能。创建文件“ZKExists.java”。在main方法中，使用“ZooKeeperConnection”对象创建ZooKeeper对象“zk”。然后，使用自定义“path”调用“zk”对象的“exists”方法。完整的列表如下：</p><h3 id="编码：ZKExists-java"><a href="#编码：ZKExists-java" class="headerlink" title="编码：ZKExists.java"></a>编码：ZKExists.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKExists</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title function_">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span></span><br><span class="line">      KeeperException,InterruptedException &#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign znode to the specified path</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> znode_exists(path); <span class="comment">// Stat checks the path of the znode</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(stat != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node exists and the node version is &quot;</span> +</span><br><span class="line">            stat.getVersion());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">// Catches error messages</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦编译和执行应用程序，你将获得以下输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node exists and the node version is 1.</span><br></pre></td></tr></table></figure><h2 id="getData方法"><a href="#getData方法" class="headerlink" title="getData方法"></a>getData方法</h2><p>ZooKeeper类提供 <strong>getData</strong> 方法来获取附加在指定znode中的数据及其状态。 <strong>getData</strong> 方法的签名如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getData(String path, Watcher watcher, Stat <span class="built_in">stat</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong> - Znode路径。</li><li><strong>watcher</strong> - 监视器类型的回调函数。当指定的znode的数据改变时，ZooKeeper集合将通过监视器回调进行通知。这是一次性通知。</li><li><strong>stat</strong> - 返回znode的元数据。</li></ul><p>让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>getData</strong> 功能。创建文件 <strong>ZKGetData.java</strong> 。在main方法中，使用 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。然后，使用自定义路径调用zk对象的 <strong>getData</strong> 方法。</p><p>下面是从指定节点获取数据的完整程序代码：</p><h3 id="编码：ZKGetData-java"><a href="#编码：ZKGetData-java" class="headerlink" title="编码：ZKGetData.java"></a>编码：ZKGetData.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKGetData</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title function_">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span> </span><br><span class="line">      KeeperException,InterruptedException &#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path,<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">connectedSignal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> znode_exists(path);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(stat != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] b = zk.getData(path, <span class="keyword">new</span> <span class="title class_">Watcher</span>() &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent we)</span> &#123;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (we.getType() == Event.EventType.None) &#123;</span><br><span class="line">                     <span class="keyword">switch</span>(we.getState()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> Expired:</span><br><span class="line">                        connectedSignal.countDown();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">byte</span>[] bn = zk.getData(path,</span><br><span class="line">                        <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bn,</span><br><span class="line">                        <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                        System.out.println(data);</span><br><span class="line">                        connectedSignal.countDown();</span><br><span class="line"></span><br><span class="line">                     &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">                        System.out.println(ex.getMessage());</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(data);</span><br><span class="line">            connectedSignal.await();</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦编译和执行应用程序，你将获得以下输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My first zookeeper app</span><br></pre></td></tr></table></figure><p>应用程序将等待ZooKeeper集合的进一步通知。使用ZooKeeper CLI <strong>zkCli.sh</strong> 更改指定znode的数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">set</span> /MyFirstZnode Hello</span><br></pre></td></tr></table></figure><p>现在，应用程序将打印以下输出并退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure><h2 id="setData方法"><a href="#setData方法" class="headerlink" title="setData方法"></a>setData方法</h2><p>ZooKeeper类提供 <strong>setData</strong> 方法来修改指定znode中附加的数据。 <strong>setData</strong> 方法的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setData(String path, <span class="type">byte</span>[] data, <span class="type">int</span> version)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong>- Znode路径</li><li><strong>data</strong> - 要存储在指定znode路径中的数据。</li><li><strong>version</strong>- znode的当前版本。每当数据更改时，ZooKeeper会更新znode的版本号。</li></ul><p>现在让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>setData</strong> 功能。创建文件 <strong>ZKSetData.java</strong> 。在main方法中，使用 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。然后，使用指定的路径，新数据和节点版本调用 <strong>zk</strong> 对象的 <strong>setData</strong> 方法。</p><p>以下是修改附加在指定znode中的数据的完整程序代码。</p><h3 id="编码：ZKSetData-java"><a href="#编码：ZKSetData-java" class="headerlink" title="编码：ZKSetData.java"></a>编码：ZKSetData.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKSetData</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to update the data in a znode. Similar to getData but without watcher.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String path, <span class="type">byte</span>[] data)</span> <span class="keyword">throws</span></span><br><span class="line">      KeeperException,InterruptedException &#123;</span><br><span class="line">      zk.setData(path, data, zk.exists(path,<span class="literal">true</span>).getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException &#123;</span><br><span class="line">      String path= <span class="string">&quot;/MyFirstZnode&quot;</span>;</span><br><span class="line">      <span class="type">byte</span>[] data = <span class="string">&quot;Success&quot;</span>.getBytes(); <span class="comment">//Assign data which is to be updated.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         update(path, data); <span class="comment">// Update znode data to the specified path</span></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并执行应用程序后，指定的znode的数据将被改变，并且可以使用ZooKeeper CLI <strong>zkCli.sh</strong> 进行检查。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line">&gt;&gt;&gt; get /MyFirstZnode</span><br></pre></td></tr></table></figure><h2 id="getChildren方法"><a href="#getChildren方法" class="headerlink" title="getChildren方法"></a>getChildren方法</h2><p>ZooKeeper类提供 <strong>getChildren</strong> 方法来获取特定znode的所有子节点。 <strong>getChildren</strong> 方法的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getChildren(String path, Watcher watcher)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong> - Znode路径。</li><li><strong>watcher</strong> - 监视器类型的回调函数。当指定的znode被删除或znode下的子节点被创建&#x2F;删除时，ZooKeeper集合将进行通知。这是一次性通知。</li></ul><h3 id="编码：ZKGetChildren-java"><a href="#编码：ZKGetChildren-java" class="headerlink" title="编码：ZKGetChildren.java"></a>编码：ZKGetChildren.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKGetChildren</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Stat <span class="title function_">znode_exists</span><span class="params">(String path)</span> <span class="keyword">throws</span> </span><br><span class="line">      KeeperException,InterruptedException &#123;</span><br><span class="line">      <span class="keyword">return</span> zk.exists(path,<span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">// Assign path to the znode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> znode_exists(path); <span class="comment">// Stat checks the path</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(stat!= <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//“getChildren&quot; method- get all the children of znode.It has two</span></span><br><span class="line">            args, path and watch</span><br><span class="line">            List &lt;String&gt; children = zk.getChildren(path, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; children.size(); i++)</span><br><span class="line">            System.out.println(children.get(i)); <span class="comment">//Print children&#x27;s</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Node does not exists&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行程序之前，让我们使用ZooKeeper CLI <strong>zkCli.sh</strong> 为 <strong>&#x2F;MyFirstZnode</strong> 创建两个子节点。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/zookeeper</span><br><span class="line">bin/zkCli.sh</span><br><span class="line">&gt;&gt;&gt; create /MyFirstZnode/myfirstsubnode Hi</span><br><span class="line">&gt;&gt;&gt; create /MyFirstZnode/mysecondsubmode Hi</span><br></pre></td></tr></table></figure><p>现在，编译和运行程序将输出上面创建的znode。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myfirstsubnode</span><br><span class="line">mysecondsubnode</span><br></pre></td></tr></table></figure><h2 id="删除Znode"><a href="#删除Znode" class="headerlink" title="删除Znode"></a>删除Znode</h2><p>ZooKeeper类提供了 <strong>delete</strong> 方法来删除指定的znode。 <strong>delete</strong> 方法的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(String path, <span class="type">int</span> version)</span><br></pre></td></tr></table></figure><ul><li><strong>path</strong> - Znode路径。</li><li><strong>version</strong> - znode的当前版本。</li></ul><p>让我们创建一个新的Java应用程序来了解ZooKeeper API的 <strong>delete</strong> 功能。创建文件 <strong>ZKDelete.java</strong> 。在main方法中，使用 <strong>ZooKeeperConnection</strong> 对象创建一个ZooKeeper对象 <strong>zk</strong> 。然后，使用指定的路径和版本号调用 <strong>zk</strong> 对象的 <strong>delete</strong> 方法。</p><p>删除znode的完整程序代码如下：</p><h3 id="编码：ZKDelete-java"><a href="#编码：ZKDelete-java" class="headerlink" title="编码：ZKDelete.java"></a>编码：ZKDelete.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZKDelete</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperConnection conn;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Method to check existence of znode and its status, if znode is available.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String path)</span> <span class="keyword">throws</span> KeeperException,InterruptedException &#123;</span><br><span class="line">      zk.delete(path,zk.exists(path,<span class="literal">true</span>).getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,KeeperException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/MyFirstZnode&quot;</span>; <span class="comment">//Assign path to the znode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = <span class="keyword">new</span> <span class="title class_">ZooKeeperConnection</span>();</span><br><span class="line">         zk = conn.connect(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">         delete(path); <span class="comment">//delete the node with the specified path</span></span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">         System.out.println(e.getMessage()); <span class="comment">// catches error messages</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;七、Zookeeper-API&quot;&gt;&lt;a href=&quot;#七、Zookeeper-API&quot; class=&quot;headerlink&quot; title=&quot;七、Zookeeper API&quot;&gt;&lt;/a&gt;七、Zookeeper API&lt;/h1&gt;&lt;p&gt;ZooKeeper有一个绑定Java</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper CLI</title>
    <link href="https://hexo.tryrun.top/posts/b4d28b16.html"/>
    <id>https://hexo.tryrun.top/posts/b4d28b16.html</id>
    <published>2020-09-16T14:29:54.000Z</published>
    <updated>2020-09-16T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、Zookeeper-CLI"><a href="#六、Zookeeper-CLI" class="headerlink" title="六、Zookeeper CLI"></a>六、Zookeeper CLI</h1><p>ZooKeeper命令行界面（CLI）用于与ZooKeeper集合进行交互以进行开发。它有助于调试和解决不同的选项。</p><p>要执行ZooKeeper CLI操作，首先打开ZooKeeper服务器（“bin&#x2F;zkServer.sh start”），然后打开ZooKeeper客户端（“bin&#x2F;zkCli.sh”）。一旦客户端启动，你可以执行以下操作：<br>1、创建znode<br>2、获取数据<br>3、监视znode的变化<br>4、设置数据<br>5、创建znode的子节点<br>6、列出znode的子节点<br>7、检查状态<br>8、移除&#x2F;删除znode<br>现在让我们用一个例子逐个了解上面的命令。</p><h2 id="创建Znodes"><a href="#创建Znodes" class="headerlink" title="创建Znodes"></a>创建Znodes</h2><p>用给定的路径创建一个znode。flag参数指定创建的znode是临时的，持久的还是顺序的。默认情况下，所有znode都是持久的。<br>当会话过期或客户端断开连接时， <strong>临时节点</strong> （flag：-e）将被自动删除。<br><strong>顺序节点</strong>保证znode路径将是唯一的。<br>ZooKeeper集合将向znode路径填充10位序列号。例如，znode路径 &#x2F;myapp 将转换为&#x2F;myapp0000000001，下一个序列号将为&#x2F;myapp0000000002。如果没有指定flag，则znode被认为是持久的。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /path /data</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /FirstZnode “Myfirstzookeeper-app&quot;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] create /FirstZnode “Myfirstzookeeper-app&quot;</span><br><span class="line">Created /FirstZnode</span><br></pre></td></tr></table></figure><p>要创建<strong>顺序节点</strong>，请添加flag：**-s**，如下所示。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -s /path /data</span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -s /FirstZnode second-data</span><br></pre></td></tr></table></figure><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] create -s /FirstZnode “second-data&quot;</span><br><span class="line">Created /FirstZnode0000000023</span><br></pre></td></tr></table></figure><p>要创建<strong>临时节点</strong>，请添加flag：**-e**，如下所示。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -e /path /data</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -e /SecondZnode “Ephemeral-data&quot;</span><br></pre></td></tr></table></figure><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] create -e /SecondZnode “Ephemeral-data&quot;</span><br><span class="line">Created /SecondZnode</span><br></pre></td></tr></table></figure><p>记住当客户端断开连接时，临时节点将被删除。你可以通过退出ZooKeeper CLI，然后重新打开CLI来尝试。</p><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>它返回znode的关联数据和指定znode的元数据。你将获得信息，例如上次修改数据的时间，修改的位置以及数据的相关信息。此CLI还用于分配监视器以显示数据相关的通知。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /path </span><br></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /FirstZnode</span><br></pre></td></tr></table></figure><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode</span><br><span class="line">“Myfirstzookeeper-app&quot;</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 22</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>要访问顺序节点，必须输入znode的完整路径。</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /FirstZnode0000000023</span><br></pre></td></tr></table></figure><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode0000000023</span><br><span class="line">“Second-data&quot;</span><br><span class="line">cZxid = 0x80</span><br><span class="line">ctime = Tue Sep 29 16:25:47 IST 2015</span><br><span class="line">mZxid = 0x80</span><br><span class="line">mtime = Tue Sep 29 16:25:47 IST 2015</span><br><span class="line">pZxid = 0x80</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 13</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h2 id="Watch（监视）"><a href="#Watch（监视）" class="headerlink" title="Watch（监视）"></a>Watch（监视）</h2><p>当指定的znode或znode的子数据更改时，监视器会显示通知。你只能在 <strong>get</strong> 命令中设置<strong>watch</strong>。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /path [watch] 1</span><br></pre></td></tr></table></figure><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /FirstZnode 1</span><br></pre></td></tr></table></figure><h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode 1</span><br><span class="line">“Myfirstzookeeper-app&quot;</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 22</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>输出类似于普通的 <strong>get</strong> 命令，但它会等待后台等待znode更改。&lt;从这里开始&gt;</p><h2 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h2><p>设置指定znode的数据。完成此设置操作后，你可以使用 <strong>get</strong> CLI命令检查数据。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set /path /data</span><br></pre></td></tr></table></figure><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set /SecondZnode Data-updated</span><br></pre></td></tr></table></figure><h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /SecondZnode “Data-updated&quot;</span><br><span class="line">cZxid = 0x82</span><br><span class="line">ctime = Tue Sep 29 16:29:50 IST 2015</span><br><span class="line">mZxid = 0x83</span><br><span class="line">mtime = Tue Sep 29 16:29:50 IST 2015</span><br><span class="line">pZxid = 0x82</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x15018b47db00000</span><br><span class="line">dataLength = 14</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>如果你在 <strong>get</strong> 命令中分配了<strong>watch</strong>选项（如上一个命令），则输出将类似如下所示。</p><h3 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /FirstZnode “Mysecondzookeeper-app&quot;</span><br><span class="line"></span><br><span class="line">WATCHER: :</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/FirstZnode</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x84</span><br><span class="line">mtime = Tue Sep 29 17:14:47 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 23</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h2 id="创建子项-x2F-子节点"><a href="#创建子项-x2F-子节点" class="headerlink" title="创建子项&#x2F;子节点"></a>创建子项&#x2F;子节点</h2><p>创建子节点类似于创建新的znode。唯一的区别是，子znode的路径也将具有父路径。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /parent/path/subnode/path /data</span><br></pre></td></tr></table></figure><h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /FirstZnode/Child1 firstchildren</span><br></pre></td></tr></table></figure><h3 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 16] create /FirstZnode/Child1 “firstchildren&quot;</span><br><span class="line">created /FirstZnode/Child1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] create /FirstZnode/Child2 “secondchildren&quot;</span><br><span class="line">created /FirstZnode/Child2</span><br></pre></td></tr></table></figure><h2 id="列出子项"><a href="#列出子项" class="headerlink" title="列出子项"></a>列出子项</h2><p>此命令用于列出和显示znode的子项。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /path</span><br></pre></td></tr></table></figure><h3 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /MyFirstZnode</span><br></pre></td></tr></table></figure><h3 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /MyFirstZnode</span><br><span class="line">[mysecondsubnode, myfirstsubnode]</span><br></pre></td></tr></table></figure><h2 id="检查状态"><a href="#检查状态" class="headerlink" title="检查状态"></a>检查状态</h2><p>状态描述指定的znode的元数据。它包含时间戳，版本号，ACL，数据长度和子znode等细项。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat /path</span><br></pre></td></tr></table></figure><h3 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat /FirstZnode</span><br></pre></td></tr></table></figure><h3 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] stat /FirstZnode</span><br><span class="line">cZxid = 0x7f</span><br><span class="line">ctime = Tue Sep 29 16:15:47 IST 2015</span><br><span class="line">mZxid = 0x7f</span><br><span class="line">mtime = Tue Sep 29 17:14:24 IST 2015</span><br><span class="line">pZxid = 0x7f</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 23</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h2 id="移除Znode"><a href="#移除Znode" class="headerlink" title="移除Znode"></a>移除Znode</h2><p>移除指定的znode并递归其所有子节点。只有在这样的znode可用的情况下才会发生。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmr /path</span><br></pre></td></tr></table></figure><h3 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmr /FirstZnode</span><br></pre></td></tr></table></figure><h3 id="输出-11"><a href="#输出-11" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] rmr /FirstZnode</span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] get /FirstZnode</span><br><span class="line">Node does not exist: /FirstZnode</span><br></pre></td></tr></table></figure><p>删除**(delete&#x2F;path)**命令类似于 <strong>remove</strong> 命令，除了它只适用于没有子节点的znode。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、Zookeeper-CLI&quot;&gt;&lt;a href=&quot;#六、Zookeeper-CLI&quot; class=&quot;headerlink&quot; title=&quot;六、Zookeeper CLI&quot;&gt;&lt;/a&gt;六、Zookeeper CLI&lt;/h1&gt;&lt;p&gt;ZooKeeper命令行界面（CLI</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zookeeper 安装</title>
    <link href="https://hexo.tryrun.top/posts/35565cb.html"/>
    <id>https://hexo.tryrun.top/posts/35565cb.html</id>
    <published>2020-09-15T14:29:54.000Z</published>
    <updated>2020-09-15T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、Zookeeper-安装"><a href="#五、Zookeeper-安装" class="headerlink" title="五、Zookeeper 安装"></a>五、Zookeeper 安装</h1><p>在安装ZooKeeper之前，请确保你的系统是在以下任一操作系统上运行：</p><ul><li><strong>任意Linux OS</strong> - 支持开发和部署。适合演示应用程序。</li><li><strong>Windows OS</strong> - 仅支持开发。</li><li><strong>Mac OS</strong> - 仅支持开发。</li></ul><p>ZooKeeper服务器是用Java创建的，它在JVM上运行。你需要使用JDK 6或更高版本。</p><p>现在，按照以下步骤在你的机器上安装ZooKeeper框架。</p><h2 id="步骤1：验证Java安装"><a href="#步骤1：验证Java安装" class="headerlink" title="步骤1：验证Java安装"></a>步骤1：验证Java安装</h2><p>相信你已经在系统上安装了Java环境。现在只需使用以下命令验证它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>如果你在机器上安装了Java，那么可以看到已安装的Java的版本。否则，请按照以下简单步骤安装最新版本的Java。</p><h3 id="步骤1-1：下载JDK"><a href="#步骤1-1：下载JDK" class="headerlink" title="步骤1.1：下载JDK"></a>步骤1.1：下载JDK</h3><p>通过访问链接下载最新版本的JDK，并下载最新版本的<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java</a>。</p><p>最新版本（在编写本教程时）是JDK 8u 60，文件是“jdk-8u60-linuxx64.tar.gz”。请在你的机器上下载该文件。</p><h3 id="步骤1-2：提取文件"><a href="#步骤1-2：提取文件" class="headerlink" title="步骤1.2：提取文件"></a>步骤1.2：提取文件</h3><p>通常，文件会下载到<strong>download</strong>文件夹中。验证并使用以下命令提取tar设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /go/to/download/path</span><br><span class="line">$ tar -zxf jdk-8u60-linux-x64.gz</span><br></pre></td></tr></table></figure><h3 id="步骤1-3：移动到opt目录"><a href="#步骤1-3：移动到opt目录" class="headerlink" title="步骤1.3：移动到opt目录"></a>步骤1.3：移动到opt目录</h3><p>要使Java对所有用户可用，请将提取的Java内容移动到“&#x2F;usr&#x2F;local&#x2F;java”文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su </span><br><span class="line">password: (type password of root user)</span><br><span class="line">$ mkdir /opt/jdk</span><br><span class="line">$ mv jdk-1.8.0_60 /opt/jdk/</span><br></pre></td></tr></table></figure><h3 id="步骤1-4：设置路径"><a href="#步骤1-4：设置路径" class="headerlink" title="步骤1.4：设置路径"></a>步骤1.4：设置路径</h3><p>要设置路径和JAVA_HOME变量，请将以下命令添加到〜&#x2F;.bashrc文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME = /usr/jdk/jdk-1.8.0_60</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><p>现在，将所有更改应用到当前运行的系统中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="步骤1-5：Java替代"><a href="#步骤1-5：Java替代" class="headerlink" title="步骤1.5：Java替代"></a>步骤1.5：Java替代</h3><p>使用以下命令更改Java替代项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_60/bin/java 100</span><br></pre></td></tr></table></figure><h3 id="步骤1-6"><a href="#步骤1-6" class="headerlink" title="步骤1.6"></a>步骤1.6</h3><p>使用步骤1中说明的验证命令**(java -version)**验证Java安装。</p><h2 id="步骤2：ZooKeeper框架安装"><a href="#步骤2：ZooKeeper框架安装" class="headerlink" title="步骤2：ZooKeeper框架安装"></a>步骤2：ZooKeeper框架安装</h2><h3 id="步骤2-1：下载ZooKeeper"><a href="#步骤2-1：下载ZooKeeper" class="headerlink" title="步骤2.1：下载ZooKeeper"></a>步骤2.1：下载ZooKeeper</h3><p>要在你的计算机上安装ZooKeeper框架，请访问以下链接并下载最新版本的ZooKeeper。<a href="http://zookeeper.apache.org/releases.html">http://zookeeper.apache.org/releases.html</a></p><p>到目前为止，最新版本的ZooKeeper是3.4.6(ZooKeeper-3.4.6.tar.gz)。</p><h3 id="步骤2-2：提取tar文件"><a href="#步骤2-2：提取tar文件" class="headerlink" title="步骤2.2：提取tar文件"></a>步骤2.2：提取tar文件</h3><p>使用以下命令提取tar文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd opt/</span><br><span class="line">$ tar -zxf zookeeper-3.4.6.tar.gz</span><br><span class="line">$ cd zookeeper-3.4.6</span><br><span class="line">$ mkdir data</span><br></pre></td></tr></table></figure><h3 id="步骤2-3：创建配置文件"><a href="#步骤2-3：创建配置文件" class="headerlink" title="步骤2.3：创建配置文件"></a>步骤2.3：创建配置文件</h3><p>使用命令 <strong>vi conf&#x2F;zoo.cfg</strong> 和所有以下参数设置为起点，打开名为 <strong>conf&#x2F;zoo.cfg</strong> 的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime = 2000</span><br><span class="line">dataDir = /path/to/zookeeper/data</span><br><span class="line">clientPort = 2181</span><br><span class="line">initLimit = 5</span><br><span class="line">syncLimit = 2</span><br></pre></td></tr></table></figure><p>一旦成功保存配置文件，再次返回终端。你现在可以启动zookeeper服务器。</p><h3 id="步骤2-4：启动ZooKeeper服务器"><a href="#步骤2-4：启动ZooKeeper服务器" class="headerlink" title="步骤2.4：启动ZooKeeper服务器"></a>步骤2.4：启动ZooKeeper服务器</h3><p>执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>执行此命令后，你将收到以下响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ JMX enabled by default</span><br><span class="line">$ Using config: /Users/../zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class="line">$ Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><h3 id="步骤2-5：启动CLI"><a href="#步骤2-5：启动CLI" class="headerlink" title="步骤2.5：启动CLI"></a>步骤2.5：启动CLI</h3><p>键入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zkCli.sh</span><br></pre></td></tr></table></figure><p>键入上述命令后，将连接到ZooKeeper服务器，你应该得到以下响应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connecting to localhost:2181</span><br><span class="line">................</span><br><span class="line">................</span><br><span class="line">................</span><br><span class="line">Welcome to ZooKeeper!</span><br><span class="line">................</span><br><span class="line">................</span><br><span class="line">WATCHER::</span><br><span class="line">WatchedEvent state:SyncConnected type: None path:null</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure><h3 id="停止ZooKeeper服务器"><a href="#停止ZooKeeper服务器" class="headerlink" title="停止ZooKeeper服务器"></a>停止ZooKeeper服务器</h3><p>连接服务器并执行所有操作后，可以使用以下命令停止zookeeper服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、Zookeeper-安装&quot;&gt;&lt;a href=&quot;#五、Zookeeper-安装&quot; class=&quot;headerlink&quot; title=&quot;五、Zookeeper 安装&quot;&gt;&lt;/a&gt;五、Zookeeper 安装&lt;/h1&gt;&lt;p&gt;在安装ZooKeeper之前，请确保你的系统</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>四十五、常用C++编译器推荐</title>
    <link href="https://hexo.tryrun.top/posts/c46d9b3b.html"/>
    <id>https://hexo.tryrun.top/posts/c46d9b3b.html</id>
    <published>2020-09-14T14:29:54.000Z</published>
    <updated>2020-09-14T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四十五、常用C-编译器推荐"><a href="#四十五、常用C-编译器推荐" class="headerlink" title="四十五、常用C++编译器推荐"></a>四十五、常用C++编译器推荐</h1><p>本文将为大家带来的是几款简单实用的C++编译器（非IDE），希望大家喜欢。</p><h2 id="GCC（GNU-Compiler-Collection）"><a href="#GCC（GNU-Compiler-Collection）" class="headerlink" title="GCC（GNU Compiler Collection）"></a><strong>GCC（GNU Compiler Collection）</strong></h2><p>官方网站: <a href="https://gcc.gnu.org/">https://gcc.gnu.org/</a></p><p>GCC有Windows移植版本，比较出名的就是MinGW和TDM-GCC</p><p>GNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。GNU系统是彻底的自由软件。此处，“自由”的含义是它尊重用户的自由。</p><h2 id="llvm-Clang"><a href="#llvm-Clang" class="headerlink" title="llvm+Clang"></a><strong>llvm+Clang</strong></h2><p>LLVM官方网站：<a href="http://llvm.org/">http://llvm.org/</a></p><p>Clang官方网站：<a href="http://clang.llvm.org/get_started.html">http://clang.llvm.org/get_started.html</a></p><p>LLVM是构架编译器(compiler)的框架系统，以C++编写而成，用于优化以任意程序语言编写的程序的编译时间(compile-time)、链接时间(link-time)、运行时间(run-time)以及空闲时间(idle-time)，对开发者保持开放，并兼容已有脚本。LLVM计划启动于2000年，最初由University of Illinois at Urbana-Champaign的Chris Lattner主持开展。2006年Chris Lattner加盟Apple Inc.并致力于LLVM在Apple开发体系中的应用。Apple也是LLVM计划的主要资助者.</p><p>Low Level Virtual Machine (LLVM) 是一个开源的编译器架构，它已经被成功应用到多个应用领域。Clang ( 发音为 &#x2F;kl??&#x2F;) 是 LLVM 的一个编译器前端，它目前支持 C, C++, Objective-C 以及 Objective-C++ 等编程语言。Clang 对源程序进行词法分析和语义分析，并将分析结果转换为 Abstract Syntax Tree ( 抽象语法树 ) ，最后使用 LLVM 作为后端代码的生成器。</p><p>Clang 的开发目标是提供一个可以替代 GCC 的前端编译器。与 GCC 相比，Clang 是一个重新设计的编译器前端，具有一系列优点，例如模块化，代码简单易懂，占用内存小以及容易扩展和重用等。由于 Clang 在设计上的优异性，使得 Clang 非常适合用于设计源代码级别的分析和转化工具。Clang 也已经被应用到一些重要的开发领域，如 Static Analysis 是一个基于 Clang 的静态代码分析工具。</p><h2 id="Watcom-C-x2F-C"><a href="#Watcom-C-x2F-C" class="headerlink" title="Watcom C&#x2F;C++"></a><strong>Watcom C&#x2F;C++</strong></h2><p>官方网站：<a href="http://www.openwatcom.org/index.php/Download">http://www.openwatcom.org/index.php/Download</a></p><p>在DOS开发环境中，Watcom C&#x2F;C++ 编译器 以编译后的exe运行高速而著称，且首个支持Intel 80386 “保护模式”的编译器。于90年代中期，大批的雄心技术游戏(例如 Doom、Descent、Duke Nukem 3D 都以 Watcom C 写成）</p><p>Watcom C&#x2F;C++ 编译器、Watch Fortran 编译器 经已在不其先前所属公司Sybase售卖, 而被 SciTech 软件公司 作为 Open Watcom 开源包 发行。类似于其他的 开源编译器(例如 [GCC])项目，Watcom C代码小而便携, 其编译器后端(代码生成器)的目标码可变。该编译器可在DOS、OS&#x2F;2、Windows等操作系统上运行，并生成各种可运行的(不必是该操作系统的)代码。该编译器支持Novell NetWare的 NLM 目标码。目前正进行 为 Linux[1] 、modern BSD (例如FreeBSD) 操作系统 重定目标码, 以便在 x86、PowerPC 及　其它处理器上运行。Open Watcom C&#x2F;C++ 的1.4版于2005年12月发行，采用 Linux x86 为实验目标, 支持NT、OS&#x2F;2等host平台. 曾有某被弃置的QNX版本，但其编译所须的库并未开源发行。当前最近的稳定版是1.9版，在2010年6月发行。</p><h2 id="Digital-Mars"><a href="#Digital-Mars" class="headerlink" title="Digital Mars"></a><strong>Digital Mars</strong></h2><p>官方网站：<a href="http://www.digitalmars.com/">http://www.digitalmars.com/</a></p><p>DigitalMars是一款高性能的编译器，功能包含，快速编译&#x2F;链接时、强大的优化技术、Contract设计、完整的资源库、浏览HTML文档，反汇编、库、资源编译器等。命令行及GUI版本、教程、代码示例、在线更新、标准模板库等等。</p><h2 id="MSVC系列"><a href="#MSVC系列" class="headerlink" title="MSVC系列"></a><strong>MSVC系列</strong></h2><p>与Visual Studio集成发布，微软自己的编译器，VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等。所写的目标代码适用于微软支持的所有平台，包括Microsoft Windows、Windows Mobile、Windows CE、.NET Framework、.NET Compact Framework和Microsoft Silverlight 及Windows Phone。</p><h2 id="Borland系列（turbo-c和Borland-C-）"><a href="#Borland系列（turbo-c和Borland-C-）" class="headerlink" title="Borland系列（turbo c和Borland C++）"></a><strong>Borland系列（turbo c和Borland C++）</strong></h2><p>Borland C++ Builder Compiler 是一个 BC编译器。它是用来优化 BC 开发系统的工具。它包括最后版本的 ANSI&#x2F;ISO C++ 语言的支持，包括 RTL，C++ 的 STL框架结构支持。Turbo C（TC）是其早期的命令行编译器作品</p><h2 id="Intel-C"><a href="#Intel-C" class="headerlink" title="Intel C++"></a><strong>Intel C++</strong></h2><p>Intel C++ Compiler （简称 icc 或 icl）是美国 Intel 公司开发的 C&#x2F;C++编译器，适用于 Linux、Microsoft Windows 和 Mac OS X 操作系统。</p><p>Intel 编译支持 IA-32、Intel 64、Itanium 2、Intel Atom 处理器和某些非 Intel 的兼容处理器（例如某些 AMD 处理器）。开发人员应当检查系统需求。适用于 IA-32 和 Intel 64 的 Intel C++ 编译器的主要特点是自动向量化器，它能够生成 SSE、SSE2 和 SSE3 的 SIMD 指令及其适用于 Intel 无线 MMX 和 MMX 2 的嵌入式变种。</p><p>Intel C++ Compiler 进一步支持 OpenMP 3.0 和适用于对称多处理的自动并行化。借助于 Cluster OpenMP 的附加能力，编译器还可为分布存储多处理根据 OpenMP 指示自动生成消息传递接口调用。</p><p>Intel C++ Compiler 可通过四种方式获得，它分别是 Intel Parallel Studio、Intel C++ Compiler 专业版、Intel 编译器套装和 Intel Cluster Toolkit 编译器版的一部分。该编译器的最新发布是 Intel C++ Compiler 14.0 版本</p><h2 id="TCC-Tiny-C-Compiler"><a href="#TCC-Tiny-C-Compiler" class="headerlink" title="TCC(Tiny C Compiler)"></a><strong>TCC(Tiny C Compiler)</strong></h2><p>官方网站：<a href="http://bellard.org/tcc/">http://bellard.org/tcc/</a></p><p>Tiny C Compiler（缩写为TCC, tCc或TinyCC）用于x86（16&#x2F;32位）或是x86-64（64位）系统的C compiler，而开发者为Fabrice Bellard。软件是设计用于低级电脑环境，或是于磁盘容量有限的空间中（1.44磁片或是硬盘）。软件可以适用于Windows、Linux、Unix操作系统，而最新版本为0.9.26（Feb 15, 2013）。TCC是在GNU宽通用公共许可证（LGPL）协议规范下发布。作者是大神法布里斯·贝拉（FabriceBellard）</p><p>TCC符合ANSI C（C89&#x2F;C90）规范，Tiny C Compiler Reference Documentation accessed on 2008-08-07]亦符合新版的ISO C99标准规范，与GNU C扩展的内嵌汇编语言（即inline assembler，内联汇编大陆用语）功能汇编语言。</p><p>而Google Andriod系统内亦曾经内置于其中，于Andriod 2.0版本中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四十五、常用C-编译器推荐&quot;&gt;&lt;a href=&quot;#四十五、常用C-编译器推荐&quot; class=&quot;headerlink&quot; title=&quot;四十五、常用C++编译器推荐&quot;&gt;&lt;/a&gt;四十五、常用C++编译器推荐&lt;/h1&gt;&lt;p&gt;本文将为大家带来的是几款简单实用的C++编译器（</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>四、Zookeeper leader选举</title>
    <link href="https://hexo.tryrun.top/posts/13f8b425.html"/>
    <id>https://hexo.tryrun.top/posts/13f8b425.html</id>
    <published>2020-09-14T14:29:54.000Z</published>
    <updated>2020-09-14T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、Zookeeper-leader选举"><a href="#四、Zookeeper-leader选举" class="headerlink" title="四、Zookeeper leader选举"></a>四、Zookeeper leader选举</h1><p>让我们分析如何在ZooKeeper集合中选举leader节点。考虑一个集群中有N个节点。leader选举的过程如下：</p><p>所有节点创建具有相同路径 &#x2F;app&#x2F;leader_election&#x2F;guid_ 的顺序、临时节点。</p><p>ZooKeeper集合将附加10位序列号到路径，创建的znode将是 &#x2F;app&#x2F;leader_election&#x2F;guid_0000000001，&#x2F;app&#x2F;leader_election&#x2F;guid_0000000002等。</p><p>对于给定的实例，在znode中创建最小数字的节点成为leader，而所有其他节点是follower。</p><p>每个follower节点监视下一个具有最小数字的znode。例如，创建znode&#x2F;app&#x2F;leader_election&#x2F;guid_0000000008的节点将监视znode&#x2F;app&#x2F;leader_election&#x2F;guid_0000000007，创建znode&#x2F;app&#x2F;leader_election&#x2F;guid_0000000007的节点将监视znode&#x2F;app&#x2F;leader_election&#x2F;guid_0000000006。</p><p>如果leader关闭，则其相应的znode&#x2F;app&#x2F;leader_electionN会被删除。</p><p>下一个在线follower节点将通过监视器获得关于leader移除的通知。</p><p>下一个在线follower节点将检查是否存在其他具有最小数字的znode。如果没有，那么它将承担leader的角色。否则，它找到的创建具有最小数字的znode的节点将作为leader。</p><p>类似地，所有其他follower节点选举创建具有最小数字的znode的节点作为leader。</p><p>leader选举是一个复杂的过程，但ZooKeeper服务使它非常简单。让我们在下一章中继续学习ZooKeeper安装，以用于开发目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四、Zookeeper-leader选举&quot;&gt;&lt;a href=&quot;#四、Zookeeper-leader选举&quot; class=&quot;headerlink&quot; title=&quot;四、Zookeeper leader选举&quot;&gt;&lt;/a&gt;四、Zookeeper leader选举&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>四十四、C++ vector使用方法</title>
    <link href="https://hexo.tryrun.top/posts/d72ec39.html"/>
    <id>https://hexo.tryrun.top/posts/d72ec39.html</id>
    <published>2020-09-13T14:29:54.000Z</published>
    <updated>2020-09-13T14:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四十四、C-vector使用方法"><a href="#四十四、C-vector使用方法" class="headerlink" title="四十四、C++ vector使用方法"></a>四十四、C++ vector使用方法</h1><p>在c++中，vector是一个十分有用的容器。它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。</p><p><strong>使用vector注意事项：</strong></p><p>1、如果你要表示的向量长度较长（需要为向量内部保存很多数），容易导致内存泄漏，而且效率会很低；</p><p>2、Vector作为函数的参数或者返回值时，需要注意它的写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Distance</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a, vector&lt;<span class="type">int</span>&gt;&amp;b)</span></span></span><br></pre></td></tr></table></figure><p>其中的“&amp;”绝对不能少！！！</p><p><strong>实例：</strong></p><p>vectortest;&#x2F;&#x2F;建立一个vector，int为数组元素的数据类型，test为动态数组名</p><p>简单的使用方法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;test;<span class="comment">//建立一个vector</span></span><br><span class="line">test.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">test.<span class="built_in">push_back</span>(<span class="number">2</span>);<span class="comment">//把1和2压入vector，这样test[0]就是1,test[1]就是2</span></span><br></pre></td></tr></table></figure><p>自己见到的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;Point2f&gt; &gt; points; <span class="comment">//定义一个二维数组</span></span><br><span class="line">points[<span class="number">0</span>].<span class="built_in">size</span>();  <span class="comment">//指第一行的列数</span></span><br></pre></td></tr></table></figure><p><strong>1 、基本操作</strong></p><p>(1)头文件#include.</p><p>(2)创建vector对象，<code>vector vec;</code></p><p>(3)尾部插入数字：<code>vec.push_back(a);</code></p><p>(4)使用下标访问元素，<code>cout&lt;&lt;vec[0]&lt;&lt;endl;</code>记住下标是从0开始的。</p><p>(5)使用迭代器访问元素.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>(6)插入元素：<code>vec.insert(vec.begin()+i,a);</code>在第i+1个元素前面插入a;</p><p>(7)删除元素：<code>vec.erase(vec.begin()+2);</code>删除第3个元素</p><p><code>vec.erase(vec.begin()+i,vec.end()+j);</code>删除区间[i,j-1];区间从0开始</p><p>(8)向量大小:<code>vec.size();</code></p><p>(9)清空:<code>vec.clear();</code></p><p>特别提示：这里有begin()与end()函数、front()与back()的差别</p><p><strong>2、重要说明</strong></p><p>vector的元素不仅仅可以是int,double,string,还可以是结构体，但是要注意：结构体要定义为全局的，否则会出错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">rect</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> id;  </span><br><span class="line">    <span class="type">int</span> length;  </span><br><span class="line">    <span class="type">int</span> width;  </span><br><span class="line">　　<span class="comment">//对于向量元素是结构体的，可在结构体内部定义比较函数，下面按照id,length,width升序排序。  </span></span><br><span class="line">　　<span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> rect &amp;a)  <span class="type">const</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(id!=a.id)  </span><br><span class="line">            <span class="keyword">return</span> id&lt;a.id;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(length!=a.length)  </span><br><span class="line">                <span class="keyword">return</span> length&lt;a.length;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">                <span class="keyword">return</span> width&lt;a.width;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;Rect;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    vector&lt;Rect&gt; vec;  </span><br><span class="line">    Rect rect;  </span><br><span class="line">    rect.id=<span class="number">1</span>;  </span><br><span class="line">    rect.length=<span class="number">2</span>;  </span><br><span class="line">    rect.width=<span class="number">3</span>;  </span><br><span class="line">    vec.<span class="built_in">push_back</span>(rect);  </span><br><span class="line">    vector&lt;Rect&gt;::iterator it=vec.<span class="built_in">begin</span>();  </span><br><span class="line">    cout&lt;&lt;(*it).id&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(*it).length&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;(*it).width&lt;&lt;endl;      </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>3、算法</strong></p><p>(1) 使用reverse将元素翻转：需要头文件#include</p><p><code>reverse(vec.begin(),vec.end());</code>将元素翻转，即逆序排列！</p><p>(在vector中，如果一个函数中需要两个迭代器，一般后一个都不包含)</p><p>(2)使用sort排序：需要头文件#include，</p><p><code>sort(vec.begin(),vec.end());</code>(默认是按升序排列,即从小到大).</p><p>可以通过重写排序比较函数按照降序比较，如下：</p><p>定义排序比较函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Comp</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a,<span class="type">const</span> <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时<code>:sort(vec.begin(),vec.end(),Comp)</code>，这样就降序排序。</p><p><strong>输出Vector的中的元素</strong></p><p>vector vecClass;</p><p>int nSize &#x3D; vecClass.size();</p><p>&#x2F;&#x2F;打印vecClass,方法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nSize;i++)    </span><br><span class="line">&#123;    </span><br><span class="line">   cout&lt;&lt;vecClass[i]&lt;&lt;<span class="string">&quot;     &quot;</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">   cout&lt;&lt;endl;   </span><br></pre></td></tr></table></figure><p>需要注意的是：以方法一进行输出时，数组的下表必须保证是整数。</p><p>&#x2F;&#x2F;打印vecClass,方法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nSize;i++)    </span><br><span class="line">&#123;    </span><br><span class="line">   cout&lt;&lt;vecClass.<span class="built_in">at</span>(i)&lt;&lt;<span class="string">&quot;     &quot;</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">   cout&lt;&lt;endl;    </span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;打印vecClass,方法三：输出某一指定的数值时不方便</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">float</span>&gt;::iterator it = vecClass.<span class="built_in">begin</span>();it!=vecClass.<span class="built_in">end</span>();it++)    </span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;<span class="string">&quot;   &quot;</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">    cout&lt;&lt;endl;    </span><br></pre></td></tr></table></figure><p><strong>二维数组的使用：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cv.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>   </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">    <span class="type">int</span> out[<span class="number">3</span>][<span class="number">2</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>,   </span><br><span class="line">             <span class="number">3</span>, <span class="number">4</span>,  </span><br><span class="line">            <span class="number">5</span>, <span class="number">6</span> &#125;;  </span><br><span class="line">    vector &lt;<span class="type">int</span>*&gt; v1;  </span><br><span class="line">    v1.<span class="built_in">push_back</span>(out[<span class="number">0</span>]);  </span><br><span class="line">    v1.<span class="built_in">push_back</span>(out[<span class="number">1</span>]);  </span><br><span class="line">    v1.<span class="built_in">push_back</span>(out[<span class="number">2</span>]);  </span><br><span class="line">    cout &lt;&lt; v1[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;<span class="comment">//1  </span></span><br><span class="line">    cout &lt;&lt; v1[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;<span class="comment">//2  </span></span><br><span class="line">    cout &lt;&lt; v1[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; endl;<span class="comment">//3  </span></span><br><span class="line">    cout &lt;&lt; v1[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;<span class="comment">//4  </span></span><br><span class="line">    cout &lt;&lt; v1[<span class="number">2</span>][<span class="number">0</span>] &lt;&lt; endl;<span class="comment">//5  </span></span><br><span class="line">    cout &lt;&lt; v1[<span class="number">2</span>][<span class="number">1</span>] &lt;&lt; endl;<span class="comment">//6  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四十四、C-vector使用方法&quot;&gt;&lt;a href=&quot;#四十四、C-vector使用方法&quot; class=&quot;headerlink&quot; title=&quot;四十四、C++ vector使用方法&quot;&gt;&lt;/a&gt;四十四、C++ vector使用方法&lt;/h1&gt;&lt;p&gt;在c++中，vect</summary>
      
    
    
    
    
  </entry>
  
</feed>
